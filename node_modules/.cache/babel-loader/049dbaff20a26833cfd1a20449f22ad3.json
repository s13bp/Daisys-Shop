{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Countries = void 0;\n\nvar country_data_1 = __importDefault(require(\"country-data\")); // more countries @ https://github.com/umpirsky/country-list\n\n\nvar country_json_1 = __importDefault(require(\"./data/countries/es/country.json\"));\n\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\n\nvar removeDiacritics = function removeDiacritics(word) {\n  return word && word.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase().trim();\n};\n\nvar matchCountry = function matchCountry(country, query) {\n  return country.displayNameNoDiacritics.startsWith(query) || country.countryCallingCode.startsWith('+' + query) || country.alpha3.startsWith(query.toUpperCase());\n};\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\n\nvar Countries =\n/** @class */\nfunction () {\n  function Countries(language) {\n    // fallback to 'en-us'\n    this.language = language ? language.toLocaleLowerCase() : 'en-us';\n    this.countryMap = new Map();\n    this.localizedCountries = Array();\n    this.assignCountries();\n  }\n\n  Countries.prototype.getCountry = function (countryName) {\n    if (!countryName) {\n      return undefined;\n    }\n\n    var query = removeDiacritics(countryName);\n    return this.localizedCountries.find(function (country) {\n      return country.displayNameNoDiacritics === query;\n    });\n  };\n\n  Countries.prototype.getCountryByCodeAlpha2 = function (countryCode) {\n    return this.countryMap.get(countryCode);\n  };\n\n  Countries.prototype.getFilteredCountries = function (query) {\n    query = removeDiacritics(query); // Return full list if the query is empty\n\n    if (!query || !query.length) {\n      return this.localizedCountries;\n    }\n\n    return this.localizedCountries.filter(function (country) {\n      return matchCountry(country, query);\n    });\n  };\n\n  Countries.prototype.assignCountries = function () {\n    var _this = this; // add other languages to country data\n\n\n    this.localizedCountries = country_data_1.default.callingCountries.all.map(function (country) {\n      // this is assuming these two are the only cases, in i18n.ts seems like there\n      // are fallback languages 'es-US' and 'es-LA' that are not covered\n      var names = {\n        'en-us': country.name,\n        // @ts-ignore\n        'es-419': country_json_1.default[country.alpha2]\n      };\n      var displayName = names[_this.language] || country.name; // We only use the first calling code, others are irrelevant in the current dataset.\n      // Also some of them have a non standard calling code\n      // for instance: 'Antigua And Barbuda' has '+1 268', where only '+1' is expected\n      // so we fix this here\n\n      var countryCallingCode = country.countryCallingCodes[0].split(' ')[0];\n\n      var localizedCountry = __assign(__assign({\n        names: names,\n        displayName: displayName,\n        displayNameNoDiacritics: removeDiacritics(displayName),\n        countryPhonePlaceholder: {\n          national: (0, phoneNumbers_1.getExampleNumber)(countryCallingCode) // Not needed right now\n          // international: getExampleNumber(countryCallingCode, true, true),\n\n        },\n        countryCallingCode: countryCallingCode\n      }, country), {\n        // Use default emoji when flag emoji is missing\n        emoji: country.emoji || '🏳'\n      }); // use ISO 3166-1 alpha2 code as country id\n\n\n      _this.countryMap.set(country.alpha2.toUpperCase(), localizedCountry);\n\n      return localizedCountry;\n    }).sort(function (a, b) {\n      return a.displayName.localeCompare(b.displayName);\n    });\n  };\n\n  return Countries;\n}();\n\nexports.Countries = Countries;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8D,CACA;;;AACA;;AACA;;AAoBA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAa;AACpC,aAAI,IACJA,IAAI,CACDC,SADH,CACa,KADb,EAEGC,OAFH,CAEW,kBAFX,EAE+B,EAF/B,EAGGC,WAHH,GAIGC,IAJH,EADA;AAKS,CANX;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAA4BC,KAA5B,EAAyC;AAC5D,SACED,OAAO,CAACE,uBAAR,CAAgCC,UAAhC,CAA2CF,KAA3C,KACAD,OAAO,CAACI,kBAAR,CAA2BD,UAA3B,CAAsC,MAAMF,KAA5C,CADA,IAEAD,OAAO,CAACK,MAAR,CAAeF,UAAf,CAA0BF,KAAK,CAACK,WAAN,EAA1B,CAHF;AAKD,CAND;AAQA;;;;;AAGA;AAAA;AAAA;AAKE,qBAAYC,QAAZ,EAA6B;AAC3B;AACA,SAAKA,QAAL,GAAgBA,QAAQ,GAAGA,QAAQ,CAACC,iBAAT,EAAH,GAAkC,OAA1D;AACA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,SAAKC,kBAAL,GAA0BC,KAAK,EAA/B;AACA,SAAKC,eAAL;AACD;;AAEDC,6CAAWC,WAAX,EAAsC;AACpC,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAOC,SAAP;AACD;;AAED,QAAMf,KAAK,GAAGR,gBAAgB,CAACsB,WAAD,CAA9B;AAEA,WAAO,KAAKJ,kBAAL,CAAwBM,IAAxB,CAA6B,UAACjB,OAAD,EAAQ;AAAK,oBAAO,CAACE,uBAAR,KAAoCD,KAApC;AAAyC,KAAnF,CAAP;AACD,GARD;;AAUAa,yDAAuBI,WAAvB,EAA0C;AACxC,WAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAAoBD,WAApB,CAAP;AACD,GAFD;;AAIAJ,uDAAqBb,KAArB,EAAkC;AAChCA,SAAK,GAAGR,gBAAgB,CAACQ,KAAD,CAAxB,CADgC,CAEhC;;AACA,QAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACmB,MAArB,EAA6B;AAC3B,aAAO,KAAKT,kBAAZ;AACD;;AAED,WAAO,KAAKA,kBAAL,CAAwBU,MAAxB,CAA+B,UAACrB,OAAD,EAAQ;AAAK,yBAAY,CAACA,OAAD,EAAUC,KAAV,CAAZ;AAA4B,KAAxE,CAAP;AACD,GARD;;AAUQa,wCAAR;AAAA,sBACE;;;AACA,SAAKH,kBAAL,GAA0BW,uBAAYC,gBAAZ,CAA6BC,GAA7B,CACvBC,GADuB,CACnB,UAACzB,OAAD,EAA6B;AAChC;AACA;AACA,UAAM0B,KAAK,GAAiB;AAC1B,iBAAS1B,OAAO,CAAC2B,IADS;AAE1B;AACA,kBAAUC,uBAAO5B,OAAO,CAAC6B,MAAf;AAHgB,OAA5B;AAMA,UAAMC,WAAW,GAAGJ,KAAK,CAACK,KAAI,CAACxB,QAAN,CAAL,IAAwBP,OAAO,CAAC2B,IAApD,CATgC,CAWhC;AACA;AACA;AACA;;AACA,UAAMvB,kBAAkB,GAAGJ,OAAO,CAACgC,mBAAR,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAA3B;;AAEA,UAAMC,gBAAgB;AACpBR,aAAK,OADe;AAEpBI,mBAAW,aAFS;AAGpB5B,+BAAuB,EAAET,gBAAgB,CAACqC,WAAD,CAHrB;AAIpBK,+BAAuB,EAAE;AACvBC,kBAAQ,EAAE,qCAAiBhC,kBAAjB,CADa,CAEvB;AACA;;AAHuB,SAJL;AASpBA,0BAAkB;AATE,SAUjBJ,OAViB,GAUV;AACV;AACAqC,aAAK,EAAErC,OAAO,CAACqC,KAAR,IAAiB;AAFd,OAVU,CAAtB,CAjBgC,CAgChC;;;AACAN,WAAI,CAACtB,UAAL,CAAgB6B,GAAhB,CAAoBtC,OAAO,CAAC6B,MAAR,CAAevB,WAAf,EAApB,EAAkD4B,gBAAlD;;AAEA,aAAOA,gBAAP;AACD,KArCuB,EAsCvBK,IAtCuB,CAsClB,UAACC,CAAD,EAAIC,CAAJ,EAAK;AAAK,cAAC,CAACX,WAAF,CAAcY,aAAd,CAA4BD,CAAC,CAACX,WAA9B;AAA0C,KAtClC,CAA1B;AAuCD,GAzCO;;AA0CV;AAAC,CA/ED;;AAAaa","names":["removeDiacritics","word","normalize","replace","toLowerCase","trim","matchCountry","country","query","displayNameNoDiacritics","startsWith","countryCallingCode","alpha3","toUpperCase","language","toLocaleLowerCase","countryMap","Map","localizedCountries","Array","assignCountries","Countries","countryName","undefined","find","countryCode","get","length","filter","country_data_1","callingCountries","all","map","names","name","country_json_1","alpha2","displayName","_this","countryCallingCodes","split","localizedCountry","countryPhonePlaceholder","national","emoji","set","sort","a","b","localeCompare","exports"],"sourceRoot":"","sources":["../src/countries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}