{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nexports.sleep = sleep; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsync = function (inFunction, tries, params, delay, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_1 = _a.sent();\n          return [4\n          /*yield*/\n          , sleep(delay)];\n\n        case 5:\n          _a.sent();\n\n          saveError = error_1;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i + \":\", error_1);\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.retryAsync = retryAsync; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsyncWithBackOff = function (inFunction, tries, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_2 = _a.sent();\n          return [4\n          /*yield*/\n          , sleep(Math.pow(factor, i) * delay)];\n\n        case 5:\n          _a.sent();\n\n          saveError = error_2;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_2);\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\n\nvar selectiveRetryAsyncWithBackOff = function (inFunction, tries, dontRetry, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 8];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_3 = _a.sent();\n\n          if (dontRetry.some(function (msg) {\n            return error_3.message.includes(msg);\n          })) {\n            throw error_3;\n          }\n\n          saveError = error_3;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_3);\n          }\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          if (!(i < tries - 1)) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , sleep(Math.pow(factor, i) * delay)];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 8:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff; // Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsyncWithBackOffAndTimeout = function (inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n  if (delayMs === void 0) {\n    delayMs = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (timeoutMs === void 0) {\n    timeoutMs = 2000;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \" + timeoutMs + \"ms\"), TAG + \"/@retryAsyncWithBackOffAndTimeout, Timed out after \" + timeoutMs + \"ms\", logger)];\n    });\n  });\n};\n\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\n\nfunction concurrentMap(concurrency, xs, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, _loop_1, i;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          res = [];\n\n          _loop_1 = function (i) {\n            var remaining, sliceSize, slice, _b, _c;\n\n            return __generator(this, function (_d) {\n              switch (_d.label) {\n                case 0:\n                  remaining = xs.length - i;\n                  sliceSize = Math.min(remaining, concurrency);\n                  slice = xs.slice(i, i + sliceSize);\n                  _c = (_b = res).concat;\n                  return [4\n                  /*yield*/\n                  , Promise.all(slice.map(function (elem, index) {\n                    return mapFn(elem, i + index);\n                  }))];\n\n                case 1:\n                  res = _c.apply(_b, [_d.sent()]);\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          };\n\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < xs.length)) return [3\n          /*break*/\n          , 4];\n          return [5\n          /*yield**/\n          , _loop_1(i)];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          i += concurrency;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , res];\n      }\n    });\n  });\n}\n\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\n\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var xk, xv, res;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          xk = Object.keys(x);\n          xv = [];\n          xk.forEach(function (k) {\n            return xv.push(x[k]);\n          });\n          return [4\n          /*yield*/\n          , concurrentMap(concurrency, xv, function (val, idx) {\n            return mapFn(val, xk[idx]);\n          })];\n\n        case 1:\n          res = _a.sent();\n          return [2\n          /*return*/\n          , res.reduce(function (output, value, index) {\n            output[xk[index]] = value;\n            return output;\n          }, {})];\n      }\n    });\n  });\n}\n\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\n\nvar timeout = function (inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n  if (timeoutLogMsg === void 0) {\n    timeoutLogMsg = null;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  var timer;\n  return Promise.race([inFunction.apply(void 0, params), new Promise(function (_resolve, reject) {\n    timer = setTimeout(function () {\n      if (logger) {\n        logger(timeoutLogMsg || TAG + \"/@timeout Timed out after \" + timeoutMs + \"ms\");\n      }\n\n      reject(timeoutError);\n    }, timeoutMs);\n  })]).finally(function () {\n    clearTimeout(timer);\n  });\n};\n\nexports.timeout = timeout;","map":{"version":3,"mappings":"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","names":["TAG","sleep","ms","Promise","resolve","exports","retryAsync","inFunction","tries","params","delay","logger","i","_a","saveError","error_1","retryAsyncWithBackOff","factor","Math","pow","error_2","selectiveRetryAsyncWithBackOff","dontRetry","some","msg","error_3","message","includes","retryAsyncWithBackOffAndTimeout","delayMs","timeoutMs","Error","concurrentMap","concurrency","xs","mapFn","res","remaining","length","sliceSize","min","slice","_c","concat","all","map","elem","index","_d","concurrentValuesMap","x","xk","Object","keys","xv","forEach","k","push","val","idx","reduce","output","value","timeout","timeoutError","timeoutLogMsg","timer","race","_resolve","reject","setTimeout","finally","clearTimeout"],"sourceRoot":"","sources":["../src/async.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}