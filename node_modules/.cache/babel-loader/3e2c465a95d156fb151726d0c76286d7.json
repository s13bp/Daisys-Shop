{"ast":null,"code":"/**\n * ECIES encrypt/decrypt with Ethereum keys\n * A Typescript implementation of geth/crypto/ecies/ecies.go\n * Modified from https://github.com/LimelabsTech/eth-ecies/blob/master/index.js\n * At commit c858cbd021e9a99d8afa629de33c8c30d923b3e5.\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ECIES = exports.Decrypt = exports.Encrypt = exports.AES128DecryptAndHMAC = exports.AES128Decrypt = exports.AES128EncryptAndHMAC = exports.AES128Encrypt = exports.IV_LENGTH = void 0;\n\nvar crypto_1 = require(\"crypto\");\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar ec = new elliptic_1.ec('secp256k1');\nexports.IV_LENGTH = 16;\n/**\n * Increments big endian uint32\n *\n * @param {Buffer} ctr 32 bit unsigned big endian integer to increment.\n * @returns Incremented counter.\n */\n\nvar IncCounter = function IncCounter(ctr) {\n  for (var i = ctr.length - 1; i >= 0; i--) {\n    ctr[i]++;\n\n    if (ctr[i] !== 0) {\n      return ctr;\n    }\n  }\n\n  return ctr;\n};\n/**\n * NIST 8000-56C Rev 1 One Step KDF with the following parameters:\n * - H(x) is SHA-256(x)\n * - Fixed info is null\n *\n * TODO:\n * - Implement proper ceiling on reps.\n *\n * @param {Buffer} px Input keying material to derive key from.\n * @param {number} kdLen Length of output in bytes\n * @returns {Buffer} Output keying material of length kdLen bytes.\n */\n\n\nvar ConcatKDF = function ConcatKDF(px, kdLen) {\n  var blockSize = 32;\n  var reps = (kdLen + 7) * 8 / (blockSize * 8);\n  var counter = Buffer.from('00000001', 'hex');\n  var k = Buffer.from('00', 'hex');\n\n  for (var i = 0; i <= reps; i++) {\n    var hash = (0, crypto_1.createHash)('sha256');\n    hash.update(counter);\n    hash.update(px);\n    k = Buffer.concat([k, hash.digest()]);\n    counter = IncCounter(counter);\n  }\n\n  return k.slice(1, kdLen + 1);\n};\n/**\n * AES-128 CTR encrypt\n * @param {Buffer} encryptionKey\n * @param {Buffer} iv\n * @param {Buffer} plaintext\n * @returns {Buffer} ciphertext\n */\n\n\nfunction AES128Encrypt(encryptionKey, iv, plaintext) {\n  var cipher = (0, crypto_1.createCipheriv)('aes-128-ctr', encryptionKey, iv);\n  var firstChunk = cipher.update(plaintext);\n  var secondChunk = cipher.final();\n  return Buffer.concat([iv, firstChunk, secondChunk]);\n}\n\nexports.AES128Encrypt = AES128Encrypt;\n/**\n * AES-128 CTR encrypt with message authentication\n * @param {Buffer} encryptionKey\n * @param {Buffer} macKey\n * @param {Buffer} plaintext\n * @returns {Buffer} ciphertext\n */\n\nfunction AES128EncryptAndHMAC(encryptionKey, macKey, plaintext) {\n  var iv = (0, crypto_1.randomBytes)(exports.IV_LENGTH);\n  var dataToMac = AES128Encrypt(encryptionKey, iv, plaintext);\n  var mac = (0, crypto_1.createHmac)('sha256', macKey).update(dataToMac).digest();\n  return Buffer.concat([dataToMac, mac]);\n}\n\nexports.AES128EncryptAndHMAC = AES128EncryptAndHMAC;\n/**\n * AES-128 CTR decrypt\n * @param {Buffer} encryptionKey\n * @param {Buffer} iv\n * @param {Buffer} ciphertext\n * @returns {Buffer} plaintext\n */\n\nfunction AES128Decrypt(encryptionKey, iv, ciphertext) {\n  var cipher = (0, crypto_1.createDecipheriv)('aes-128-ctr', encryptionKey, iv);\n  var firstChunk = cipher.update(ciphertext);\n  var secondChunk = cipher.final();\n  return Buffer.concat([firstChunk, secondChunk]);\n}\n\nexports.AES128Decrypt = AES128Decrypt;\n/**\n * AES-128 CTR decrypt with message authentication\n * @param {Buffer} encryptionKey\n * @param {Buffer} macKey\n * @param {Buffer} ciphertext\n * @returns {Buffer} plaintext\n */\n\nfunction AES128DecryptAndHMAC(encryptionKey, macKey, ciphertext) {\n  var iv = ciphertext.slice(0, exports.IV_LENGTH);\n  var message = ciphertext.slice(exports.IV_LENGTH, ciphertext.length - 32);\n  var mac = ciphertext.slice(ciphertext.length - 32, ciphertext.length);\n  var dataToMac = Buffer.concat([iv, message]);\n  var computedMac = (0, crypto_1.createHmac)('sha256', macKey).update(dataToMac).digest();\n\n  if (!mac.equals(computedMac)) {\n    throw new Error('MAC mismatch');\n  }\n\n  return AES128Decrypt(encryptionKey, iv, message);\n}\n\nexports.AES128DecryptAndHMAC = AES128DecryptAndHMAC;\n/**\n * ECIES encrypt\n * @param {Buffer} pubKeyTo Ethereum pub key, 64 bytes.\n * @param {Buffer} plaintext Plaintext to be encrypted.\n * @returns {Buffer} Encrypted message, serialized, 113+ bytes\n */\n\nfunction Encrypt(pubKeyTo, plaintext) {\n  var ephemPrivKey = ec.keyFromPrivate((0, crypto_1.randomBytes)(32));\n  var ephemPubKey = ephemPrivKey.getPublic(false, 'hex');\n  var ephemPubKeyEncoded = Buffer.from(ephemPubKey, 'hex');\n  var px = ephemPrivKey.derive(ec.keyFromPublic(Buffer.concat([Buffer.from([0x04]), pubKeyTo])).getPublic());\n  var hash = ConcatKDF(px.toArrayLike(Buffer), 32);\n  var encryptionKey = hash.slice(0, 16);\n  var macKey = (0, crypto_1.createHash)('sha256').update(hash.slice(16)).digest();\n  var message = AES128EncryptAndHMAC(encryptionKey, macKey, plaintext);\n  var serializedCiphertext = Buffer.concat([ephemPubKeyEncoded, message // iv + ciphertext + mac (min 48 bytes)\n  ]);\n  return serializedCiphertext;\n}\n\nexports.Encrypt = Encrypt;\n/**\n * ECIES decrypt\n * @param {Buffer} privKey Ethereum private key, 32 bytes.\n * @param {Buffer} encrypted Encrypted message, serialized, 113+ bytes\n * @returns {Buffer} plaintext\n */\n\nfunction Decrypt(privKey, encrypted) {\n  // Read iv, ephemPubKey, mac, ciphertext from encrypted message\n  var ephemPubKeyEncoded = encrypted.slice(0, 65);\n  var symmetricEncrypted = encrypted.slice(65);\n  var ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();\n  var px = ec.keyFromPrivate(privKey).derive(ephemPubKey);\n  var hash = ConcatKDF(px.toBuffer(), 32); // km, ke\n\n  var encryptionKey = hash.slice(0, 16);\n  var macKey = (0, crypto_1.createHash)('sha256').update(hash.slice(16)).digest();\n  return AES128DecryptAndHMAC(encryptionKey, macKey, symmetricEncrypted);\n}\n\nexports.Decrypt = Decrypt;\nexports.ECIES = {\n  Encrypt: Encrypt,\n  Decrypt: Decrypt,\n  AES128EncryptAndHMAC: AES128EncryptAndHMAC,\n  AES128DecryptAndHMAC: AES128DecryptAndHMAC\n};","map":{"version":3,"mappings":"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","names":["ec","elliptic_1","exports","IncCounter","ctr","i","length","ConcatKDF","px","kdLen","blockSize","reps","counter","Buffer","from","k","hash","update","concat","digest","slice","AES128Encrypt","encryptionKey","iv","plaintext","cipher","firstChunk","secondChunk","final","AES128EncryptAndHMAC","macKey","dataToMac","mac","AES128Decrypt","ciphertext","AES128DecryptAndHMAC","message","computedMac","equals","Error","Encrypt","pubKeyTo","ephemPrivKey","keyFromPrivate","ephemPubKey","getPublic","ephemPubKeyEncoded","derive","keyFromPublic","toArrayLike","serializedCiphertext","Decrypt","privKey","encrypted","symmetricEncrypted","toBuffer"],"sourceRoot":"","sources":["../src/ecies.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}