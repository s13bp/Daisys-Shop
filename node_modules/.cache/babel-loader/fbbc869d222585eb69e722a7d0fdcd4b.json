{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationResponseType = exports.GetAttestationRequestType = exports.AttestationRequestType = exports.AttestationServiceTestRequestType = exports.AttestationServiceStatusResponseType = exports.SaltType = exports.SignatureType = exports.PublicKeyType = exports.AddressType = exports.E164PhoneNumberType = exports.JSONStringType = exports.UrlType = exports.URL_REGEX = exports.isValidUrl = void 0;\n\nvar io_1 = require(\"@celo/base/lib/io\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar Either_1 = require(\"fp-ts/lib/Either\");\n\nvar t = __importStar(require(\"io-ts\"));\n\nvar address_1 = require(\"./address\");\n\nvar phoneNumbers_1 = require(\"./phoneNumbers\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar io_2 = require(\"@celo/base/lib/io\");\n\nObject.defineProperty(exports, \"isValidUrl\", {\n  enumerable: true,\n  get: function () {\n    return io_2.isValidUrl;\n  }\n});\nObject.defineProperty(exports, \"URL_REGEX\", {\n  enumerable: true,\n  get: function () {\n    return io_2.URL_REGEX;\n  }\n});\nexports.UrlType = new t.Type('Url', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return io_1.URL_REGEX.test(stringValue) ? t.success(stringValue) : t.failure(stringValue, context, 'is not a valid url');\n  });\n}, String);\nexports.JSONStringType = new t.Type('JSONString', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    try {\n      JSON.parse(stringValue);\n      return t.success(stringValue);\n    } catch (error) {\n      return t.failure(stringValue, context, 'can not be parsed as JSON');\n    }\n  });\n}, String);\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nexports.E164PhoneNumberType = new t.Type('E164Number', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return (0, phoneNumbers_1.isE164NumberStrict)(stringValue) ? t.success(stringValue) : t.failure(stringValue, context, 'is not a valid e164 number');\n  });\n}, String);\nexports.AddressType = new t.Type('Address', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return (0, address_1.isValidAddress)(stringValue) ? t.success((0, ethereumjs_util_1.toChecksumAddress)(stringValue)) : t.failure(stringValue, context, 'is not a valid address');\n  });\n}, String);\nexports.PublicKeyType = new t.Type('Public Key', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return stringValue.startsWith('0x') && (0, ethereumjs_util_1.isValidPublic)(Buffer.from(stringValue.slice(2), 'hex'), true) ? t.success((0, ethereumjs_util_1.toChecksumAddress)(stringValue)) : t.failure(stringValue, context, 'is not a valid public key');\n  });\n}, String);\nexports.SignatureType = t.string;\nexports.SaltType = t.string;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nexports.AttestationServiceStatusResponseType = t.type({\n  status: t.literal('ok'),\n  smsProviders: t.array(t.string),\n  blacklistedRegionCodes: t.union([t.array(t.string), t.undefined]),\n  accountAddress: exports.AddressType,\n  signature: t.union([exports.SignatureType, t.undefined]),\n  version: t.string,\n  latestBlock: t.number,\n  ageOfLatestBlock: t.number,\n  isNodeSyncing: t.boolean,\n  appSignature: t.string,\n  smsProvidersRandomized: t.boolean,\n  maxDeliveryAttempts: t.number,\n  maxRerequestMins: t.number,\n  twilioVerifySidProvided: t.boolean\n});\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nexports.AttestationServiceTestRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  message: t.string,\n  signature: exports.SignatureType,\n  provider: t.union([t.string, t.undefined])\n});\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nexports.AttestationRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  account: exports.AddressType,\n  issuer: exports.AddressType,\n  // io-ts way of defining optional key-value pair\n  salt: t.union([t.undefined, exports.SaltType]),\n  smsRetrieverAppSig: t.union([t.undefined, t.string]),\n  // if specified, the message sent will be short random number prefixed by this string\n  securityCodePrefix: t.union([t.undefined, t.string]),\n  language: t.union([t.undefined, t.string])\n});\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nexports.GetAttestationRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  account: exports.AddressType,\n  issuer: exports.AddressType,\n  // io-ts way of defining optional key-value pair\n  salt: t.union([t.undefined, exports.SaltType]),\n  // if the value supplied matches the stored security code, the response will include the complete message\n  securityCode: t.union([t.undefined, t.string])\n});\nexports.AttestationResponseType = t.type({\n  // Always returned in 1.0.x\n  success: t.boolean,\n  // Returned for errors in 1.0.x\n  error: t.union([t.undefined, t.string]),\n  // Stringifyed JSON dict of dicts, mapping attempt to error info.\n  errors: t.union([t.undefined, t.string]),\n  // Returned for successful send in 1.0.x\n  provider: t.union([t.undefined, t.string]),\n  // New fields\n  identifier: t.union([t.undefined, t.string]),\n  account: t.union([t.undefined, exports.AddressType]),\n  issuer: t.union([t.undefined, exports.AddressType]),\n  status: t.union([t.undefined, t.string]),\n  attempt: t.union([t.undefined, t.number]),\n  countryCode: t.union([t.undefined, t.string]),\n  // Time to receive eventual delivery/failure (inc retries)\n  duration: t.union([t.undefined, t.number]),\n  // Only used by test endpoint to return randomly generated salt.\n  // Never return a user-supplied salt.\n  salt: t.union([t.undefined, t.string]),\n  // only returned if the request supplied the correct security code\n  attestationCode: t.union([t.undefined, t.string])\n});","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","exports","t","Type","string","is","input","context","chain","validate","stringValue","test","success","failure","String","JSON","parse","error","startsWith","Buffer","from","slice","type","status","literal","smsProviders","array","blacklistedRegionCodes","union","undefined","accountAddress","signature","version","latestBlock","number","ageOfLatestBlock","isNodeSyncing","boolean","appSignature","smsProvidersRandomized","maxDeliveryAttempts","maxRerequestMins","twilioVerifySidProvided","phoneNumber","message","provider","account","issuer","salt","smsRetrieverAppSig","securityCodePrefix","language","securityCode","errors","identifier","attempt","countryCode","duration","attestationCode"],"sourceRoot":"","sources":["../src/io.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}