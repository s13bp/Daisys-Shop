{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsWrapper = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar fixidity_1 = require(\"@celo/utils/lib/fixidity\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n// TODO(asa): Support validator signers\n\n\nvar ValidatorsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ValidatorsWrapper, _super);\n\n  function ValidatorsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Queues an update to a validator group's commission.\n     * @param commission Fixidity representation of the commission this group receives on epoch\n     *   payments made to its members. Must be in the range [0, 1.0].\n     */\n\n\n    _this.setNextCommissionUpdate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setNextCommissionUpdate, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToFixidityString));\n    /**\n     * Updates a validator group's commission based on the previously queued update\n     */\n\n    _this.updateCommission = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateCommission);\n    /**\n     * Returns the Locked Gold requirements for specific account.\n     * @returns The Locked Gold requirements for a specific account.\n     */\n\n    _this.getAccountLockedGoldRequirement = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountLockedGoldRequirement, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the reset period, in seconds, for slashing multiplier.\n     */\n\n    _this.getSlashingMultiplierResetPeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashingMultiplierResetPeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the update delay, in blocks, for the group commission.\n     */\n\n    _this.getCommissionUpdateDelay = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.commissionUpdateDelay, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the validator downtime grace period\n     */\n\n    _this.getDowntimeGracePeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.downtimeGracePeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Updates a validator's BLS key.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     * @return True upon success.\n     */\n\n    _this.updateBlsPublicKey = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateBlsPublicKey, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    /**\n     * Returns whether a particular account has a registered validator.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator.\n     */\n\n    _this.isValidator = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidator);\n    /**\n     * Returns whether a particular account has a registered validator group.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator group.\n     */\n\n    _this.isValidatorGroup = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidatorGroup);\n    /**\n     * Returns whether an account meets the requirements to register a validator.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a validator.\n     */\n\n    _this.meetsValidatorBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.kit.contracts.getLockedGold()];\n\n            case 1:\n              lockedGold = _a.sent();\n              return [4\n              /*yield*/\n              , lockedGold.getAccountTotalLockedGold(address)];\n\n            case 2:\n              total = _a.sent();\n              return [4\n              /*yield*/\n              , this.getValidatorLockedGoldRequirements()];\n\n            case 3:\n              reqs = _a.sent();\n              return [2\n              /*return*/\n              , reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns whether an account meets the requirements to register a group.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a group.\n     */\n\n\n    _this.meetsValidatorGroupBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.kit.contracts.getLockedGold()];\n\n            case 1:\n              lockedGold = _a.sent();\n              return [4\n              /*yield*/\n              , lockedGold.getAccountTotalLockedGold(address)];\n\n            case 2:\n              total = _a.sent();\n              return [4\n              /*yield*/\n              , this.getGroupLockedGoldRequirements()];\n\n            case 3:\n              reqs = _a.sent();\n              return [2\n              /*return*/\n              , reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n\n\n    _this.getValidatorMembershipHistory = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return (0, collections_1.zip)(function (epoch, group) {\n        return {\n          epoch: (0, BaseWrapper_1.valueToInt)(epoch),\n          group: group\n        };\n      }, res[0], res[1]);\n    });\n    /**\n     * Returns extra data from the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n\n    _this.getValidatorMembershipHistoryExtraData = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return {\n        lastRemovedFromGroupTimestamp: (0, BaseWrapper_1.valueToInt)(res[2]),\n        tail: (0, BaseWrapper_1.valueToInt)(res[3])\n      };\n    });\n    /** Get the size (amount of members) of a ValidatorGroup */\n\n    _this.getValidatorGroupSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupNumMembers, undefined, BaseWrapper_1.valueToInt);\n    /** Get list of registered validator group addresses */\n\n    _this.getRegisteredValidatorGroupsAddresses = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getRegisteredValidatorGroups);\n    /**\n     * Registers a validator unaffiliated with any validator group.\n     *\n     * Fails if the account is already a validator or validator group.\n     *\n     * @param validatorAddress The address that the validator is using for consensus, should match\n     *   the validator signer.\n     * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus. 64 bytes.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     */\n\n    _this.getEpochNumber = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochNumber, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.getEpochSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochSize, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.registerValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.registerValidator, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    /**\n     * Affiliates a validator with a group, allowing it to be added as a member.\n     * De-affiliates with the previously affiliated group if present.\n     * @param group The validator group with which to affiliate.\n     */\n\n    _this.affiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.affiliate);\n    /**\n     * De-affiliates a validator, removing it from the group for which it is a member.\n     * Fails if the account is not a validator with non-zero affiliation.\n     */\n\n    _this.deaffiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.deaffiliate);\n    /**\n     * Removes a validator from the group for which it is a member.\n     * @param validatorAccount The validator to deaffiliate from their affiliated validator group.\n     */\n\n    _this.forceDeaffiliateIfValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.forceDeaffiliateIfValidator);\n    /**\n     * Resets a group's slashing multiplier if it has been >= the reset period since\n     * the last time the group was slashed.\n     */\n\n    _this.resetSlashingMultiplier = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.resetSlashingMultiplier);\n    /**\n     * Removes a member from a ValidatorGroup\n     * The ValidatorGroup is specified by the `from` of the tx.\n     *\n     * @param validator The Validator to remove from the group\n     */\n\n    _this.removeMember = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.removeMember);\n    return _this;\n  }\n  /**\n   * Returns the Locked Gold requirements for validators.\n   * @returns The Locked Gold requirements for validators.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidatorLockedGoldRequirements().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the Locked Gold requirements for validator groups.\n   * @returns The Locked Gold requirements for validator groups.\n   */\n\n\n  ValidatorsWrapper.prototype.getGroupLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupLockedGoldRequirements().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n\n\n  ValidatorsWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.getValidatorLockedGoldRequirements(), this.getGroupLockedGoldRequirements(), this.contract.methods.maxGroupSize().call(), this.contract.methods.membershipHistoryLength().call(), this.getSlashingMultiplierResetPeriod(), this.getCommissionUpdateDelay(), this.getDowntimeGracePeriod()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              validatorLockedGoldRequirements: res[0],\n              groupLockedGoldRequirements: res[1],\n              maxGroupSize: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n              membershipHistoryLength: (0, BaseWrapper_1.valueToBigNumber)(res[3]),\n              slashingMultiplierResetPeriod: res[4],\n              commissionUpdateDelay: res[5],\n              downtimeGracePeriod: res[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the validators contract\n   * @return ValidatorsConfig object\n   */\n\n\n  ValidatorsWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, validatorLockedGoldRequirements, groupLockedGoldRequirements;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            validatorLockedGoldRequirements = __assign(__assign({}, config.validatorLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.validatorLockedGoldRequirements.duration)\n            });\n            groupLockedGoldRequirements = __assign(__assign({}, config.groupLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.groupLockedGoldRequirements.duration)\n            });\n            return [2\n            /*return*/\n            , __assign(__assign({}, config), {\n              slashingMultiplierResetPeriod: (0, BaseWrapper_1.secondsToDurationString)(config.slashingMultiplierResetPeriod),\n              commissionUpdateDelay: (0, BaseWrapper_1.blocksToDurationString)(config.commissionUpdateDelay),\n              validatorLockedGoldRequirements: validatorLockedGoldRequirements,\n              groupLockedGoldRequirements: groupLockedGoldRequirements\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of an account or currently authorized validator signer.\n   * @dev Fails if the `signer` is not an account or currently authorized validator.\n   * @return The associated account.\n   */\n\n\n  ValidatorsWrapper.prototype.validatorSignerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [2\n            /*return*/\n            , accounts.validatorSignerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of the account or previously authorized signer.\n   * @dev Fails if the `signer` is not an account or previously authorized signer.\n   * @return The associated account.\n   */\n\n\n  ValidatorsWrapper.prototype.signerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [2\n            /*return*/\n            , accounts.signerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /** Get Validator information */\n\n\n  ValidatorsWrapper.prototype.getValidator = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidator(address).call({}, blockNumber)];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 2:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address, blockNumber)];\n\n          case 3:\n            name = _a.sent() || '';\n            return [2\n            /*return*/\n            , {\n              name: name,\n              address: address,\n              ecdsaPublicKey: res.ecdsaPublicKey,\n              blsPublicKey: res.blsPublicKey,\n              affiliation: res.affiliation,\n              score: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res.score)),\n              signer: res.signer\n            }];\n        }\n      });\n    });\n  };\n\n  ValidatorsWrapper.prototype.getValidatorFromSigner = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.signerToAccount(address)];\n\n          case 1:\n            account = _b.sent();\n            _a = (0, address_1.eqAddress)(account, address_1.NULL_ADDRESS);\n            if (_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isValidator(account)];\n\n          case 2:\n            _a = !_b.sent();\n            _b.label = 3;\n\n          case 3:\n            if (_a) {\n              return [2\n              /*return*/\n              , {\n                name: 'Unregistered validator',\n                address: address,\n                ecdsaPublicKey: '',\n                blsPublicKey: '',\n                affiliation: '',\n                score: new bignumber_js_1.default(0),\n                signer: address\n              }];\n            } else {\n              return [2\n              /*return*/\n              , this.getValidator(account, blockNumber)];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** Get ValidatorGroup information */\n\n\n  ValidatorsWrapper.prototype.getValidatorGroup = function (address, getAffiliates, blockNumber) {\n    if (getAffiliates === void 0) {\n      getAffiliates = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name, affiliates, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidatorGroup(address).call({}, blockNumber)];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 2:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address, blockNumber)];\n\n          case 3:\n            name = _a.sent() || '';\n            affiliates = [];\n            if (!getAffiliates) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getRegisteredValidators(blockNumber)];\n\n          case 4:\n            validators = _a.sent();\n            affiliates = validators.filter(function (v) {\n              return v.affiliation && (0, address_1.eqAddress)(v.affiliation, address);\n            }).filter(function (v) {\n              return !res[0].includes(v.address);\n            });\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              name: name,\n              address: address,\n              members: Array.from(res[0]),\n              commission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[1])),\n              nextCommission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[2])),\n              nextCommissionBlock: new bignumber_js_1.default(res[3]),\n              membersUpdated: res[4].reduce(function (a, b) {\n                return Math.max(a, new bignumber_js_1.default(b).toNumber());\n              }, 0),\n              affiliates: affiliates.map(function (v) {\n                return v.address;\n              }),\n              slashingMultiplier: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[5])),\n              lastSlashed: (0, BaseWrapper_1.valueToBigNumber)(res[6])\n            }];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator addresses */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidatorsAddresses = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2\n        /*return*/\n        , this.contract.methods.getRegisteredValidators().call({}, blockNumber)];\n      });\n    });\n  };\n  /** Get list of registered validators */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidators = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorsAddresses(blockNumber)];\n\n          case 1:\n            vgAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidator(addr, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator groups */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidatorGroups = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorGroupsAddresses()];\n\n          case 1:\n            vgAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidatorGroup(addr, false);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * De-registers a validator, removing it from the group for which it is a member.\n   * @param validatorAddress Address of the validator to deregister\n   */\n\n\n  ValidatorsWrapper.prototype.deregisterValidator = function (validatorAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allValidators, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorsAddresses()];\n\n          case 1:\n            allValidators = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorAddress, allValidators);\n\n            if (idx < 0) {\n              throw new Error(validatorAddress + \" is not a registered validator\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidator(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Registers a validator group with no member validators.\n   * Fails if the account is already a validator or validator group.\n   * Fails if the account does not have sufficient weight.\n   *\n   * @param commission the commission this group receives on epoch payments made to its members.\n   */\n\n\n  ValidatorsWrapper.prototype.registerValidatorGroup = function (commission) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.registerValidatorGroup((0, fixidity_1.toFixed)(commission).toFixed()))];\n      });\n    });\n  };\n  /**\n   * De-registers a validator Group\n   * @param validatorGroupAddress Address of the validator group to deregister\n   */\n\n\n  ValidatorsWrapper.prototype.deregisterValidatorGroup = function (validatorGroupAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allGroups, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorGroupsAddresses()];\n\n          case 1:\n            allGroups = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorGroupAddress, allGroups);\n\n            if (idx < 0) {\n              throw new Error(validatorGroupAddress + \" is not a registered validator\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidatorGroup(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Adds a member to the end of a validator group's list of members.\n   * Fails if `validator` has not set their affiliation to this account.\n   * @param validator The validator to add to the group\n   */\n\n\n  ValidatorsWrapper.prototype.addMember = function (group, validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numMembers, election, voteWeight, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getValidatorGroupSize(group)];\n\n          case 1:\n            numMembers = _b.sent();\n            if (!(numMembers === 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.kit.contracts.getElection()];\n\n          case 2:\n            election = _b.sent();\n            return [4\n            /*yield*/\n            , election.getTotalVotesForGroup(group)];\n\n          case 3:\n            voteWeight = _b.sent();\n            return [4\n            /*yield*/\n            , election.findLesserAndGreaterAfterVote(group, voteWeight)];\n\n          case 4:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addFirstMember(validator, lesser, greater))];\n\n          case 5:\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addMember(validator))];\n        }\n      });\n    });\n  };\n  /**\n   * Reorders a member within a validator group.\n   * Fails if `validator` is not a member of the account's validator group.\n   * @param groupAddr The validator group\n   * @param validator The validator to reorder.\n   * @param newIndex New position for the validator\n   */\n\n\n  ValidatorsWrapper.prototype.reorderMember = function (groupAddr, validator, newIndex) {\n    return __awaiter(this, void 0, void 0, function () {\n      var group, currentIdx, nextMember, prevMember;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getValidatorGroup(groupAddr)];\n\n          case 1:\n            group = _a.sent();\n\n            if (newIndex < 0 || newIndex >= group.members.length) {\n              throw new Error(\"Invalid index \" + newIndex + \"; max index is \" + (group.members.length - 1));\n            }\n\n            currentIdx = (0, address_1.findAddressIndex)(validator, group.members);\n\n            if (currentIdx < 0) {\n              throw new Error(\"ValidatorGroup \" + groupAddr + \" does not include \" + validator);\n            } else if (currentIdx === newIndex) {\n              throw new Error(\"Validator is already in position \" + newIndex);\n            } // remove the element\n\n\n            group.members.splice(currentIdx, 1); // add it on new position\n\n            group.members.splice(newIndex, 0, validator);\n            nextMember = newIndex === group.members.length - 1 ? address_1.NULL_ADDRESS : group.members[newIndex + 1];\n            prevMember = newIndex === 0 ? address_1.NULL_ADDRESS : group.members[newIndex - 1];\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.reorderMember(validator, nextMember, prevMember))];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves ValidatorRewards for epochNumber.\n   * @param epochNumber The epoch to retrieve ValidatorRewards at.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorRewards = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, events, validator, validatorGroup;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPastEvents('ValidatorEpochPaymentDistributed', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n\n          case 2:\n            events = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidator(e.returnValues.validator);\n            })];\n\n          case 3:\n            validator = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidatorGroup(e.returnValues.group, false);\n            })];\n\n          case 4:\n            validatorGroup = _a.sent();\n            return [2\n            /*return*/\n            , events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                validator: validator[index],\n                validatorPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.validatorPayment),\n                group: validatorGroup[index],\n                groupPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.groupPayment)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer addresses\n   */\n\n\n  ValidatorsWrapper.prototype.currentSignerSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var n, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = BaseWrapper_1.valueToInt;\n            return [4\n            /*yield*/\n            , this.contract.methods.numberValidatorsInCurrentSet().call()];\n\n          case 1:\n            n = _a.apply(void 0, [_b.sent()]);\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(5, (0, collections_1.zeroRange)(n), function (idx) {\n              return _this.contract.methods.validatorSignerAddressFromCurrentSet(idx).call();\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer and account addresses\n   */\n\n\n  ValidatorsWrapper.prototype.currentValidatorAccountsSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var signerAddresses, accountAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.currentSignerSet()];\n\n          case 1:\n            signerAddresses = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, signerAddresses, function (signer) {\n              return _this.validatorSignerToAccount(signer);\n            })];\n\n          case 2:\n            accountAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, collections_1.zip)(function (signer, account) {\n              return {\n                signer: signer,\n                account: account\n              };\n            }, signerAddresses, accountAddresses)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the group membership for validator account.\n   * @param account Address of validator account to retrieve group membership for.\n   * @param blockNumber Block number to retrieve group membership at.\n   * @return Group and membership history index for `validator`.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorMembershipHistoryIndex = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockEpoch, _a, _b, _c, membershipHistory, historyIndex, group;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _b = (_a = this.kit).getEpochNumberOfBlock;\n            _c = blockNumber;\n            if (_c) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.kit.connection.getBlockNumber()];\n\n          case 1:\n            _c = _d.sent();\n            _d.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , _b.apply(_a, [_c])];\n\n          case 3:\n            blockEpoch = _d.sent();\n            return [4\n            /*yield*/\n            , this.getValidatorMembershipHistory(account)];\n\n          case 4:\n            membershipHistory = _d.sent();\n            historyIndex = this.findValidatorMembershipHistoryIndex(blockEpoch, membershipHistory);\n            group = membershipHistory[historyIndex].group;\n            return [2\n            /*return*/\n            , {\n              group: group,\n              historyIndex: historyIndex\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the index into `history` for `epoch`.\n   * @param epoch The needle.\n   * @param history The haystack.\n   * @return Index for epoch or -1.\n   */\n\n\n  ValidatorsWrapper.prototype.findValidatorMembershipHistoryIndex = function (epoch, history) {\n    var revIndex = history.slice().reverse().findIndex(function (x) {\n      return x.epoch <= epoch;\n    });\n    return revIndex < 0 ? -1 : history.length - revIndex - 1;\n  };\n\n  return ValidatorsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.ValidatorsWrapper = ValidatorsWrapper;","map":{"version":3,"mappings":"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","names":["__extends","_this","kit","contract","methods","setNextCommissionUpdate","BaseWrapper_1","updateCommission","getAccountLockedGoldRequirement","undefined","slashingMultiplierResetPeriod","commissionUpdateDelay","downtimeGracePeriod","updateBlsPublicKey","isValidator","isValidatorGroup","address","contracts","getLockedGold","lockedGold","_a","getAccountTotalLockedGold","total","getValidatorLockedGoldRequirements","reqs","value","lte","getGroupLockedGoldRequirements","getMembershipHistory","res","epoch","group","lastRemovedFromGroupTimestamp","tail","getGroupNumMembers","getRegisteredValidatorGroups","getEpochNumber","getEpochSize","registerValidator","affiliate","deaffiliate","forceDeaffiliateIfValidator","resetSlashingMultiplier","removeMember","ValidatorsWrapper","call","duration","Promise","all","maxGroupSize","membershipHistoryLength","getSlashingMultiplierResetPeriod","getCommissionUpdateDelay","getDowntimeGracePeriod","validatorLockedGoldRequirements","groupLockedGoldRequirements","getConfig","config","signerAddress","getAccounts","accounts","validatorSignerToAccount","signerToAccount","blockNumber","getValidator","getName","name","ecdsaPublicKey","blsPublicKey","affiliation","score","bignumber_js_1","signer","account","_b","address_1","getAffiliates","getValidatorGroup","affiliates","getRegisteredValidators","validators","filter","v","includes","members","Array","from","commission","nextCommission","nextCommissionBlock","membersUpdated","reduce","a","b","max","toNumber","map","slashingMultiplier","lastSlashed","getRegisteredValidatorsAddresses","vgAddresses","addr","getRegisteredValidatorGroupsAddresses","validatorAddress","allValidators","idx","Error","connection","deregisterValidator","registerValidatorGroup","toFixed","validatorGroupAddress","allGroups","deregisterValidatorGroup","validator","getValidatorGroupSize","numMembers","getElection","election","getTotalVotesForGroup","voteWeight","findLesserAndGreaterAfterVote","lesser","greater","addFirstMember","addMember","groupAddr","newIndex","length","currentIdx","splice","nextMember","prevMember","reorderMember","epochNumber","getLastBlockNumberForEpoch","getPastEvents","fromBlock","toBlock","events","e","returnValues","validatorGroup","index","validatorPayment","groupPayment","numberValidatorsInCurrentSet","n","validatorSignerAddressFromCurrentSet","currentSignerSet","signerAddresses","accountAddresses","getEpochNumberOfBlock","_c","getBlockNumber","_d","blockEpoch","getValidatorMembershipHistory","membershipHistory","historyIndex","findValidatorMembershipHistoryIndex","history","revIndex","slice","reverse","findIndex","x","exports"],"sourceRoot":"","sources":["../../src/wrappers/Validators.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}