{"ast":null,"code":"import _asyncToGenerator from \"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/crypto/Daisys/node_modules/@babel/runtime/regenerator/index.js\";\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nvar ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport function requestLedgerDevice() {\n  return _requestLedgerDevice.apply(this, arguments);\n}\n\nfunction _requestLedgerDevice() {\n  _requestLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var device;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return navigator.usb.requestDevice({\n              filters: ledgerDevices\n            });\n\n          case 2:\n            device = _context.sent;\n            return _context.abrupt(\"return\", device);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestLedgerDevice.apply(this, arguments);\n}\n\nexport function getLedgerDevices() {\n  return _getLedgerDevices.apply(this, arguments);\n}\n\nfunction _getLedgerDevices() {\n  _getLedgerDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var devices;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return navigator.usb.getDevices();\n\n          case 2:\n            devices = _context2.sent;\n            return _context2.abrupt(\"return\", devices.filter(function (d) {\n              return d.vendorId === ledgerUSBVendorId;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getLedgerDevices.apply(this, arguments);\n}\n\nexport function getFirstLedgerDevice() {\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\n\nfunction _getFirstLedgerDevice() {\n  _getFirstLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var existingDevices;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getLedgerDevices();\n\n          case 2:\n            existingDevices = _context3.sent;\n\n            if (!(existingDevices.length > 0)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", existingDevices[0]);\n\n          case 5:\n            return _context3.abrupt(\"return\", requestLedgerDevice());\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\n\nexport var isSupported = function isSupported() {\n  return Promise.resolve(!!navigator && // $FlowFixMe\n  !!navigator.usb && typeof navigator.usb.getDevices === \"function\");\n};","map":{"version":3,"mappings":";;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,IAAMC,aAAa,GAAG,CAAC;AAAEC,UAAQ,EAAEF;AAAZ,CAAD,CAAtB;AAEA,gBAAsBG,mBAAtB;AAAA;AAAA;;;kFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgBC,SAAS,CAACC,GAAVD,CAAcE,aAAdF,CAA4B;AAAEG,qBAAO,EAAEN;AAAX,aAA5BG,CAFhB;;AAAA;AAECI,kBAFD;AAAA,6CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEiBL,SAAS,CAACC,GAAVD,CAAcM,UAAdN,EAFjB;;AAAA;AAECO,mBAFD;AAAA,8CAGEA,OAAO,CAACC,MAARD,CAAgBE,WAAD;AAAA,qBAAOA,CAAC,CAACX,QAAFW,KAAeb,iBAAtB;AAAA,aAAfW,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBG,oBAAtB;AAAA;AAAA;;;mFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBL,gBAAgB,EADzC;;AAAA;AACCM,2BADD;;AAAA,kBAEDA,eAAe,CAACC,MAAhBD,GAAyB,CAFxB;AAAA;AAAA;AAAA;;AAAA,8CAEkCA,eAAe,CAAC,CAAD,CAFjD;;AAAA;AAAA,8CAGEZ,mBAAmB,EAHrB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,OAAO,IAAMc,WAAW,GAAG,SAAdA,WAAc;AAAA,SACzBC,OAAO,CAACC,OAARD,CACE,CAAC,CAACd,SAAF,IACE;AACA,GAAC,CAACA,SAAS,CAACC,GAFd,IAGE,OAAOD,SAAS,CAACC,GAAVD,CAAcM,UAArB,KAAoC,UAJxCQ,CADyB;AAAA,CAApB","names":["ledgerUSBVendorId","ledgerDevices","vendorId","requestLedgerDevice","navigator","usb","requestDevice","filters","device","getLedgerDevices","getDevices","devices","filter","d","getFirstLedgerDevice","existingDevices","length","isSupported","Promise","resolve"],"sources":["../src/webusb.js"],"sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}