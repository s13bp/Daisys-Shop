{"ast":null,"code":"import { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nconst ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport async function requestLedgerDevice() {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({\n    filters: ledgerDevices\n  });\n  return device;\n}\nexport async function getLedgerDevices() {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter(d => d.vendorId === ledgerUSBVendorId);\n}\nexport async function getFirstLedgerDevice() {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\nexport const isSupported = () => Promise.resolve(!!navigator && // $FlowFixMe\n!!navigator.usb && typeof navigator.usb.getDevices === \"function\");","map":{"version":3,"mappings":"AACA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,UAAQ,EAAEF;AAAZ,CAAD,CAAtB;AAEA,OAAO,eAAeG,mBAAf,GAAyD;AAC9D;AACA,QAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,GAAVD,CAAcE,aAAdF,CAA4B;AAAEG,WAAO,EAAEP;AAAX,GAA5BI,CAArB;AACA,SAAOD,MAAP;AACD;AAED,OAAO,eAAeK,gBAAf,GAAwD;AAC7D;AACA,QAAMC,OAAO,GAAG,MAAML,SAAS,CAACC,GAAVD,CAAcM,UAAdN,EAAtB;AACA,SAAOK,OAAO,CAACE,MAARF,CAAgBG,CAAD,IAAOA,CAAC,CAACX,QAAFW,KAAeb,iBAArCU,CAAP;AACD;AAED,OAAO,eAAeI,oBAAf,GAA0D;AAC/D,QAAMC,eAAe,GAAG,MAAMN,gBAAgB,EAA9C;AACA,MAAIM,eAAe,CAACC,MAAhBD,GAAyB,CAA7B,EAAgC,OAAOA,eAAe,CAAC,CAAD,CAAtB;AAChC,SAAOZ,mBAAmB,EAA1B;AACD;AAED,OAAO,MAAMc,WAAW,GAAG,MACzBC,OAAO,CAACC,OAARD,CACE,CAAC,CAACb,SAAF,IACE;AACA,CAAC,CAACA,SAAS,CAACC,GAFd,IAGE,OAAOD,SAAS,CAACC,GAAVD,CAAcM,UAArB,KAAoC,UAJxCO,CADK","names":["ledgerUSBVendorId","ledgerDevices","vendorId","requestLedgerDevice","device","navigator","usb","requestDevice","filters","getLedgerDevices","devices","getDevices","filter","d","getFirstLedgerDevice","existingDevices","length","isSupported","Promise","resolve"],"sources":["../src/webusb.js"],"sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}