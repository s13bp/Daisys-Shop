{"ast":null,"code":"var _jsxFileName = \"/Users/crypto/GETSCHWIFTY/src/pages/item/Item.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './item.css';\nimport creator from '../../assets/seller2.png';\nimport item from '../../assets/item1.png';\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { useParams } from \"react-router\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useMarketContract } from \"../../hooks/useMarketContract\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Item = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const marketplace = useMarketContract();\n  const [nftData, setNftData] = useState({});\n  const {\n    address,\n    performActions\n  } = useContractKit();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (marketplace) fetchNft();\n  }, [marketplace]);\n\n  const fetchNft = async () => {\n    const tokenUri = await marketplace.methods.tokenURI(id).call();\n    const meta = await axios.get(tokenUri);\n    setNftData(meta.data);\n  };\n\n  const purchaseNft = async () => {\n    try {\n      await performActions(async kit => {\n        const {\n          defaultAccount\n        } = kit;\n        /* user will be prompted to pay the asking proces to complete the transaction */\n\n        const price = ethers.utils.parseUnits(nftData.price, 'ether').toString();\n        console.log({\n          price\n        });\n        const transaction = await marketplace.methods.createMarketSale(id).send({\n          from: defaultAccount,\n          value: price\n        });\n        alert(`You have successfully purchased this NFT!`);\n        navigate(`/profile`);\n      });\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item section__padding\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: nftData.image,\n        alt: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: nftData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Costs \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [nftData.price, \" CUSD\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 30\n          }, this), \" .\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-creator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Creater\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [nftData.owner || \"Anonymous\", \"  \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-detail\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: nftData.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-buy\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: purchaseNft,\n          children: [\"Buy For \", nftData.price, \" CUSD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Item, \"Y8sFq9jtBXlZNR4yJf9dWqy7Ilo=\", false, function () {\n  return [useParams, useMarketContract, useContractKit, useNavigate];\n});\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/crypto/GETSCHWIFTY/src/pages/item/Item.jsx"],"names":["React","useEffect","useState","creator","item","axios","ethers","useParams","useContractKit","useMarketContract","useNavigate","Item","id","marketplace","nftData","setNftData","address","performActions","navigate","fetchNft","tokenUri","methods","tokenURI","call","meta","get","data","purchaseNft","kit","defaultAccount","price","utils","parseUnits","toString","console","log","transaction","createMarketSale","send","from","value","alert","error","image","name","owner","description"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './item.css'\nimport creator from '../../assets/seller2.png'\nimport item from '../../assets/item1.png'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst Item = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace ) fetchNft()\n    }, [marketplace]);\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        const meta = await axios.get(tokenUri)\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n        await performActions(async (kit) => {\n            const { defaultAccount } = kit;\n            /* user will be prompted to pay the asking proces to complete the transaction */\n            const price =( ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            console.log({price})\n            const transaction = await marketplace.methods.createMarketSale(id).send({\n                from: defaultAccount,\n                value: price\n            })\n            alert(`You have successfully purchased this NFT!`)\n            navigate(`/profile`)\n        })\n        } catch (error) {\n            console.log({ error });\n        }\n\n\n    }\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>{nftData.name}</h1>\n                    <p>Costs <span>{nftData.price} CUSD</span> .</p>\n                </div>\n                <div className=\"item-content-creator\">\n                    <div><p>Creater</p></div>\n                    <div>\n                        \n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    <p>{nftData.description}</p>\n                </div>\n\n\n                <div className=\"item-content-buy\">\n                    <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                    {/*<button className=\"secondary-btn\">Make Offer</button>*/}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Item;\n"]},"metadata":{},"sourceType":"module"}