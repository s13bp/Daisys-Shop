{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar rlp = __importStar(require(\"rlp\")); // This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\n\n\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\n\nfunction bigNumberFromBuffer(data) {\n  return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\n\nfunction sealFromBuffers(data) {\n  return {\n    bitmap: bigNumberFromBuffer(data[0]),\n    signature: '0x' + data[1].toString('hex'),\n    round: bigNumberFromBuffer(data[2])\n  };\n} // Parse RLP encoded block extra data into an IstanbulExtra object.\n\n\nfunction parseBlockExtraData(data) {\n  var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n  var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n  return {\n    addedValidators: decode[0].map(function (addr) {\n      return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex'));\n    }),\n    addedValidatorsPublicKeys: decode[1].map(function (key) {\n      return '0x' + key.toString('hex');\n    }),\n    removedValidators: bigNumberFromBuffer(decode[2]),\n    seal: '0x' + decode[3].toString('hex'),\n    aggregatedSeal: sealFromBuffers(decode[4]),\n    parentAggregatedSeal: sealFromBuffers(decode[5])\n  };\n}\n\nexports.parseBlockExtraData = parseBlockExtraData;\n\nfunction bitIsSet(bitmap, index) {\n  if (index < 0) {\n    throw new Error(\"bit index must be greater than zero: got \" + index);\n  }\n\n  return bitmap.idiv('1' + '0'.repeat(index), 2).mod(2).gt(0);\n}\n\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n  parseBlockExtraData: parseBlockExtraData,\n  bitIsSet: bitIsSet\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,uC,CAGA;AACA;;;AAEA,IAAMA,2BAA2B,GAAG,EAApC;;AAqBA,SAASC,mBAAT,CAA6BC,IAA7B,EAAyC;AACvC,SAAO,IAAIC,sBAAJ,CAAc,QAAQD,IAAI,CAACE,QAAL,CAAc,KAAd,KAAwB,GAAhC,CAAd,EAAoD,EAApD,CAAP;AACD;;AAED,SAASC,eAAT,CAAyBH,IAAzB,EAAuC;AACrC,SAAO;AACLI,UAAM,EAAEL,mBAAmB,CAACC,IAAI,CAAC,CAAD,CAAL,CADtB;AAELK,aAAS,EAAE,OAAOL,IAAI,CAAC,CAAD,CAAJ,CAAQE,QAAR,CAAiB,KAAjB,CAFb;AAGLI,SAAK,EAAEP,mBAAmB,CAACC,IAAI,CAAC,CAAD,CAAL;AAHrB,GAAP;AAKD,C,CAED;;;AACA,SAAgBO,mBAAhB,CAAoCP,IAApC,EAAgD;AAC9C,MAAMQ,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYV,IAAI,CAACW,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAZ,EAAqC,KAArC,CAAf;AACA,MAAMC,MAAM,GAAQC,GAAG,CAACD,MAAJ,CAAW,OAAOJ,MAAM,CAACM,KAAP,CAAahB,2BAAb,EAA0CI,QAA1C,CAAmD,KAAnD,CAAlB,CAApB;AACA,SAAO;AACLa,mBAAe,EAAEH,MAAM,CAAC,CAAD,CAAN,CAAUI,GAAV,CAAc,UAACC,IAAD,EAAa;AAAK,sDAAkBA,IAAI,CAACf,QAAL,CAAc,KAAd,CAAlB;AAAuC,KAAvE,CADZ;AAELgB,6BAAyB,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUI,GAAV,CAAc,UAACG,GAAD,EAAY;AAAK,oBAAOA,GAAG,CAACjB,QAAJ,CAAa,KAAb,CAAP;AAA0B,KAAzD,CAFtB;AAGLkB,qBAAiB,EAAErB,mBAAmB,CAACa,MAAM,CAAC,CAAD,CAAP,CAHjC;AAILS,QAAI,EAAE,OAAOT,MAAM,CAAC,CAAD,CAAN,CAAUV,QAAV,CAAmB,KAAnB,CAJR;AAKLoB,kBAAc,EAAEnB,eAAe,CAACS,MAAM,CAAC,CAAD,CAAP,CAL1B;AAMLW,wBAAoB,EAAEpB,eAAe,CAACS,MAAM,CAAC,CAAD,CAAP;AANhC,GAAP;AAQD;;AAXDY;;AAaA,SAAgBC,QAAhB,CAAyBrB,MAAzB,EAAyCsB,KAAzC,EAAsD;AACpD,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIC,KAAJ,CAAU,8CAA4CD,KAAtD,CAAN;AACD;;AACD,SAAOtB,MAAM,CACVwB,IADI,CACC,MAAM,IAAIC,MAAJ,CAAWH,KAAX,CADP,EAC0B,CAD1B,EAEJI,GAFI,CAEA,CAFA,EAGJC,EAHI,CAGD,CAHC,CAAP;AAID;;AARDP;AAUaA,wBAAgB;AAC3BjB,qBAAmB,qBADQ;AAE3BkB,UAAQ;AAFmB,CAAhB","names":["ISTANBUL_EXTRA_VANITY_BYTES","bigNumberFromBuffer","data","bignumber_js_1","toString","sealFromBuffers","bitmap","signature","round","parseBlockExtraData","buffer","Buffer","from","replace","decode","rlp","slice","addedValidators","map","addr","addedValidatorsPublicKeys","key","removedValidators","seal","aggregatedSeal","parentAggregatedSeal","exports","bitIsSet","index","Error","idiv","repeat","mod","gt"],"sourceRoot":"","sources":["../src/istanbul.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}