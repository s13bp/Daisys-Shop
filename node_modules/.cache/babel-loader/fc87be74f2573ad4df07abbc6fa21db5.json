{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SINGULAR_CLAIM_TYPES = exports.VALIDATABLE_CLAIM_TYPES = exports.VERIFIABLE_CLAIM_TYPES = exports.ClaimTypes = exports.now = exports.TimestampType = exports.SignatureType = void 0;\n\nvar t = __importStar(require(\"io-ts\"));\n\nexports.SignatureType = t.string;\nexports.TimestampType = t.number;\n\nvar now = function () {\n  return Math.round(new Date().getTime() / 1000);\n};\n\nexports.now = now;\nvar ClaimTypes;\n\n(function (ClaimTypes) {\n  ClaimTypes[\"ATTESTATION_SERVICE_URL\"] = \"ATTESTATION_SERVICE_URL\";\n  ClaimTypes[\"ACCOUNT\"] = \"ACCOUNT\";\n  ClaimTypes[\"DOMAIN\"] = \"DOMAIN\";\n  ClaimTypes[\"KEYBASE\"] = \"KEYBASE\";\n  ClaimTypes[\"NAME\"] = \"NAME\";\n  ClaimTypes[\"PROFILE_PICTURE\"] = \"PROFILE_PICTURE\";\n  ClaimTypes[\"STORAGE\"] = \"STORAGE\";\n  ClaimTypes[\"TWITTER\"] = \"TWITTER\";\n})(ClaimTypes = exports.ClaimTypes || (exports.ClaimTypes = {}));\n\nexports.VERIFIABLE_CLAIM_TYPES = [ClaimTypes.KEYBASE, ClaimTypes.ACCOUNT, ClaimTypes.DOMAIN]; // Claims whose status can be validated\n\nexports.VALIDATABLE_CLAIM_TYPES = [ClaimTypes.ATTESTATION_SERVICE_URL];\nexports.SINGULAR_CLAIM_TYPES = [ClaimTypes.NAME, ClaimTypes.ATTESTATION_SERVICE_URL];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEaA,wBAAgBC,CAAC,CAACC,MAAlB;AACAF,wBAAgBC,CAAC,CAACE,MAAlB;;AAEN,IAAMC,GAAG,GAAG;AAAM,aAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC;AAAuC,CAAzD;;AAAMP,cAAGI,GAAH;AAEb,IAAYI,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;AACpBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACD,CATD,EAAYA,UAAU,GAAVR,4CAAU,EAAV,CAAZ;;AAWaA,iCAAyB,CAACQ,UAAU,CAACC,OAAZ,EAAqBD,UAAU,CAACE,OAAhC,EAAyCF,UAAU,CAACG,MAApD,CAAzB,C,CAEb;;AACaX,kCAA0B,CAACQ,UAAU,CAACI,uBAAZ,CAA1B;AAEAZ,+BAAuB,CAACQ,UAAU,CAACK,IAAZ,EAAkBL,UAAU,CAACI,uBAA7B,CAAvB","names":["exports","t","string","number","now","round","Date","getTime","ClaimTypes","KEYBASE","ACCOUNT","DOMAIN","ATTESTATION_SERVICE_URL","NAME"],"sourceRoot":"","sources":["../../../src/identity/claims/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}