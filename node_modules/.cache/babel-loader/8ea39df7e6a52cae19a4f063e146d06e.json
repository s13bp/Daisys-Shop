{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountsWrapper = void 0;\n\nvar signatureUtils_1 = require(\"@celo/base/lib/signatureUtils\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar signatureUtils_2 = require(\"@celo/utils/lib/signatureUtils\");\n\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\n\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\n\nvar web3_utils_1 = require(\"web3-utils\");\n\nvar versions_1 = require(\"../versions\");\n\nvar BaseWrapper_1 = require(\"../wrappers/BaseWrapper\");\n/**\n * Contract for handling deposits needed for voting.\n */\n\n\nvar AccountsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(AccountsWrapper, _super);\n\n  function AccountsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.RELEASE_4_VERSION = (0, versions_1.newContractVersion)(1, 1, 2, 0);\n    /**\n     * Creates an account.\n     */\n\n    _this.createAccount = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.createAccount);\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n\n    _this.getAttestationSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationSigner);\n    /**\n     * Returns if the account has authorized an attestation signer\n     * @param account The address of the account.\n     * @return If the account has authorized an attestation signer\n     */\n\n    _this.hasAuthorizedAttestationSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.hasAuthorizedAttestationSigner);\n    /**\n     * Returns the vote signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n\n    _this.getVoteSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getVoteSigner);\n    /**\n     * Returns the validator signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can register a validator or group.\n     */\n\n    _this.getValidatorSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getValidatorSigner);\n    /**\n     * Returns the account address given the signer for voting\n     * @param signer Address that is authorized to sign the tx as voter\n     * @return The Account address\n     */\n\n    _this.voteSignerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.voteSignerToAccount);\n    /**\n     * Returns the account address given the signer for validating\n     * @param signer Address that is authorized to sign the tx as validator\n     * @return The Account address\n     */\n\n    _this.validatorSignerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerToAccount);\n    /**\n     * Returns the account associated with `signer`.\n     * @param signer The address of the account or previously authorized signer.\n     * @dev Fails if the `signer` is not an account or previously authorized signer.\n     * @return The associated account.\n     */\n\n    _this.signerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.signerToAccount);\n    /**\n     * Check if an account already exists.\n     * @param account The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n\n    _this.isAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isAccount);\n    /**\n     * Check if an address is a signer address\n     * @param address The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n\n    _this.isSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isAuthorizedSigner);\n    /**\n     * Returns the set data encryption key for the account\n     * @param account Account\n     */\n\n    _this.getDataEncryptionKey = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getDataEncryptionKey, undefined, function (res) {\n      return (0, BaseWrapper_1.solidityBytesToString)(res);\n    });\n    /**\n     * Returns the set wallet address for the account\n     * @param account Account\n     */\n\n    _this.getWalletAddress = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getWalletAddress);\n    /**\n     * Returns the metadataURL for the account\n     * @param account Account\n     */\n\n    _this.getMetadataURL = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMetadataURL);\n    /**\n     * Sets the data encryption of the account\n     * @param encryptionKey The key to set\n     */\n\n    _this.setAccountDataEncryptionKey = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setAccountDataEncryptionKey);\n    /**\n     * Sets the name for the account\n     * @param name The name to set\n     */\n\n    _this.setName = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setName);\n    /**\n     * Sets the metadataURL for the account\n     * @param url The url to set\n     */\n\n    _this.setMetadataURL = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setMetadataURL);\n    return _this;\n  }\n\n  AccountsWrapper.prototype.getCurrentSigners = function (address) {\n    return Promise.all([this.getVoteSigner(address), this.getValidatorSigner(address), this.getAttestationSigner(address)]);\n  };\n\n  AccountsWrapper.prototype.getAccountSummary = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ret;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.getName(account), this.getVoteSigner(account), this.getValidatorSigner(account), this.getAttestationSigner(account), this.getMetadataURL(account), this.getWalletAddress(account), this.getDataEncryptionKey(account)])];\n\n          case 1:\n            ret = _a.sent();\n            return [2\n            /*return*/\n            , {\n              address: account,\n              name: ret[0],\n              authorizedSigners: {\n                vote: ret[1],\n                validator: ret[2],\n                attestation: ret[3]\n              },\n              metadataURL: ret[4],\n              wallet: ret[5],\n              dataEncryptionKey: ret[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Authorize an attestation signing key on behalf of this account to another address.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeAttestationSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeAttestationSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign votes on behalf of the account.\n   * @param signer The address of the vote signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeVoteSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeVoteSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeValidatorSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, account, _a, message, prefixedMsg, pubKey;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 1:\n            validators = _b.sent();\n            _a = this.kit.connection.defaultAccount;\n            if (_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.kit.connection.getAccounts()];\n\n          case 2:\n            _a = _b.sent()[0];\n            _b.label = 3;\n\n          case 3:\n            account = _a;\n            return [4\n            /*yield*/\n            , validators.isValidator(account)];\n\n          case 4:\n            if (_b.sent()) {\n              message = this.kit.connection.web3.utils.soliditySha3({\n                type: 'address',\n                value: account\n              });\n              prefixedMsg = (0, signatureUtils_2.hashMessageWithPrefix)(message);\n              pubKey = (0, signatureUtils_2.signedMessageToPublicKey)(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n              return [2\n              /*return*/\n              , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithPublicKey(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, (0, BaseWrapper_1.stringToSolidityBytes)(pubKey)))];\n            } else {\n              return [2\n              /*return*/\n              , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeValidatorSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account. Also switch BLS key at the same time.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n   *   of possession. 48 bytes.\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n   *   account address. 96 bytes.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeValidatorSignerAndBls = function (signer, proofOfSigningKeyPossession, blsPublicKey, blsPop) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a, message, prefixedMsg, pubKey;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.kit.connection.defaultAccount;\n            if (_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.kit.connection.getAccounts()];\n\n          case 1:\n            _a = _b.sent()[0];\n            _b.label = 2;\n\n          case 2:\n            account = _a;\n            message = this.kit.connection.web3.utils.soliditySha3({\n              type: 'address',\n              value: account\n            });\n            prefixedMsg = (0, signatureUtils_2.hashMessageWithPrefix)(message);\n            pubKey = (0, signatureUtils_2.signedMessageToPublicKey)(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithKeys(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, (0, BaseWrapper_1.stringToSolidityBytes)(pubKey), (0, BaseWrapper_1.stringToSolidityBytes)(blsPublicKey), (0, BaseWrapper_1.stringToSolidityBytes)(blsPop)))];\n        }\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.authorizeSigner = function (signer, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, accounts, chainId, accountsContract, account, hashedRole, typedData, sig;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n\n          case 1:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , Promise.all([this.kit.connection.getAccounts(), this.kit.connection.chainId(), this.kit.contracts.getAccounts()])];\n\n          case 2:\n            _a = _b.sent(), accounts = _a[0], chainId = _a[1], accountsContract = _a[2];\n            account = this.kit.connection.defaultAccount || accounts[0];\n            hashedRole = (0, web3_utils_1.keccak256)(role);\n            typedData = (0, typed_data_constructors_1.authorizeSigner)({\n              account: account,\n              signer: signer,\n              chainId: chainId,\n              role: hashedRole,\n              accountsContractAddress: accountsContract.address\n            });\n            return [4\n            /*yield*/\n            , this.kit.connection.signTypedData(signer, typedData)];\n\n          case 3:\n            sig = _b.sent();\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeSignerWithSignature(signer, hashedRole, sig.v, sig.r, sig.s))];\n        }\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.startSignerAuthorization = function (signer, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.authorizeSigner(signer, (0, web3_utils_1.keccak256)(role)))];\n        }\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.completeSignerAuthorization = function (account, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.completeSignerAuthorization(account, (0, web3_utils_1.keccak256)(role)))];\n        }\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.generateProofOfKeyPossession = function (account, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.getParsedSignatureOfAddress(account, signer, (0, signatureUtils_1.NativeSigner)(this.kit.connection.web3.eth.sign, signer))];\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.generateProofOfKeyPossessionLocally = function (account, signer, privateKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.getParsedSignatureOfAddress(account, signer, (0, signatureUtils_2.LocalSigner)(privateKey))];\n      });\n    });\n  };\n  /**\n   * Returns the set name for the account\n   * @param account Account\n   * @param blockNumber Height of result, defaults to tip.\n   */\n\n\n  AccountsWrapper.prototype.getName = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2\n        /*return*/\n        , this.contract.methods.getName(account).call({}, blockNumber)];\n      });\n    });\n  };\n  /**\n   * Convenience Setter for the dataEncryptionKey and wallet address for an account\n   * @param name A string to set as the name of the account\n   * @param dataEncryptionKey secp256k1 public key for data encryption. Preferably compressed.\n   * @param walletAddress The wallet address to set for the account\n   * @param proofOfPossession Signature from the wallet address key over the sender's address\n   */\n\n\n  AccountsWrapper.prototype.setAccount = function (name, dataEncryptionKey, walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n\n    if (proofOfPossession) {\n      return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.setAccount(name, // @ts-ignore\n      dataEncryptionKey, walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.setAccount(name, // @ts-ignore\n      dataEncryptionKey, walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n  /**\n   * Sets the wallet address for the account\n   * @param address The address to set\n   */\n\n\n  AccountsWrapper.prototype.setWalletAddress = function (walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n\n    if (proofOfPossession) {\n      return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n\n  AccountsWrapper.prototype.parseSignatureOfAddress = function (address, signer, signature) {\n    var hash = (0, solidity_1.soliditySha3)({\n      type: 'address',\n      value: address\n    });\n    return (0, signatureUtils_2.parseSignature)(hash, signature, signer);\n  };\n\n  AccountsWrapper.prototype.getParsedSignatureOfAddress = function (address, signer, signerFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hash, signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hash = (0, solidity_1.soliditySha3)({\n              type: 'address',\n              value: address\n            });\n            return [4\n            /*yield*/\n            , signerFn.sign(hash)];\n\n          case 1:\n            signature = _a.sent();\n            return [2\n            /*return*/\n            , (0, signatureUtils_2.parseSignature)(hash, signature, signer)];\n        }\n      });\n    });\n  };\n\n  return AccountsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.AccountsWrapper = AccountsWrapper;","map":{"version":3,"mappings":"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","names":["__extends","_this","kit","contract","methods","createAccount","getAttestationSigner","hasAuthorizedAttestationSigner","getVoteSigner","getValidatorSigner","voteSignerToAccount","validatorSignerToAccount","signerToAccount","isAccount","isAuthorizedSigner","getDataEncryptionKey","undefined","res","getWalletAddress","getMetadataURL","setAccountDataEncryptionKey","setName","setMetadataURL","AccountsWrapper","address","Promise","all","account","getName","ret","_a","name","authorizedSigners","vote","validator","attestation","metadataURL","wallet","dataEncryptionKey","signer","proofOfSigningKeyPossession","connection","authorizeAttestationSigner","v","r","s","authorizeVoteSigner","contracts","getValidators","validators","_b","defaultAccount","getAccounts","isValidator","message","web3","utils","soliditySha3","type","value","prefixedMsg","pubKey","authorizeValidatorSignerWithPublicKey","authorizeValidatorSigner","blsPublicKey","blsPop","authorizeValidatorSignerWithKeys","role","onlyVersionOrGreater","RELEASE_4_VERSION","chainId","accounts","accountsContract","hashedRole","typedData","accountsContractAddress","signTypedData","sig","authorizeSignerWithSignature","authorizeSigner","completeSignerAuthorization","getParsedSignatureOfAddress","eth","sign","privateKey","blockNumber","call","walletAddress","proofOfPossession","setAccount","setWalletAddress","signature","hash","signerFn","BaseWrapper_1","exports"],"sourceRoot":"","sources":["../../src/wrappers/Accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}