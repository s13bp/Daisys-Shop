{"ast":null,"code":"// hoisted class for cyclic dependency\nclass Range {\n  constructor(range, options) {\n    options = parseOptions(options);\n\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||\n\n    this.raw = range;\n    this.set = range.split('||') // map the range to a 2d array of comparators\n    .map(r => this.parseRange(r.trim())) // throw out any comparator lists that are empty\n    // this generally means that it was not a valid range, which is allowed\n    // in loose mode, but will still throw if the WHOLE range is invalid.\n    .filter(c => c.length);\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`);\n    } // if we have any that are not the null set, throw out null sets.\n\n\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0];\n      this.set = this.set.filter(c => !isNullSet(c[0]));\n\n      if (this.set.length === 0) {\n        this.set = [first];\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c];\n            break;\n          }\n        }\n      }\n    }\n\n    this.format();\n  }\n\n  format() {\n    this.range = this.set.map(comps => {\n      return comps.join(' ').trim();\n    }).join('||').trim();\n    return this.range;\n  }\n\n  toString() {\n    return this.range;\n  }\n\n  parseRange(range) {\n    range = range.trim(); // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n\n    const memoOpts = Object.keys(this.options).join(',');\n    const memoKey = `parseRange:${memoOpts}:${range}`;\n    const cached = cache.get(memoKey);\n\n    if (cached) {\n      return cached;\n    }\n\n    const loose = this.options.loose; // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n    debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n    debug('comparator trim', range); // `~ 1.2.3` => `~1.2.3`\n\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces\n\n    range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range.split(' ').map(comp => parseComparator(comp, this.options)).join(' ').split(/\\s+/) // >=0.0.0 is equivalent to *\n    .map(comp => replaceGTE0(comp, this.options));\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options);\n        return !!comp.match(re[t.COMPARATORLOOSE]);\n      });\n    }\n\n    debug('range list', rangeList); // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n\n    const rangeMap = new Map();\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options));\n\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp];\n      }\n\n      rangeMap.set(comp.value, comp);\n    }\n\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('');\n    }\n\n    const result = [...rangeMap.values()];\n    cache.set(memoKey, result);\n    return result;\n  }\n\n  intersects(range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required');\n    }\n\n    return this.set.some(thisComparators => {\n      return isSatisfiable(thisComparators, options) && range.set.some(rangeComparators => {\n        return isSatisfiable(rangeComparators, options) && thisComparators.every(thisComparator => {\n          return rangeComparators.every(rangeComparator => {\n            return thisComparator.intersects(rangeComparator, options);\n          });\n        });\n      });\n    });\n  } // if ANY of the sets match ALL of its comparators, then pass\n\n\n  test(version) {\n    if (!version) {\n      return false;\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options);\n      } catch (er) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = Range;\n\nconst LRU = require('lru-cache');\n\nconst cache = new LRU({\n  max: 1000\n});\n\nconst parseOptions = require('../internal/parse-options');\n\nconst Comparator = require('./comparator');\n\nconst debug = require('../internal/debug');\n\nconst SemVer = require('./semver');\n\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace\n} = require('../internal/re');\n\nconst isNullSet = c => c.value === '<0.0.0-0';\n\nconst isAny = c => c.value === ''; // take a set of comparators and determine whether there\n// exists a version which can satisfy it\n\n\nconst isSatisfiable = (comparators, options) => {\n  let result = true;\n  const remainingComparators = comparators.slice();\n  let testComparator = remainingComparators.pop();\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(otherComparator => {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n\n  return result;\n}; // comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\n\n\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'; // ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n\n\nconst replaceTildes = (comp, options) => comp.trim().split(/\\s+/).map(c => {\n  return replaceTilde(c, options);\n}).join(' ');\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr);\n    let ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;\n    }\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}; // ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n\n\nconst replaceCarets = (comp, options) => comp.trim().split(/\\s+/).map(c => {\n  return replaceCaret(c, options);\n}).join(' ');\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options);\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  const z = options.includePrerelease ? '-0' : '';\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr);\n    let ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;\n      }\n    } else {\n      debug('no pr');\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;\n        } else {\n          ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;\n      }\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n};\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(c => {\n    return replaceXRange(c, options);\n  }).join(' ');\n};\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim();\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    const xM = isX(M);\n    const xm = xM || isX(m);\n    const xp = xm || isX(p);\n    const anyX = xp;\n\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    } // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n\n\n    pr = options.includePrerelease ? '-0' : '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n\n      p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>=';\n\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0';\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`;\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;\n    }\n\n    debug('xRange return', ret);\n    return ret;\n  });\n}; // Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\n\n\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!\n\n  return comp.trim().replace(re[t.STAR], '');\n};\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options);\n  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');\n}; // This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n\n\nconst hyphenReplace = incPr => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = '';\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;\n  } else if (fpr) {\n    from = `>=${from}`;\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`;\n  }\n\n  if (isX(tM)) {\n    to = '';\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`;\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`;\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`;\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`;\n  } else {\n    to = `<=${to}`;\n  }\n\n  return `${from} ${to}`.trim();\n};\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n\n      if (set[i].semver === Comparator.ANY) {\n        continue;\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver;\n\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    } // Version has a -pre, but it's not one of the ones we like.\n\n\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/crypto/GETSCHWIFTY/node_modules/semver/classes/range.js"],"names":["Range","constructor","range","options","parseOptions","loose","includePrerelease","raw","Comparator","value","set","format","split","map","r","parseRange","trim","filter","c","length","TypeError","first","isNullSet","isAny","comps","join","toString","memoOpts","Object","keys","memoKey","cached","cache","get","hr","re","t","HYPHENRANGELOOSE","HYPHENRANGE","replace","hyphenReplace","debug","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","rangeList","comp","parseComparator","replaceGTE0","match","COMPARATORLOOSE","rangeMap","Map","comparators","size","has","delete","result","values","intersects","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","test","version","SemVer","er","i","testSet","module","exports","LRU","require","max","remainingComparators","slice","testComparator","pop","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","toLowerCase","replaceTilde","TILDELOOSE","TILDE","_","M","m","p","pr","ret","replaceCaret","CARETLOOSE","CARET","z","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","prerelease","semver","ANY","allowed","major","minor","patch"],"mappings":"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","sourcesContent":["// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"script"}