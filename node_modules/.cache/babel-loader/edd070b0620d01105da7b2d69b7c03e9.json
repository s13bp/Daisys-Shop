{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\nexport const useContract = (abi, contractAddress) => {\n  _s();\n\n  const {\n    getConnectedKit,\n    address\n  } = useContractKit();\n  const [contract, setContract] = useState(null);\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit(); // get a contract interface to interact with\n\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n  return contract;\n};\n\n_s(useContract, \"8vPkdJoGDIImQUpR2O8m3jppr4U=\", false, function () {\n  return [useContractKit];\n});","map":{"version":3,"sources":["/Users/crypto/GETSCHWIFTY/src/hooks/useContract.js"],"names":["useState","useEffect","useCallback","useContractKit","useContract","abi","contractAddress","getConnectedKit","address","contract","setContract","getContract","kit","web3","eth","Contract"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,eAAN,KAA0B;AAAA;;AACnD,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA+BL,cAAc,EAAnD;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAMW,WAAW,GAAGT,WAAW,CAAC,YAAY;AAC1C,UAAMU,GAAG,GAAG,MAAML,eAAe,EAAjC,CAD0C,CAG1C;;AACAG,IAAAA,WAAW,CAAC,IAAIE,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CAA0BV,GAA1B,EAA+BC,eAA/B,CAAD,CAAX;AACD,GAL8B,EAK5B,CAACC,eAAD,EAAkBF,GAAlB,EAAuBC,eAAvB,CAL4B,CAA/B;AAOAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,OAAJ,EAAaG,WAAW;AACzB,GAFQ,EAEN,CAACH,OAAD,EAAUG,WAAV,CAFM,CAAT;AAIA,SAAOF,QAAP;AACD,CAhBM;;GAAML,W;UAC0BD,c","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n"]},"metadata":{},"sourceType":"module"}