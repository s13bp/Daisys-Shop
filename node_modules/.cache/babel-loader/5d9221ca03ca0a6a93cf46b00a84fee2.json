{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\n\nvar string_1 = require(\"@celo/base/lib/string\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar lib_1 = require(\"@celo/utils/lib\");\n\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\n\nvar base_1 = require(\"../base\");\n\nvar identity_1 = require(\"../identity\");\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n\nfunction hashAddressToSingleDigit(address) {\n  return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\n\nfunction getSecurityCodePrefix(issuerAddress) {\n  return \"\" + hashAddressToSingleDigit(issuerAddress);\n}\n\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\n\nvar AttestationState;\n\n(function (AttestationState) {\n  AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n  AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n  AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\n\nfunction parseGetCompletableAttestations(response) {\n  var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n  return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n    var blockNumber = _a[0],\n        issuer = _a[1],\n        metadataURL = _a[2];\n    return {\n      blockNumber: blockNumber,\n      issuer: issuer,\n      metadataURL: metadataURL\n    };\n  });\n}\n\nvar AttestationsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(AttestationsWrapper, _super);\n\n  function AttestationsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     *  Returns the time an attestation can be completable before it is considered expired\n     */\n\n\n    _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the attestation request fee in a given currency.\n     * @param address Token address.\n     * @returns The fee as big number.\n     */\n\n    _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) {\n      return {\n        blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n        attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n        attestationRequestFeeToken: res[2]\n      };\n    });\n    /**\n     * @notice Checks if attestation request is expired.\n     * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n     */\n\n    _this.isAttestationExpired = function (attestationRequestBlockNumber) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var attestationExpiryBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.attestationExpiryBlocks()];\n\n            case 1:\n              attestationExpiryBlocks = _a.sent();\n              return [4\n              /*yield*/\n              , this.kit.connection.getBlockNumber()];\n\n            case 2:\n              blockNumber = _a.sent();\n              return [2\n              /*return*/\n              , blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n          }\n        });\n      });\n    };\n    /**\n     * @notice Waits for appropriate block numbers for before issuer can be selected\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n\n    _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n      if (timeoutSeconds === void 0) {\n        timeoutSeconds = 120;\n      }\n\n      if (pollDurationSeconds === void 0) {\n        pollDurationSeconds = 1;\n      }\n\n      return __awaiter(_this, void 0, void 0, function () {\n        var startTime, unselectedRequest, waitBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              startTime = Date.now();\n              return [4\n              /*yield*/\n              , this.getUnselectedRequest(identifier, account)];\n\n            case 1:\n              unselectedRequest = _a.sent();\n              return [4\n              /*yield*/\n              , this.selectIssuersWaitBlocks()];\n\n            case 2:\n              waitBlocks = _a.sent();\n\n              if (unselectedRequest.blockNumber === 0) {\n                throw new Error('No unselectedRequest to wait for');\n              }\n\n              _a.label = 3;\n\n            case 3:\n              if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , this.kit.connection.getBlockNumber()];\n\n            case 4:\n              blockNumber = _a.sent();\n\n              if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                return [2\n                /*return*/\n                ];\n              }\n\n              return [4\n              /*yield*/\n              , (0, async_1.sleep)(pollDurationSeconds * 1000)];\n\n            case 5:\n              _a.sent();\n\n              return [3\n              /*break*/\n              , 3];\n\n            case 6:\n              throw new Error('Timeout while waiting for selecting issuers');\n          }\n        });\n      });\n    };\n    /**\n     * Returns the issuers of attestations for a phoneNumber/account combo\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n\n    _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n    /**\n     * Returns the attestation state of a phone number/account/issuer tuple\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) {\n      return {\n        attestationState: (0, BaseWrapper_1.valueToInt)(state[0])\n      };\n    });\n    /**\n     * Returns the attestation stats of a identifer/account pair\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) {\n      return {\n        completed: (0, BaseWrapper_1.valueToInt)(stat[0]),\n        total: (0, BaseWrapper_1.valueToInt)(stat[1])\n      };\n    });\n\n    _this.makeIsIssuerRunningAttestationService = function (tries) {\n      if (tries === void 0) {\n        tries = 3;\n      }\n\n      return function (arg) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var metadata, attestationServiceURLClaim, nameClaim, resp, _a, status_1, version, error_1;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 4,, 5]);\n\n                return [4\n                /*yield*/\n                , identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, arg.metadataURL, tries)];\n\n              case 1:\n                metadata = _b.sent();\n                attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n\n                if (attestationServiceURLClaim === undefined) {\n                  throw new Error(\"No attestation service URL registered for \" + arg.issuer);\n                }\n\n                nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                return [4\n                /*yield*/\n                , (0, cross_fetch_1.default)(\"\" + attestationServiceURLClaim.url + (attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/') + \"status\")];\n\n              case 2:\n                resp = _b.sent();\n\n                if (!resp.ok) {\n                  throw new Error(\"Request failed with status \" + resp.status);\n                }\n\n                return [4\n                /*yield*/\n                , resp.json()];\n\n              case 3:\n                _a = _b.sent(), status_1 = _a.status, version = _a.version;\n\n                if (status_1 !== 'ok') {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    issuer: arg.issuer\n                  }];\n                }\n\n                return [2\n                /*return*/\n                , {\n                  isValid: true,\n                  result: {\n                    blockNumber: arg.blockNumber,\n                    issuer: arg.issuer,\n                    attestationServiceURL: attestationServiceURLClaim.url,\n                    name: nameClaim ? nameClaim.name : undefined,\n                    version: version\n                  }\n                }];\n\n              case 4:\n                error_1 = _b.sent();\n                return [2\n                /*return*/\n                , {\n                  isValid: false,\n                  issuer: arg.issuer\n                }];\n\n              case 5:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n    };\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of token rewards are accumulated in.\n     * @param account The address of the account.\n     * @return The reward amount.\n     */\n\n\n    _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Allows issuers to withdraw accumulated attestation rewards\n     * @param address The address of the token that will be withdrawn\n     */\n\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.withdraw);\n    /**\n     * Returns the list of accounts associated with an identifier.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n\n    _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n    /**\n     * Updates sender's approval status on whether to allow an attestation identifier\n     * mapping to be transfered from one address to another.\n     * @param identifier The identifier for this attestation.\n     * @param index The index of the account in the accounts array.\n     * @param from The current attestation address to which the identifier is mapped.\n     * @param to The new address to map to identifier.\n     * @param status The approval status\n     */\n\n    _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.approveTransfer);\n    return _this;\n  }\n  /**\n   * Returns the verified status of an identifier/account pair indicating whether the attestation\n   * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param numAttestationsRequired Optional number of attestations required.  Will default to\n   *  hardcoded value if absent.\n   * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n   *  default to hardcoded value if absent.\n   */\n\n\n  AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var attestationStats;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAttestationStat(identifier, account)];\n\n          case 1:\n            attestationStats = _a.sent();\n            return [2\n            /*return*/\n            , lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n        }\n      });\n    });\n  };\n  /**\n   * Calculates the amount of StableToken required to request Attestations\n   * @param attestationsRequested  The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenAddress, attestationFee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenAddress = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getAttestationRequestFee(tokenAddress).call()];\n\n          case 2:\n            attestationFee = _a.sent();\n            return [2\n            /*return*/\n            , new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n        }\n      });\n    });\n  };\n  /**\n   * Approves the necessary amount of StableToken to request Attestations\n   * @param attestationsRequested The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenContract, fee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getContract(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenContract = _a.sent();\n            return [4\n            /*yield*/\n            , this.getAttestationFeeRequired(attestationsRequested)];\n\n          case 2:\n            fee = _a.sent();\n            return [2\n            /*return*/\n            , tokenContract.approve(this.address, fee.toFixed())];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of attestations that can be completed, along with the issuers' attestation\n   * service urls\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getCompletableAttestations(identifier, account).call()];\n\n          case 1:\n            result = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n\n          case 2:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (_) {\n              return _.isValid ? _.result : null;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of issuer addresses that were found to not run the attestation service\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, withAttestationServiceURLs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getCompletableAttestations(identifier, account).call()];\n\n          case 1:\n            result = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n\n          case 2:\n            withAttestationServiceURLs = _a.sent();\n            return [2\n            /*return*/\n            , withAttestationServiceURLs.map(function (_) {\n              return _.isValid ? null : _.issuer;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Completes an attestation with the corresponding code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param issuer The issuer of the attestation\n   * @param code The code received by the validator\n   */\n\n\n  AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _b.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.complete(identifier, v, r, s))];\n        }\n      });\n    });\n  };\n  /**\n   * Given a list of issuers, finds the matching issuer for a given code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param code The code received by the validator\n   * @param issuers The list of potential issuers\n   */\n\n\n  AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _i = 0, issuers_1 = issuers;\n            _a.label = 2;\n\n          case 2:\n            if (!(_i < issuers_1.length)) return [3\n            /*break*/\n            , 5];\n            issuer = issuers_1[_i];\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 3:\n            attestationSigner = _a.sent();\n\n            try {\n              lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n              return [2\n              /*return*/\n              , issuer];\n            } catch (error) {\n              return [3\n              /*break*/\n              , 4];\n            }\n\n            _a.label = 4;\n\n          case 4:\n            _i++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current configuration parameters for the contract.\n   * @param tokens List of tokens used for attestation fees.\n   * @return AttestationsConfig object\n   */\n\n\n  AttestationsWrapper.prototype.getConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var feeTokens, _a, _b, _c, fees;\n\n      var _d;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!(tokens !== null && tokens !== void 0)) return [3\n            /*break*/\n            , 1];\n            _a = tokens;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            _c = (_b = Object).values;\n            return [4\n            /*yield*/\n            , this.kit.celoTokens.getAddresses()];\n\n          case 2:\n            _a = _c.apply(_b, [_e.sent()]);\n            _e.label = 3;\n\n          case 3:\n            feeTokens = _a;\n            return [4\n            /*yield*/\n            , Promise.all(feeTokens.map(function (token) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var fee;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.attestationRequestFees(token)];\n\n                    case 1:\n                      fee = _a.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        fee: fee,\n                        address: token\n                      }];\n                  }\n                });\n              });\n            }))];\n\n          case 4:\n            fees = _e.sent();\n            _d = {};\n            return [4\n            /*yield*/\n            , this.attestationExpiryBlocks()];\n\n          case 5:\n            return [2\n            /*return*/\n            , (_d.attestationExpiryBlocks = _e.sent(), _d.attestationRequestFees = fees, _d)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the attestations contract\n   * @return AttestationsConfig object\n   */\n\n\n  AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig(tokens)];\n\n          case 1:\n            config = _a.sent();\n            return [2\n            /*return*/\n            , {\n              attestationRequestFees: config.attestationRequestFees,\n              attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Lookup mapped wallet addresses for a given list of identifiers\n   * @param identifiers Attestation identifiers (e.g. phone hashes)\n   */\n\n\n  AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.batchGetAttestationStats(identifiers).call()];\n\n          case 1:\n            stats = _a.sent();\n            matches = stats[0].map(BaseWrapper_1.valueToInt);\n            addresses = stats[1];\n            completed = stats[2].map(BaseWrapper_1.valueToInt);\n            total = stats[3].map(BaseWrapper_1.valueToInt);\n            result = {};\n            rIndex = 0;\n\n            for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n              pHash = identifiers[pIndex];\n              numberOfMatches = matches[pIndex];\n\n              if (numberOfMatches === 0) {\n                continue;\n              }\n\n              matchingAddresses = {};\n\n              for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                matchingAddress = addresses[rIndex];\n                matchingAddresses[matchingAddress] = {\n                  completed: completed[rIndex],\n                  total: total[rIndex]\n                };\n                rIndex++;\n              }\n\n              result[pHash] = matchingAddresses;\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new attestation\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param attestationsRequested The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenAddress = _a.sent();\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.request(identifier, attestationsRequested, tokenAddress))];\n        }\n      });\n    });\n  };\n  /**\n   * Selects the issuers for previously requested attestations for a phone number\n   * @param identifier Attestation identifier (e.g. phone hash)\n   */\n\n\n  AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n    return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.selectIssuers(identifier));\n  };\n  /**\n   * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.selectIssuers(identifier)];\n        }\n      });\n    });\n  };\n  /**\n   * Reveal phone number to issuer\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n\n\n  AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n  };\n  /**\n   * Returns reveal status from validator's attestation service\n   * @param phoneNumber: attestation's phone number\n   * @param account: attestation's account\n   * @param issuer: validator's address\n   * @param serviceURL: validator's attestation service URL\n   * @param pepper: phone number privacy pepper\n   */\n\n\n  AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n    var urlParams = new URLSearchParams({\n      phoneNumber: phoneNumber,\n      salt: pepper !== null && pepper !== void 0 ? pepper : '',\n      issuer: issuer,\n      account: account\n    });\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n  /**\n   * Returns attestation code for provided security code from validator's attestation service\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            urlParams = new URLSearchParams({\n              phoneNumber: requestBody.phoneNumber,\n              account: requestBody.account,\n              issuer: requestBody.issuer\n            });\n            additionalHeaders = {};\n\n            if (requestBody.salt) {\n              urlParams.set('salt', requestBody.salt);\n            }\n\n            if (!requestBody.securityCode) return [3\n            /*break*/\n            , 2];\n            urlParams.set('securityCode', requestBody.securityCode);\n            return [4\n            /*yield*/\n            , this.kit.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n\n          case 1:\n            signature = _c.sent();\n            additionalHeaders = {\n              Authentication: lib_1.SignatureUtils.serializeSignature(signature)\n            };\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n              method: 'GET',\n              headers: __assign({\n                'Content-Type': 'application/json'\n              }, additionalHeaders)\n            })];\n\n          case 3:\n            response = _c.sent();\n            ok = response.ok, status = response.status;\n            if (!ok) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 4:\n            body = _c.sent();\n\n            if (body.attestationCode) {\n              return [2\n              /*return*/\n              , body.attestationCode];\n            }\n\n            _c.label = 5;\n\n          case 5:\n            _a = Error.bind;\n            _b = \"Error getting security code for \" + requestBody.issuer + \". \" + status + \": \";\n            return [4\n            /*yield*/\n            , response.text()];\n\n          case 6:\n            throw new (_a.apply(Error, [void 0, _b + _c.sent()]))();\n        }\n      });\n    });\n  };\n  /**\n   * Validates a given code by the issuer on-chain\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account The address of the account which requested attestation\n   * @param issuer The address of the issuer of the attestation\n   * @param code The code send by the issuer\n   */\n\n\n  AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _b.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [4\n            /*yield*/\n            , this.contract.methods.validateAttestationCode(identifier, account, v, r, s).call()];\n\n          case 3:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result.toLowerCase() !== address_1.NULL_ADDRESS];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the relevant attestation service status for a validator\n   * @param validator Validator to get the attestation service status for\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.hasAuthorizedAttestationSigner(validator.address)];\n\n          case 2:\n            hasAttestationSigner = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(validator.address)];\n\n          case 3:\n            attestationSigner = _a.sent();\n            ret = __assign(__assign({}, validator), {\n              hasAttestationSigner: hasAttestationSigner,\n              attestationSigner: attestationSigner,\n              attestationServiceURL: null,\n              okStatus: false,\n              error: null,\n              smsProviders: [],\n              blacklistedRegionCodes: [],\n              rightAccount: false,\n              metadataURL: null,\n              state: AttestationServiceStatusState.NoAttestationSigner,\n              version: null,\n              ageOfLatestBlock: null,\n              smsProvidersRandomized: null,\n              maxDeliveryAttempts: null,\n              maxRerequestMins: null,\n              twilioVerifySidProvided: null\n            });\n\n            if (!hasAttestationSigner) {\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            return [4\n            /*yield*/\n            , accounts.getMetadataURL(validator.address)];\n\n          case 4:\n            metadataURL = _a.sent();\n            ret.metadataURL = metadataURL;\n\n            if (!metadataURL) {\n              ret.state = AttestationServiceStatusState.NoMetadataURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            if (metadataURL.startsWith('http://')) {\n              ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, metadataURL)];\n\n          case 6:\n            metadata = _a.sent();\n            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n\n            if (!attestationServiceURLClaim) {\n              ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            attestationServiceURL = attestationServiceURLClaim.url;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_2 = _a.sent();\n            ret.state = error_2.type === 'system' ? AttestationServiceStatusState.MetadataTimeout : AttestationServiceStatusState.InvalidMetadata;\n            ret.error = error_2;\n            return [2\n            /*return*/\n            , ret];\n\n          case 8:\n            ret.attestationServiceURL = attestationServiceURL;\n            _a.label = 9;\n\n          case 9:\n            _a.trys.push([9, 19,, 20]);\n\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n\n          case 10:\n            statusResponse = _a.sent();\n\n            if (!statusResponse.ok) {\n              ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            ret.okStatus = true;\n            return [4\n            /*yield*/\n            , statusResponse.json()];\n\n          case 11:\n            statusResponseBody = _a.sent();\n            ret.smsProviders = statusResponseBody.smsProviders;\n            ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n            ret.state = ret.rightAccount ? AttestationServiceStatusState.Valid : AttestationServiceStatusState.WrongAccount;\n            ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n            ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n            ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n            ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n            ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n            if (!statusResponseBody.version) return [3\n            /*break*/\n            , 17];\n            ret.version = statusResponseBody.version;\n            _a.label = 12;\n\n          case 12:\n            _a.trys.push([12, 15,, 16]);\n\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n\n          case 13:\n            healthzResponse = _a.sent();\n            return [4\n            /*yield*/\n            , healthzResponse.json()];\n\n          case 14:\n            healthzResponseBody = _a.sent();\n\n            if (!healthzResponse.ok) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n\n              if (healthzResponseBody.error) {\n                ret.error = healthzResponseBody.error;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            error_3 = _a.sent();\n            ret.state = AttestationServiceStatusState.UnreachableHealthz;\n            return [3\n            /*break*/\n            , 16];\n\n          case 16:\n            // Whether or not health check is reachable, also check full node status\n            // (overrides UnreachableHealthz status)\n            if (statusResponseBody.ageOfLatestBlock !== null && statusResponseBody.ageOfLatestBlock > 10 || statusResponseBody.isNodeSyncing === true) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n            }\n\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            // No version implies 1.0.0\n            ret.version = '1.0.0';\n            _a.label = 18;\n\n          case 18:\n            return [3\n            /*break*/\n            , 20];\n\n          case 19:\n            error_4 = _a.sent();\n            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n            ret.error = error_4;\n            return [3\n            /*break*/\n            , 20];\n\n          case 20:\n            return [2\n            /*return*/\n            , ret];\n        }\n      });\n    });\n  };\n\n  AttestationsWrapper.prototype.revoke = function (identifer, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.lookupAccountsForIdentifier(identifer)];\n\n          case 1:\n            accounts = _a.sent();\n            idx = accounts.findIndex(function (acc) {\n              return (0, address_1.eqAddress)(acc, account);\n            });\n\n            if (idx < 0) {\n              throw new Error(\"Account not found in identifier's accounts\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.revoke(identifer, idx))];\n        }\n      });\n    });\n  };\n\n  return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n\n(function (AttestationServiceStatusState) {\n  AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n  AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n  AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n  AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n  AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n  AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n  AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n  AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n  AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n  AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n  AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));","map":{"version":3,"mappings":"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","names":["hashAddressToSingleDigit","address","bignumber_js_1","toLowerCase","modulo","toNumber","getSecurityCodePrefix","issuerAddress","exports","AttestationState","parseGetCompletableAttestations","response","metadataURLs","map","BaseWrapper_1","_a","blockNumber","issuer","metadataURL","__extends","_this","contract","methods","attestationExpiryBlocks","undefined","attestationRequestFees","selectIssuersWaitBlocks","getUnselectedRequest","res","attestationsRequested","attestationRequestFeeToken","attestationRequestBlockNumber","kit","connection","getBlockNumber","identifier","account","timeoutSeconds","pollDurationSeconds","startTime","Date","now","unselectedRequest","waitBlocks","Error","getAttestationIssuers","getAttestationState","state","attestationState","getAttestationStats","stat","completed","total","tries","arg","identity_1","fetchFromURL","metadata","_b","attestationServiceURLClaim","findClaim","ATTESTATION_SERVICE_URL","nameClaim","NAME","url","substr","resp","ok","status","json","status_1","version","isValid","result","attestationServiceURL","name","pendingWithdrawals","withdraw","lookupAccountsForIdentifier","approveTransfer","AttestationsWrapper","numAttestationsRequired","attestationThreshold","getAttestationStat","attestationStats","lib_1","isAccountConsideredVerified","registry","addressFor","base_1","StableToken","tokenAddress","getAttestationRequestFee","call","attestationFee","times","contracts","getContract","tokenContract","getAttestationFeeRequired","fee","approve","toFixed","getCompletableAttestations","makeIsIssuerRunningAttestationService","results","_","filter","collections_1","withAttestationServiceURLs","code","getAccounts","accounts","getAttestationSigner","attestationSigner","expectedSourceMessage","getAttestationMessageToSignFromIdentifier","parseSignature","r","s","v","complete","issuers","issuers_1","_i","error","tokens","_c","values","celoTokens","getAddresses","_e","feeTokens","Promise","all","token","fees","_d","getConfig","config","attestationExpiry","identifiers","batchGetAttestationStats","stats","matches","addresses","rIndex","pIndex","length","pHash","numberOfMatches","matchingAddresses","mIndex","matchingAddress","request","selectIssuers","waitForSelectingIssuers","serviceURL","requestBody","method","headers","body","JSON","stringify","phoneNumber","pepper","urlParams","URLSearchParams","salt","signer","additionalHeaders","set","securityCode","signTypedData","signature","Authentication","serializeSignature","attestationCode","text","validateAttestationCode","address_1","validator","hasAuthorizedAttestationSigner","hasAttestationSigner","ret","okStatus","smsProviders","blacklistedRegionCodes","rightAccount","AttestationServiceStatusState","NoAttestationSigner","ageOfLatestBlock","smsProvidersRandomized","maxDeliveryAttempts","maxRerequestMins","twilioVerifySidProvided","getMetadataURL","NoMetadataURL","startsWith","InvalidAttestationServiceURL","NoAttestationServiceURL","error_2","type","MetadataTimeout","InvalidMetadata","statusResponse","UnreachableAttestationService","statusResponseBody","accountAddress","Valid","WrongAccount","healthzResponse","healthzResponseBody","Unhealthy","UnreachableHealthz","isNodeSyncing","error_4","identifer","idx","findIndex","acc","revoke"],"sourceRoot":"","sources":["../../src/wrappers/Attestations.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}