{"ast":null,"code":"var _slicedToArray = require(\"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nvar satisfies = require('../functions/satisfies.js');\n\nvar compare = require('../functions/compare.js');\n\nmodule.exports = function (versions, range, options) {\n  var set = [];\n  var first = null;\n  var prev = null;\n  var v = versions.sort(function (a, b) {\n    return compare(a, b, options);\n  });\n\n  var _iterator = _createForOfIteratorHelper(v),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var version = _step.value;\n      var included = satisfies(version, range, options);\n\n      if (included) {\n        prev = version;\n\n        if (!first) {\n          first = version;\n        }\n      } else {\n        if (prev) {\n          set.push([first, prev]);\n        }\n\n        prev = null;\n        first = null;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (first) {\n    set.push([first, null]);\n  }\n\n  var ranges = [];\n\n  for (var _i = 0, _set = set; _i < _set.length; _i++) {\n    var _set$_i = _slicedToArray(_set[_i], 2),\n        min = _set$_i[0],\n        max = _set$_i[1];\n\n    if (min === max) {\n      ranges.push(min);\n    } else if (!max && min === v[0]) {\n      ranges.push('*');\n    } else if (!max) {\n      ranges.push(\">=\".concat(min));\n    } else if (min === v[0]) {\n      ranges.push(\"<=\".concat(max));\n    } else {\n      ranges.push(\"\".concat(min, \" - \").concat(max));\n    }\n  }\n\n  var simplified = ranges.join(' || ');\n  var original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":{"version":3,"sources":["/Users/crypto/Daisys/node_modules/semver/ranges/simplify.js"],"names":["satisfies","require","compare","module","exports","versions","range","options","set","first","prev","v","sort","a","b","version","included","push","ranges","min","max","simplified","join","original","raw","String","length"],"mappings":";;;;AAAA;AACA;AACA;AACA,IAAMA,SAAS,GAAGC,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,EAA8B;AAC7C,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,MAAMC,CAAC,GAAGN,QAAQ,CAACO,IAAT,CAAc,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUZ,OAAO,CAACW,CAAD,EAAIC,CAAJ,EAAOP,OAAP,CAAjB;AAAA,GAAd,CAAV;;AAJ6C,6CAKvBI,CALuB;AAAA;;AAAA;AAK7C,wDAAyB;AAAA,UAAdI,OAAc;AACvB,UAAMC,QAAQ,GAAGhB,SAAS,CAACe,OAAD,EAAUT,KAAV,EAAiBC,OAAjB,CAA1B;;AACA,UAAIS,QAAJ,EAAc;AACZN,QAAAA,IAAI,GAAGK,OAAP;;AACA,YAAI,CAACN,KAAL,EAAY;AACVA,UAAAA,KAAK,GAAGM,OAAR;AACD;AACF,OALD,MAKO;AACL,YAAIL,IAAJ,EAAU;AACRF,UAAAA,GAAG,CAACS,IAAJ,CAAS,CAACR,KAAD,EAAQC,IAAR,CAAT;AACD;;AACDA,QAAAA,IAAI,GAAG,IAAP;AACAD,QAAAA,KAAK,GAAG,IAAR;AACD;AACF;AAnB4C;AAAA;AAAA;AAAA;AAAA;;AAoB7C,MAAIA,KAAJ,EAAW;AACTD,IAAAA,GAAG,CAACS,IAAJ,CAAS,CAACR,KAAD,EAAQ,IAAR,CAAT;AACD;;AAED,MAAMS,MAAM,GAAG,EAAf;;AACA,0BAAyBV,GAAzB,0BAA8B;AAAzB;AAAA,QAAOW,GAAP;AAAA,QAAYC,GAAZ;;AACH,QAAID,GAAG,KAAKC,GAAZ,EAAiB;AACfF,MAAAA,MAAM,CAACD,IAAP,CAAYE,GAAZ;AACD,KAFD,MAEO,IAAI,CAACC,GAAD,IAAQD,GAAG,KAAKR,CAAC,CAAC,CAAD,CAArB,EAA0B;AAC/BO,MAAAA,MAAM,CAACD,IAAP,CAAY,GAAZ;AACD,KAFM,MAEA,IAAI,CAACG,GAAL,EAAU;AACfF,MAAAA,MAAM,CAACD,IAAP,aAAiBE,GAAjB;AACD,KAFM,MAEA,IAAIA,GAAG,KAAKR,CAAC,CAAC,CAAD,CAAb,EAAkB;AACvBO,MAAAA,MAAM,CAACD,IAAP,aAAiBG,GAAjB;AACD,KAFM,MAEA;AACLF,MAAAA,MAAM,CAACD,IAAP,WAAeE,GAAf,gBAAwBC,GAAxB;AACD;AACF;;AACD,MAAMC,UAAU,GAAGH,MAAM,CAACI,IAAP,CAAY,MAAZ,CAAnB;AACA,MAAMC,QAAQ,GAAG,OAAOjB,KAAK,CAACkB,GAAb,KAAqB,QAArB,GAAgClB,KAAK,CAACkB,GAAtC,GAA4CC,MAAM,CAACnB,KAAD,CAAnE;AACA,SAAOe,UAAU,CAACK,MAAX,GAAoBH,QAAQ,CAACG,MAA7B,GAAsCL,UAAtC,GAAmDf,KAA1D;AACD,CAzCD","sourcesContent":["// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n"]},"metadata":{},"sourceType":"script"}