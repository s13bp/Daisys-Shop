{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.contractKitReducer = void 0;\n\nvar connectors_1 = require(\"./connectors\");\n\nvar constants_1 = require(\"./constants\");\n\nvar helpers_1 = require(\"./utils/helpers\");\n\nvar localStorage_1 = __importDefault(require(\"./utils/localStorage\"));\n\nfunction contractKitReducer(state, action) {\n  var _a;\n\n  var _b;\n\n  switch (action.type) {\n    case 'decrementPendingActionCount':\n      return __assign(__assign({}, state), {\n        pendingActionCount: state.pendingActionCount - 1\n      });\n\n    case 'setAddress':\n      if (action.payload === state.address) {\n        return state;\n      }\n\n      if (action.payload) {\n        localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedAddress, action.payload);\n      } else {\n        localStorage_1.default.removeItem(constants_1.localStorageKeys.lastUsedAddress);\n      }\n\n      return __assign(__assign({}, state), {\n        address: action.payload\n      });\n\n    case 'setNetwork':\n      if (action.payload === state.network) {\n        return state;\n      }\n\n      localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedNetwork, action.payload.name);\n      return __assign(__assign({}, state), {\n        network: action.payload\n      });\n\n    case 'setConnector':\n      localStorage_1.default.removeItem(constants_1.localStorageKeys.lastUsedAddress);\n      return __assign(__assign({}, state), {\n        connector: action.payload,\n        connectorInitError: null,\n        address: null\n      });\n\n    case 'setFeeCurrency':\n      if (action.payload === state.feeCurrency) {\n        return state;\n      }\n\n      localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedFeeCurrency, action.payload);\n      return __assign(__assign({}, state), {\n        feeCurrency: action.payload\n      });\n\n    case 'initialisedConnector':\n      {\n        var newConnector = action.payload;\n        var address = (_b = newConnector.kit.defaultAccount) !== null && _b !== void 0 ? _b : null;\n\n        if (address) {\n          localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedAddress, address);\n        }\n\n        return __assign(__assign({}, state), {\n          connector: action.payload,\n          address: address\n        });\n      }\n\n    case 'destroy':\n      (0, helpers_1.clearPreviousConfig)();\n      return __assign(__assign({}, state), {\n        address: null,\n        connector: new connectors_1.UnauthenticatedConnector(state.network)\n      });\n\n    default:\n      // This checks to see if the action type is `set<fieldname>`\n      if (action.type.slice(0, 3) === 'set') {\n        // This builds the proper camel-case field name from the action type\n        // e.g., setFieldName -> fieldName\n        var key = \"\".concat(action.type.charAt(3).toLowerCase()).concat(action.type.slice(4));\n        return __assign(__assign({}, state), (_a = {}, _a[key] = action.payload, _a));\n      } else {\n        console.error(new Error(\"Unrecognized action type \".concat(action.type, \" in contractKitReducer\")));\n      }\n\n      return state;\n  }\n}\n\nexports.contractKitReducer = contractKitReducer;","map":{"version":3,"mappings":"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","names":["contractKitReducer","state","action","type","pendingActionCount","payload","address","localStorage_1","setItem","constants_1","lastUsedAddress","removeItem","network","lastUsedNetwork","name","connector","connectorInitError","feeCurrency","lastUsedFeeCurrency","newConnector","kit","defaultAccount","_b","connectors_1","slice","key","charAt","toLowerCase","concat","_a","console","error","Error","exports"],"sourceRoot":"","sources":["../src/contract-kit-reducer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}