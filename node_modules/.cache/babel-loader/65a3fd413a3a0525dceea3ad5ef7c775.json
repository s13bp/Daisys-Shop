{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\n\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\n\nvar web3_utils_1 = require(\"web3-utils\");\n\nvar address_1 = require(\"./address\");\n\nvar signatureUtils_1 = require(\"./signatureUtils\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\n\nObject.defineProperty(exports, \"base64ToHex\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.base64ToHex;\n  }\n});\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.extractAttestationCodeFromMessage;\n  }\n});\nObject.defineProperty(exports, \"getIdentifierPrefix\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.getIdentifierPrefix;\n  }\n});\nObject.defineProperty(exports, \"IdentifierType\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.IdentifierType;\n  }\n});\nObject.defineProperty(exports, \"isAccountConsideredVerified\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.isAccountConsideredVerified;\n  }\n});\nObject.defineProperty(exports, \"messageContainsAttestationCode\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.messageContainsAttestationCode;\n  }\n});\nObject.defineProperty(exports, \"sanitizeMessageBase64\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.sanitizeMessageBase64;\n  }\n});\n\nvar sha3 = function sha3(v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\n\nfunction hashIdentifier(identifier, type, salt) {\n  return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\n\nexports.hashIdentifier = hashIdentifier;\n\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n  var messageHash = (0, web3_utils_1.soliditySha3)({\n    type: 'bytes32',\n    value: identifier\n  }, {\n    type: 'address',\n    value: account\n  });\n  return messageHash;\n}\n\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\n\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n  return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\n\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\n\nfunction attestToIdentifier(identifier, account, privateKey) {\n  var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n\n  var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer),\n      v = _a.v,\n      r = _a.r,\n      s = _a.s;\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\n\nexports.attestToIdentifier = attestToIdentifier;\n\nfunction extractSecurityCodeWithPrefix(message) {\n  var matches = message.match('(\\\\d{8})');\n\n  if (matches && matches.length === 2) {\n    return matches[1];\n  }\n\n  return null;\n}\n\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n  IdentifierType: attestations_1.IdentifierType,\n  getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n  getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n  base64ToHex: attestations_1.base64ToHex,\n  attestToIdentifier: attestToIdentifier,\n  sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n  messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n  extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AAUA;;AACA;;AACA,mD,CAEA;AACA;;;AACA;;AAEEA;AAAAC;AAAAC;AAAA;AAAW;AAAX;AACAF;AAAAC;AAAAC;AAAA;AAAiC;AAAjC;AACAF;AAAAC;AAAAC;AAAA;AAAmB;AAAnB;AACAF;AAAAC;AAAAC;AAAA;AAAc;AAAd;AACAF;AAAAC;AAAAC;AAAA;AAA2B;AAA3B;AACAF;AAAAC;AAAAC;AAAA;AAA8B;AAA9B;AACAF;AAAAC;AAAAC;AAAA;AAAqB;AAArB;;AAGF,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,CAAD,EAAU;AAAoB,wCAAa;AAAEC,QAAI,EAAE,QAAR;AAAkBC,SAAK,EAAEF;AAAzB,GAAb;AAA0C,CAArF;;AACA,SAAgBG,cAAhB,CAA+BC,UAA/B,EAAmDH,IAAnD,EAAyEI,IAAzE,EAAsF;AACpF,SAAO,mCAAmBN,IAAnB,EAAyBK,UAAzB,EAAqCH,IAArC,EAA2CI,IAA3C,CAAP;AACD;;AAFDC;;AAIA,SAAgBC,yCAAhB,CAA0DH,UAA1D,EAA8EI,OAA9E,EAA6F;AAC3F,MAAMC,WAAW,GAAW,+BAC1B;AAAER,QAAI,EAAE,SAAR;AAAmBC,SAAK,EAAEE;AAA1B,GAD0B,EAE1B;AAAEH,QAAI,EAAE,SAAR;AAAmBC,SAAK,EAAEM;AAA1B,GAF0B,CAA5B;AAIA,SAAOC,WAAP;AACD;;AANDH;;AAQA,SAAgBI,0CAAhB,CACEC,WADF,EAEEH,OAFF,EAGEI,SAHF,EAGoB;AAElB,SAAOL,yCAAyC,CAC9CJ,cAAc,CAACQ,WAAD,EAAcE,8BAAeC,YAA7B,EAA2CF,SAA3C,CADgC,EAE9CJ,OAF8C,CAAhD;AAID;;AATDF;;AAWA,SAAgBS,kBAAhB,CACEX,UADF,EAEEI,OAFF,EAGEQ,UAHF,EAGoB;AAElB,MAAMC,MAAM,GAAG,mCAAoBD,UAApB,CAAf;;AACM,WAAcE,gCAAeC,WAAf,CAClBZ,yCAAyC,CAACH,UAAD,EAAaI,OAAb,CADvB,EAElBQ,UAFkB,EAGlBC,MAHkB,CAAd;AAAA,MAAEjB,CAAC,OAAH;AAAA,MAAKoB,CAAC,OAAN;AAAA,MAAQC,CAAC,OAAT;;AAKN,SAAO;AAAErB,KAAC,GAAH;AAAKoB,KAAC,GAAN;AAAQC,KAAC;AAAT,GAAP;AACD;;AAZDf;;AAcA,SAAgBgB,6BAAhB,CAA8CC,OAA9C,EAA6D;AAC3D,MAAMC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,UAAd,CAAhB;;AACA,MAAID,OAAO,IAAIA,OAAO,CAACE,MAAR,KAAmB,CAAlC,EAAqC;AACnC,WAAOF,OAAO,CAAC,CAAD,CAAd;AACD;;AACD,SAAO,IAAP;AACD;;AANDlB;AAQaA,2BAAmB;AAC9BqB,gBAAc,+BADgB;AAE9BC,qBAAmB,oCAFW;AAG9BzB,gBAAc,gBAHgB;AAI9BI,2CAAyC,2CAJX;AAK9BG,4CAA0C,4CALZ;AAM9BmB,aAAW,4BANmB;AAO9Bd,oBAAkB,oBAPY;AAQ9Be,uBAAqB,sCARS;AAS9BC,gCAA8B,+CATA;AAU9BC,mCAAiC,kDAVH;AAW9BC,6BAA2B,4CAXG;AAY9BX,+BAA6B;AAZC,CAAnB","names":["Object","enumerable","get","sha3","v","type","value","hashIdentifier","identifier","salt","exports","getAttestationMessageToSignFromIdentifier","account","messageHash","getAttestationMessageToSignFromPhoneNumber","phoneNumber","phoneSalt","attestations_1","PHONE_NUMBER","attestToIdentifier","privateKey","issuer","signatureUtils_1","signMessage","r","s","extractSecurityCodeWithPrefix","message","matches","match","length","IdentifierType","getIdentifierPrefix","base64ToHex","sanitizeMessageBase64","messageContainsAttestationCode","extractAttestationCodeFromMessage","isAccountConsideredVerified"],"sourceRoot":"","sources":["../src/attestations.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}