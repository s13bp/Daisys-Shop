{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSolidityStringArray = exports.stringToBoolean = void 0;\n\nvar stringToBoolean = function (inputString) {\n  var lowercasedInput = inputString.toLowerCase().trim();\n\n  if (lowercasedInput === 'true') {\n    return true;\n  } else if (lowercasedInput === 'false') {\n    return false;\n  }\n\n  throw new Error(\"Unable to parse '\" + inputString + \"' as boolean\");\n};\n\nexports.stringToBoolean = stringToBoolean;\n/**\n * Parses an \"array of strings\" that is returned from a Solidity function\n *\n * @param stringLengths length of each string in bytes\n * @param data 0x-prefixed, hex-encoded string data in utf-8 bytes\n */\n\nvar parseSolidityStringArray = function (stringLengths, data) {\n  if (data === null) {\n    data = '0x';\n  }\n\n  var ret = [];\n  var offset = 0; // @ts-ignore\n\n  var rawData = Buffer.from(data.slice(2), 'hex'); // tslint:disable-next-line:prefer-for-of\n\n  for (var i = 0; i < stringLengths.length; i++) {\n    var string = rawData.toString('utf-8', offset, offset + stringLengths[i]);\n    offset += stringLengths[i];\n    ret.push(string);\n  }\n\n  return ret;\n};\n\nexports.parseSolidityStringArray = parseSolidityStringArray;","map":{"version":3,"mappings":";;;;;;;AAAO,IAAMA,eAAe,GAAG,UAACC,WAAD,EAAoB;AACjD,MAAMC,eAAe,GAAGD,WAAW,CAACE,WAAZ,GAA0BC,IAA1B,EAAxB;;AACA,MAAIF,eAAe,KAAK,MAAxB,EAAgC;AAC9B,WAAO,IAAP;AACD,GAFD,MAEO,IAAIA,eAAe,KAAK,OAAxB,EAAiC;AACtC,WAAO,KAAP;AACD;;AACD,QAAM,IAAIG,KAAJ,CAAU,sBAAoBJ,WAApB,GAA+B,cAAzC,CAAN;AACD,CARM;;AAAMK,0BAAeN,eAAf;AAUb;;;;;;;AAMO,IAAMO,wBAAwB,GAAG,UAACC,aAAD,EAA0BC,IAA1B,EAAsC;AAC5E,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBA,QAAI,GAAG,IAAP;AACD;;AACD,MAAMC,GAAG,GAAa,EAAtB;AACA,MAAIC,MAAM,GAAG,CAAb,CAL4E,CAM5E;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACM,KAAL,CAAW,CAAX,CAAZ,EAA2B,KAA3B,CAAhB,CAP4E,CAQ5E;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,aAAa,CAACS,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAME,MAAM,GAAGN,OAAO,CAACO,QAAR,CAAiB,OAAjB,EAA0BR,MAA1B,EAAkCA,MAAM,GAAGH,aAAa,CAACQ,CAAD,CAAxD,CAAf;AACAL,UAAM,IAAIH,aAAa,CAACQ,CAAD,CAAvB;AACAN,OAAG,CAACU,IAAJ,CAASF,MAAT;AACD;;AACD,SAAOR,GAAP;AACD,CAfM;;AAAMJ,mCAAwBC,wBAAxB","names":["stringToBoolean","inputString","lowercasedInput","toLowerCase","trim","Error","exports","parseSolidityStringArray","stringLengths","data","ret","offset","rawData","Buffer","from","slice","i","length","string","toString","push"],"sourceRoot":"","sources":["../src/parsing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}