{"ast":null,"code":"var _slicedToArray = require(\"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar Account = require(\"./account\");\n\nvar Nat = require(\"./nat\");\n\nvar Bytes = require(\"./bytes\");\n\nvar RLP = require(\"./rlp\");\n\nvar keccak256 = require(\"./hash\").keccak256; // EthereumRPC, IncompleteTransaction -> Promise Transaction\n\n\nvar addDefaults = function addDefaults(rpc, tx) {\n  var baseDefaults = [tx.chainId || rpc(\"net_version\", []), tx.gasPrice || rpc(\"eth_gasPrice\", []), tx.nonce || rpc(\"eth_getTransactionCount\", [tx.from, \"latest\"]), tx.value || \"0x0\", tx.data || \"0x\"];\n\n  var noAddress = function noAddress(address) {\n    return !address || address === \"\" || address === \"0x\";\n  };\n\n  return Promise.all(baseDefaults).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 5),\n        chainIdNum = _ref2[0],\n        gasPrice = _ref2[1],\n        nonce = _ref2[2],\n        value = _ref2[3],\n        data = _ref2[4];\n\n    var chainId = Nat.fromNumber(chainIdNum);\n    var gasEstimator = tx.gas ? Promise.resolve(null) : rpc(\"eth_estimateGas\", [{\n      from: noAddress(tx.from) ? null : tx.from,\n      to: noAddress(tx.to) ? null : tx.to,\n      value: tx.value,\n      nonce: tx.nonce,\n      data: tx.data\n    }]);\n    return gasEstimator.then(function (gasEstimate) {\n      if (gasEstimate.error) {\n        throw gasEstimate.error;\n      }\n\n      return {\n        chainId: chainId,\n        from: noAddress(tx.from) ? \"0x\" : tx.from.toLowerCase(),\n        to: noAddress(tx.to) ? \"0x\" : tx.to.toLowerCase(),\n        gasPrice: gasPrice,\n        gas: tx.gas ? tx.gas : Nat.div(Nat.mul(gasEstimate, \"0x6\"), \"0x5\"),\n        nonce: nonce,\n        value: value,\n        data: data ? data.toLowerCase() : null\n      };\n    });\n  });\n}; // Transaction -> Bytes\n\n\nvar signingData = function signingData(tx) {\n  return RLP.encode([Bytes.fromNat(tx.nonce), Bytes.fromNat(tx.gasPrice), Bytes.fromNat(tx.gas), tx.to ? tx.to.toLowerCase() : \"0x\", Bytes.fromNat(tx.value), tx.data, Bytes.fromNat(tx.chainId || \"0x1\"), \"0x\", \"0x\"]);\n}; // Transaction, Account -> Bytes\n\n\nvar sign = function sign(tx, account) {\n  var data = signingData(tx);\n  var signature = Account.makeSigner(Nat.toNumber(tx.chainId || \"0x1\") * 2 + 35)(keccak256(data), account.privateKey);\n  var rawTransaction = RLP.decode(data).slice(0, 6).concat(Account.decodeSignature(signature));\n  return RLP.encode(rawTransaction);\n}; // Bytes -> Address\n\n\nvar recover = function recover(rawTransaction) {\n  var values = RLP.decode(rawTransaction);\n  var signature = Account.encodeSignature(values.slice(6, 9));\n  var recovery = Bytes.toNumber(values[6]);\n  var extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), \"0x\", \"0x\"];\n  var data = values.slice(0, 6).concat(extraData);\n  var dataHex = RLP.encode(data);\n  return Account.recover(keccak256(dataHex), signature);\n};\n\nmodule.exports = {\n  addDefaults: addDefaults,\n  signingData: signingData,\n  sign: sign,\n  recover: recover\n};","map":{"version":3,"sources":["/Users/crypto/Daisys/node_modules/eth-lib/lib/transaction.js"],"names":["Account","require","Nat","Bytes","RLP","keccak256","addDefaults","rpc","tx","baseDefaults","chainId","gasPrice","nonce","from","value","data","noAddress","address","Promise","all","then","chainIdNum","fromNumber","gasEstimator","gas","resolve","to","gasEstimate","error","toLowerCase","div","mul","signingData","encode","fromNat","sign","account","signature","makeSigner","toNumber","privateKey","rawTransaction","decode","slice","concat","decodeSignature","recover","values","encodeSignature","recovery","extraData","dataHex","module","exports"],"mappings":"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","sourcesContent":["const Account = require(\"./account\");\nconst Nat = require(\"./nat\");\nconst Bytes = require(\"./bytes\");\nconst RLP = require(\"./rlp\");\nconst keccak256 = require(\"./hash\").keccak256;\n\n// EthereumRPC, IncompleteTransaction -> Promise Transaction\nconst addDefaults = (rpc, tx) => {\n  var baseDefaults = [tx.chainId || rpc(\"net_version\", []), tx.gasPrice || rpc(\"eth_gasPrice\", []), tx.nonce || rpc(\"eth_getTransactionCount\", [tx.from, \"latest\"]), tx.value || \"0x0\", tx.data || \"0x\"];\n  const noAddress = address => !address || address === \"\" || address === \"0x\";\n  return Promise.all(baseDefaults).then(([chainIdNum, gasPrice, nonce, value, data]) => {\n    var chainId = Nat.fromNumber(chainIdNum);\n    var gasEstimator = tx.gas ? Promise.resolve(null) : rpc(\"eth_estimateGas\", [{\n      from: noAddress(tx.from) ? null : tx.from,\n      to: noAddress(tx.to) ? null : tx.to,\n      value: tx.value,\n      nonce: tx.nonce,\n      data: tx.data\n    }]);\n    return gasEstimator.then(gasEstimate => {\n      if (gasEstimate.error) {\n        throw gasEstimate.error;\n      }\n      return {\n        chainId: chainId,\n        from: noAddress(tx.from) ? \"0x\" : tx.from.toLowerCase(),\n        to: noAddress(tx.to) ? \"0x\" : tx.to.toLowerCase(),\n        gasPrice: gasPrice,\n        gas: tx.gas ? tx.gas : Nat.div(Nat.mul(gasEstimate, \"0x6\"), \"0x5\"),\n        nonce: nonce,\n        value: value,\n        data: data ? data.toLowerCase() : null\n      };\n    });\n  });\n};\n\n// Transaction -> Bytes\nconst signingData = tx => {\n  return RLP.encode([Bytes.fromNat(tx.nonce), Bytes.fromNat(tx.gasPrice), Bytes.fromNat(tx.gas), tx.to ? tx.to.toLowerCase() : \"0x\", Bytes.fromNat(tx.value), tx.data, Bytes.fromNat(tx.chainId || \"0x1\"), \"0x\", \"0x\"]);\n};\n\n// Transaction, Account -> Bytes\nconst sign = (tx, account) => {\n  const data = signingData(tx);\n  const signature = Account.makeSigner(Nat.toNumber(tx.chainId || \"0x1\") * 2 + 35)(keccak256(data), account.privateKey);\n  const rawTransaction = RLP.decode(data).slice(0, 6).concat(Account.decodeSignature(signature));\n  return RLP.encode(rawTransaction);\n};\n\n// Bytes -> Address\nconst recover = rawTransaction => {\n  const values = RLP.decode(rawTransaction);\n  const signature = Account.encodeSignature(values.slice(6, 9));\n  const recovery = Bytes.toNumber(values[6]);\n  const extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), \"0x\", \"0x\"];\n  const data = values.slice(0, 6).concat(extraData);\n  const dataHex = RLP.encode(data);\n  return Account.recover(keccak256(dataHex), signature);\n};\n\nmodule.exports = {\n  addDefaults,\n  signingData,\n  sign,\n  recover\n};"]},"metadata":{},"sourceType":"script"}