{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataEncryptionKeyUtils = exports.deriveDek = exports.decompressPublicKey = exports.compressedPubKey = void 0;\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar account_1 = require(\"./account\");\n\nvar address_1 = require(\"./address\");\n\nvar ec = new elliptic_1.ec('secp256k1');\n/**\n * Turns a private key to a compressed public key (hex string with hex leader).\n *\n * @param {Buffer} privateKey Private key.\n * @returns {string} Corresponding compessed public key in hex encoding with '0x' leader.\n */\n\nfunction compressedPubKey(privateKey) {\n  var key = ec.keyFromPrivate(privateKey);\n  return (0, address_1.ensureLeading0x)(key.getPublic(true, 'hex'));\n}\n\nexports.compressedPubKey = compressedPubKey;\n/**\n * Decompresses a public key and strips out the '0x04' leading constant. This makes\n * any public key suitable to be used with this ECIES implementation.\n *\n * @param publicKey Public key in standard form (with 0x02, 0x03, or 0x04 prefix)\n * @returns Decompresssed public key without prefix.\n */\n\nfunction decompressPublicKey(publicKey) {\n  return Buffer.from(ec.keyFromPublic(publicKey).getPublic(false, 'hex'), 'hex').slice(1);\n}\n\nexports.decompressPublicKey = decompressPublicKey;\n/**\n * Derives a data encryption key from the mnemonic\n *\n * @param {string} privateKey Hex encoded private account key.\n * @returns {Buffer} Comment Encryption Private key.\n */\n\nfunction deriveDek(mnemonic, bip39ToUse) {\n  if (!mnemonic) {\n    throw new Error('Invalid mnemonic');\n  }\n\n  return (0, account_1.generateKeys)(mnemonic, undefined, 1, // The DEK is derived from change index 1, not 0 like the wallet's transaction keys\n  0, bip39ToUse);\n}\n\nexports.deriveDek = deriveDek;\nexports.DataEncryptionKeyUtils = {\n  compressedPubKey: compressedPubKey,\n  decompressPublicKey: decompressPublicKey,\n  deriveDek: deriveDek\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,EAAE,GAAG,IAAIC,aAAJ,CAAO,WAAP,CAAX;AAEA;;;;;;;AAMA,SAAgBC,gBAAhB,CAAiCC,UAAjC,EAAmD;AACjD,MAAMC,GAAG,GAAGJ,EAAE,CAACK,cAAH,CAAkBF,UAAlB,CAAZ;AACA,SAAO,+BAAgBC,GAAG,CAACE,SAAJ,CAAc,IAAd,EAAoB,KAApB,CAAhB,CAAP;AACD;;AAHDC;AAKA;;;;;;;;AAOA,SAAgBC,mBAAhB,CAAoCC,SAApC,EAAqD;AACnD,SAAOC,MAAM,CAACC,IAAP,CAAYX,EAAE,CAACY,aAAH,CAAiBH,SAAjB,EAA4BH,SAA5B,CAAsC,KAAtC,EAA6C,KAA7C,CAAZ,EAAiE,KAAjE,EAAwEO,KAAxE,CAA8E,CAA9E,CAAP;AACD;;AAFDN;AAIA;;;;;;;AAMA,SAAgBO,SAAhB,CAA0BC,QAA1B,EAA4CC,UAA5C,EAA8D;AAC5D,MAAI,CAACD,QAAL,EAAe;AACb,UAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,SAAO,4BACLF,QADK,EAELG,SAFK,EAGL,CAHK,EAGF;AACH,GAJK,EAKLF,UALK,CAAP;AAOD;;AAZDT;AAcaA,iCAAyB;AACpCL,kBAAgB,kBADoB;AAEpCM,qBAAmB,qBAFiB;AAGpCM,WAAS;AAH2B,CAAzB","names":["ec","elliptic_1","compressedPubKey","privateKey","key","keyFromPrivate","getPublic","exports","decompressPublicKey","publicKey","Buffer","from","keyFromPublic","slice","deriveDek","mnemonic","bip39ToUse","Error","undefined"],"sourceRoot":"","sources":["../src/dataEncryptionKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}