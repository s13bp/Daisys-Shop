{"ast":null,"code":"/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nexport default class Eth {\n  constructor(transport) {\n    let scrambleKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"w0w\";\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation(_ref) {\n    let {\n      data\n    } = _ref;\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["splitPath","foreach","EthAppPleaseEnableContractData","remapTransactionRelatedErrors","e","statusCode","Eth","constructor","transport","scrambleKey","decorateAppAPIMethods","getAddress","path","boolDisplay","boolChaincode","paths","buffer","Buffer","alloc","length","forEach","element","index","writeUInt32BE","send","then","response","result","publicKeyLength","addressLength","publicKey","slice","toString","address","chainCode","provideERC20TokenInformation","data","signTransaction","rawTxHex","offset","rawTx","from","toSend","maxChunkSize","chunkSize","copy","push","i","apduResponse","v","r","s","getAppConfiguration","arbitraryDataEnabled","version","signPersonalMessage","messageHex","message"],"sources":["../src/Eth.js"],"sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\"\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then(response => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      e => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      e => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    version: string\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}