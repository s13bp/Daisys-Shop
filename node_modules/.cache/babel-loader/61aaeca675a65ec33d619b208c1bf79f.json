{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zeroValue = exports.structHash = exports.encodeData = exports.typeHash = exports.encodeType = exports.generateTypedDataHash = exports.noString = exports.noNumber = exports.noBool = exports.defined = exports.eip712OptionalSchema = exports.eip712OptionalType = exports.EIP712_BUILTIN_TYPES = exports.EIP712_DYNAMIC_TYPES = exports.EIP712_ATOMIC_TYPES = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar t = __importStar(require(\"io-ts\"));\n\nvar web3_eth_abi_1 = __importDefault(require(\"web3-eth-abi\"));\n/** Array of all EIP-712 atomic type names. */\n\n\nexports.EIP712_ATOMIC_TYPES = ['bytes1', 'bytes32', 'uint8', 'uint256', 'int8', 'int256', 'bool', 'address'];\nexports.EIP712_DYNAMIC_TYPES = ['bytes', 'string'];\nexports.EIP712_BUILTIN_TYPES = exports.EIP712_ATOMIC_TYPES.concat(exports.EIP712_DYNAMIC_TYPES); // Regular expression used to identify and parse EIP-712 array type strings.\n\nvar EIP712_ARRAY_REGEXP = /^(?<memberType>[\\w<>\\[\\]_\\-]+)(\\[(?<fixedLength>\\d+)?\\])$/; // Regular experssion used to identity EIP-712 integer types (e.g. int256, uint256, uint8).\n\nvar EIP712_INT_REGEXP = /^u?int\\d*$/;\n/**\n * Utility to build EIP712Optional<T> types to insert in EIP-712 type arrays.\n * @param typeName EIP-712 string type name. Should be builtin or defined in the EIP712Types\n * structure into which this type will be merged.\n */\n\nvar eip712OptionalType = function (typeName) {\n  var _a;\n\n  return _a = {}, _a[\"Optional<\" + typeName + \">\"] = [{\n    name: 'defined',\n    type: 'bool'\n  }, {\n    name: 'value',\n    type: typeName\n  }], _a;\n};\n\nexports.eip712OptionalType = eip712OptionalType;\n/**\n * Utility to build EIP712Optional<T> schemas for encoding and decoding with io-ts.\n * @param schema io-ts type (a.k.a. schema or codec) describing the inner type.\n */\n\nvar eip712OptionalSchema = function (schema) {\n  return t.type({\n    defined: t.boolean,\n    value: schema\n  });\n};\n\nexports.eip712OptionalSchema = eip712OptionalSchema;\n/** Utility to construct an defined EIP712Optional value with inferred type. */\n\nvar defined = function (value) {\n  return {\n    defined: true,\n    value: value\n  };\n};\n\nexports.defined = defined;\n/** Undefined EIP712Optional type with value type boolean. */\n\nexports.noBool = {\n  defined: false,\n  value: false\n};\n/** Undefined EIP712Optional type with value type number. */\n\nexports.noNumber = {\n  defined: false,\n  value: 0\n};\n/** Undefined EIP712Optional type with value type string. */\n\nexports.noString = {\n  defined: false,\n  value: ''\n};\n/**\n * Generates the EIP712 Typed Data hash for signing\n * @param   typedData An object that conforms to the EIP712TypedData interface\n * @return  A Buffer containing the hash of the typed data.\n */\n\nfunction generateTypedDataHash(typedData) {\n  return (0, ethereumjs_util_1.keccak)(Buffer.concat([Buffer.from('1901', 'hex'), structHash('EIP712Domain', typedData.domain, typedData.types), structHash(typedData.primaryType, typedData.message, typedData.types)]));\n}\n\nexports.generateTypedDataHash = generateTypedDataHash;\n/**\n * Given the primary type, and dictionary of types, this function assembles a sorted list\n * representing the transitive dependency closure of the primary type. (Inclusive of the primary\n * type itself.)\n */\n\nfunction findDependencies(primaryType, types, found) {\n  var e_1, _a;\n\n  var _b;\n\n  if (found === void 0) {\n    found = [];\n  } // If we have aready found the dependencies of this type, or it is a builtin, return early.\n\n\n  if (found.includes(primaryType) || exports.EIP712_BUILTIN_TYPES.includes(primaryType)) {\n    return [];\n  } // If this is an array type, return the results for its member type.\n\n\n  if (EIP712_ARRAY_REGEXP.test(primaryType)) {\n    var match = EIP712_ARRAY_REGEXP.exec(primaryType);\n    var memberType = (_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.memberType;\n    return findDependencies(memberType, types, found);\n  } // If this is not a builtin and is not defined, we cannot correctly construct a type encoding.\n\n\n  if (types[primaryType] === undefined) {\n    throw new Error(\"Unrecognized type \" + primaryType + \" is not included in the EIP-712 type list\");\n  } // Execute a depth-first search to populate the (inclusive) dependencies list.\n  // By the first invarient of this function, the resulting list should not contain duplicates.\n\n\n  var dependencies = [primaryType];\n\n  try {\n    for (var _c = __values(types[primaryType]), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var field = _d.value;\n      dependencies.push.apply(dependencies, __spreadArray([], __read(findDependencies(field.type, types, found.concat(dependencies))), false));\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return dependencies;\n}\n/**\n * Creates a string encoding of the primary type, including all dependencies.\n * E.g. \"Transaction(Person from,Person to,Asset tx)Asset(address token,uint256 amount)Person(address wallet,string name)\"\n */\n\n\nfunction encodeType(primaryType, types) {\n  var e_2, _a;\n\n  var deps = findDependencies(primaryType, types);\n  deps = deps.filter(function (d) {\n    return d !== primaryType;\n  });\n  deps = [primaryType].concat(deps.sort());\n  var result = '';\n\n  try {\n    for (var deps_1 = __values(deps), deps_1_1 = deps_1.next(); !deps_1_1.done; deps_1_1 = deps_1.next()) {\n      var dep = deps_1_1.value;\n      result += dep + \"(\" + types[dep].map(function (_a) {\n        var name = _a.name,\n            type = _a.type;\n        return type + \" \" + name;\n      }).join(',') + \")\";\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (deps_1_1 && !deps_1_1.done && (_a = deps_1.return)) _a.call(deps_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return result;\n}\n\nexports.encodeType = encodeType;\n\nfunction typeHash(primaryType, types) {\n  return (0, ethereumjs_util_1.keccak)(encodeType(primaryType, types));\n}\n\nexports.typeHash = typeHash;\n/** Encodes a single EIP-712 value to a 32-byte buffer */\n\nfunction encodeValue(valueType, value, types) {\n  var _a; // Encode the atomic types as their corresponding soldity ABI type.\n\n\n  if (exports.EIP712_ATOMIC_TYPES.includes(valueType)) {\n    // @ts-ignore TypeScript does not believe encodeParameter exists.\n    var hexEncoded = web3_eth_abi_1.default.encodeParameter(valueType, normalizeValue(valueType, value));\n    return Buffer.from((0, address_1.trimLeading0x)(hexEncoded), 'hex');\n  } // Encode `string` and `bytes` types as their keccak hash.\n\n\n  if (valueType === 'string') {\n    // Converting to Buffer before passing to `keccak` prevents an issue where the string is\n    // interpretted as a hex-encoded string when is starts with 0x.\n    // https://github.com/ethereumjs/ethereumjs-util/blob/7e3be1d97b4e11fbc4924836b8c444e644f643ac/index.js#L155-L183\n    return (0, ethereumjs_util_1.keccak)(Buffer.from(value, 'utf8'));\n  }\n\n  if (valueType === 'bytes') {\n    // Allow the user to use either utf8 (plain string) or hex encoding for their bytes.\n    // Note: keccak throws if the value cannot be converted into a Buffer,\n    return (0, ethereumjs_util_1.keccak)(value);\n  } // Encode structs as its hashStruct (e.g. keccak(typeHash || encodeData(struct)) ).\n\n\n  if (types[valueType] !== undefined) {\n    // tslint:disable-next-line:no-unnecessary-type-assertion.\n    return structHash(valueType, value, types);\n  } // Encode arrays as the hash of the concatenated encoding of the underlying types.\n\n\n  if (EIP712_ARRAY_REGEXP.test(valueType)) {\n    // Note: If a fixed length is provided in the type, it is not checked.\n    var match = EIP712_ARRAY_REGEXP.exec(valueType);\n    var memberType_1 = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.memberType;\n    return (0, ethereumjs_util_1.keccak)(Buffer.concat(value.map(function (member) {\n      return encodeValue(memberType_1, member, types);\n    })));\n  }\n\n  throw new Error(\"Unrecognized or unsupported type in EIP-712 encoding: \" + valueType);\n}\n\nfunction normalizeValue(type, value) {\n  var normalizedValue = EIP712_INT_REGEXP.test(type) && bignumber_js_1.BigNumber.isBigNumber(value) ? value.toString() : value;\n  return normalizedValue;\n}\n/**\n * Constructs the struct encoding of the data as the primary type.\n */\n\n\nfunction encodeData(primaryType, data, types) {\n  var fields = types[primaryType];\n\n  if (fields === undefined) {\n    throw new Error(\"Unrecognized primary type in EIP-712 encoding: \" + primaryType);\n  }\n\n  return Buffer.concat(fields.map(function (field) {\n    return encodeValue(field.type, data[field.name], types);\n  }));\n}\n\nexports.encodeData = encodeData;\n\nfunction structHash(primaryType, data, types) {\n  return (0, ethereumjs_util_1.keccak)(Buffer.concat([typeHash(primaryType, types), encodeData(primaryType, data, types)]));\n}\n\nexports.structHash = structHash;\n/**\n * Produce the zero value for a given type.\n *\n * @remarks\n * All atomic types will encode as the 32-byte zero value. Dynamic types as an empty hash.\n * Dynamic arrays will return an empty array. Fixed length arrays will have members set to zero.\n * Structs will have the values of all fields set to zero recursively.\n *\n * Note that EIP-712 does not specify zero values, and so this is non-standard.\n */\n\nfunction zeroValue(primaryType, types) {\n  var _a, _b;\n\n  if (types === void 0) {\n    types = {};\n  } // If the type is a built-in, return a pre-defined zero value.\n\n\n  if (['bytes', 'bytes1', 'bytes32'].includes(primaryType)) {\n    return Buffer.alloc(0);\n  }\n\n  if (['uint8', 'uint256', 'int8', 'int256'].includes(primaryType)) {\n    return 0;\n  }\n\n  if (primaryType === 'bool') {\n    return false;\n  }\n\n  if (primaryType === 'address') {\n    return address_1.NULL_ADDRESS;\n  }\n\n  if (primaryType === 'string') {\n    return '';\n  } // If the type is an array, return an empty array or an array of the given fixed length.\n\n\n  if (EIP712_ARRAY_REGEXP.test(primaryType)) {\n    var match = EIP712_ARRAY_REGEXP.exec(primaryType);\n    var memberType_2 = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.memberType;\n    var fixedLengthStr = (_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.fixedLength;\n    var fixedLength = fixedLengthStr === undefined ? 0 : parseInt(fixedLengthStr, 10);\n    return __spreadArray([], __read(Array(fixedLength).keys()), false).map(function () {\n      return zeroValue(memberType_2, types);\n    });\n  } // Must be user-defined type. Return an object with all fields set to their zero value.\n\n\n  var fields = types[primaryType];\n\n  if (fields === undefined) {\n    throw new Error(\"Unrecognized primary type for EIP-712 zero value: \" + primaryType);\n  }\n\n  return fields.reduce(function (obj, field) {\n    var _a;\n\n    return __assign(__assign({}, obj), (_a = {}, _a[field.name] = zeroValue(field.type, types), _a));\n  }, {});\n}\n\nexports.zeroValue = zeroValue;","map":{"version":3,"mappings":"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","names":["exports","concat","EIP712_ARRAY_REGEXP","EIP712_INT_REGEXP","eip712OptionalType","typeName","_a","name","type","eip712OptionalSchema","schema","defined","t","boolean","value","generateTypedDataHash","typedData","Buffer","from","structHash","domain","types","primaryType","message","findDependencies","found","includes","test","match","exec","memberType","groups","_b","undefined","Error","dependencies","_d","field","push","apply","__spreadArray","encodeType","deps","filter","d","sort","result","deps_1_1","dep","map","join","typeHash","encodeValue","valueType","hexEncoded","web3_eth_abi_1","encodeParameter","normalizeValue","memberType_1","member","normalizedValue","bignumber_js_1","isBigNumber","toString","encodeData","data","fields","zeroValue","alloc","address_1","memberType_2","fixedLengthStr","fixedLength","parseInt","Array","keys","reduce","obj"],"sourceRoot":"","sources":["../src/sign-typed-data-utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}