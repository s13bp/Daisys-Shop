{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar crypto_1 = require(\"crypto\");\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar secp256k1 = new elliptic_1.ec('secp256k1');\n\nfunction computeSharedSecret(privateKey, publicKey) {\n  var ecdh = (0, crypto_1.createECDH)('secp256k1');\n  ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n  return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\n\nexports.computeSharedSecret = computeSharedSecret;\n\nfunction isCompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 64) {\n    return true;\n  }\n\n  return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\n\nexports.isCompressed = isCompressed;\n\nfunction ensureCompressed(publicKey) {\n  return secp256k1.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\n\nexports.ensureCompressed = ensureCompressed;\n\nfunction ensureUncompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  var uncompressed = secp256k1.keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex').getPublic(false, 'hex');\n  return uncompressed;\n}\n\nexports.ensureUncompressed = ensureUncompressed;\n\nfunction trimUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n    return noLeading0x.slice(2);\n  }\n\n  return noLeading0x;\n}\n\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\n\nfunction ensureUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 128) {\n    return \"04\" + noLeading0x;\n  }\n\n  return noLeading0x;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,SAAS,GAAG,IAAIC,aAAJ,CAAO,WAAP,CAAlB;;AAEA,SAAgBC,mBAAhB,CAAoCC,UAApC,EAAwDC,SAAxD,EAAyE;AACvE,MAAMC,IAAI,GAAG,yBAAW,WAAX,CAAb;AACAA,MAAI,CAACC,aAAL,CAAmBC,MAAM,CAACC,IAAP,CAAY,6BAAcL,UAAd,CAAZ,EAAuC,KAAvC,CAAnB;AACA,SAAOE,IAAI,CAACI,aAAL,CAAmBF,MAAM,CAACC,IAAP,CAAYE,gBAAgB,CAACN,SAAD,CAA5B,EAAyC,KAAzC,CAAnB,CAAP;AACD;;AAJDO;;AAMA,SAAgBC,YAAhB,CAA6BR,SAA7B,EAA8C;AAC5C,MAAMS,WAAW,GAAG,6BAAcT,SAAd,CAApB;;AACA,MAAIS,WAAW,CAACC,MAAZ,KAAuB,EAA3B,EAA+B;AAC7B,WAAO,IAAP;AACD;;AACD,SAAOD,WAAW,CAACC,MAAZ,KAAuB,EAAvB,KAA8BD,WAAW,CAACE,UAAZ,CAAuB,IAAvB,KAAgCF,WAAW,CAACE,UAAZ,CAAuB,IAAvB,CAA9D,CAAP;AACD;;AANDJ;;AAQA,SAAgBD,gBAAhB,CAAiCN,SAAjC,EAAkD;AAChD,SAAOJ,SAAS,CAACgB,aAAV,CAAwBC,wBAAwB,CAACb,SAAD,CAAhD,EAA6D,KAA7D,EAAoEc,SAApE,CAA8E,IAA9E,EAAoF,KAApF,CAAP;AACD;;AAFDP;;AAIA,SAAgBQ,kBAAhB,CAAmCf,SAAnC,EAAoD;AAClD,MAAMS,WAAW,GAAG,6BAAcT,SAAd,CAApB;AACA,MAAMgB,YAAY,GAAGpB,SAAS,CAC3BgB,aADkB,CACJC,wBAAwB,CAACJ,WAAD,CADpB,EACmC,KADnC,EAElBK,SAFkB,CAER,KAFQ,EAED,KAFC,CAArB;AAGA,SAAOE,YAAP;AACD;;AANDT;;AAQA,SAAgBU,sBAAhB,CAAuCjB,SAAvC,EAAwD;AACtD,MAAMS,WAAW,GAAG,6BAAcT,SAAd,CAApB;;AACA,MAAIS,WAAW,CAACC,MAAZ,KAAuB,GAAvB,IAA8BD,WAAW,CAACE,UAAZ,CAAuB,IAAvB,CAAlC,EAAgE;AAC9D,WAAOF,WAAW,CAACS,KAAZ,CAAkB,CAAlB,CAAP;AACD;;AACD,SAAOT,WAAP;AACD;;AANDF;;AAQA,SAASM,wBAAT,CAAkCb,SAAlC,EAAmD;AACjD,MAAMS,WAAW,GAAG,6BAAcT,SAAd,CAApB;;AACA,MAAIS,WAAW,CAACC,MAAZ,KAAuB,GAA3B,EAAgC;AAC9B,WAAO,OAAKD,WAAZ;AACD;;AACD,SAAOA,WAAP;AACD","names":["secp256k1","elliptic_1","computeSharedSecret","privateKey","publicKey","ecdh","setPrivateKey","Buffer","from","computeSecret","ensureCompressed","exports","isCompressed","noLeading0x","length","startsWith","keyFromPublic","ensureUncompressedPrefix","getPublic","ensureUncompressed","uncompressed","trimUncompressedPrefix","slice"],"sourceRoot":"","sources":["../src/ecdh.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}