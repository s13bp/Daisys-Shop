{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationBase = exports.isAccountConsideredVerified = exports.extractAttestationCodeFromMessage = exports.messageContainsAttestationCode = exports.sanitizeMessageBase64 = exports.base64ToHex = exports.hashIdentifier = exports.getIdentifierPrefix = exports.IdentifierType = void 0;\n\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\n\nvar DEFAULT_NUM_ATTESTATIONS_REQUIRED = 3;\nvar DEFAULT_ATTESTATION_THRESHOLD = 0.25; // Supported identifer types for attestations\n\nvar IdentifierType;\n\n(function (IdentifierType) {\n  IdentifierType[IdentifierType[\"PHONE_NUMBER\"] = 0] = \"PHONE_NUMBER\"; // In the future, other types like usernames or emails could go here\n})(IdentifierType = exports.IdentifierType || (exports.IdentifierType = {})); // Each identifer type has a unique prefix to prevent unlikely but possible collisions\n\n\nfunction getIdentifierPrefix(type) {\n  switch (type) {\n    case IdentifierType.PHONE_NUMBER:\n      return 'tel://';\n\n    default:\n      throw new Error('Unsupported Identifier Type');\n  }\n}\n\nexports.getIdentifierPrefix = getIdentifierPrefix;\n\nfunction hashIdentifier(sha3, identifier, type, salt) {\n  switch (type) {\n    case IdentifierType.PHONE_NUMBER:\n      return (0, phoneNumbers_1.getPhoneHash)(sha3, identifier, salt);\n\n    default:\n      throw new Error('Unsupported Identifier Type');\n  }\n}\n\nexports.hashIdentifier = hashIdentifier;\n\nfunction base64ToHex(base64String) {\n  return '0x' + Buffer.from(base64String, 'base64').toString('hex');\n}\n\nexports.base64ToHex = base64ToHex;\n\nfunction sanitizeMessageBase64(base64String) {\n  // Replace occurrences of ¿ with _. Unsure why that is happening right now\n  return base64String.replace(/(¿|§)/gi, '_');\n}\n\nexports.sanitizeMessageBase64 = sanitizeMessageBase64;\nvar attestationCodeRegex = new RegExp(/(.* |^)(?:celo:\\/\\/wallet\\/v\\/)?([a-zA-Z0-9=\\+\\/_-]{87,88})($| .*)/);\n\nfunction messageContainsAttestationCode(message) {\n  return attestationCodeRegex.test(message);\n}\n\nexports.messageContainsAttestationCode = messageContainsAttestationCode;\n\nfunction extractAttestationCodeFromMessage(message) {\n  var sanitizedMessage = sanitizeMessageBase64(message);\n\n  if (!messageContainsAttestationCode(sanitizedMessage)) {\n    return null;\n  }\n\n  var matches = sanitizedMessage.match(attestationCodeRegex);\n\n  if (!matches || matches.length < 3) {\n    return null;\n  }\n\n  return base64ToHex(matches[2]);\n}\n\nexports.extractAttestationCodeFromMessage = extractAttestationCodeFromMessage;\n/**\n * Returns true if an AttestationStat is considered verified using the given factors,\n * or defaults if factors are ommited.\n * @param stats AttestationStat of the account's attestation identitifer, retrievable via lookupIdentitfiers\n * @param numAttestationsRequired Optional number of attestations required.  Will default to\n *  hardcoded value if absent.\n * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n *  default to hardcoded value if absent.\n */\n\nfunction isAccountConsideredVerified(stats, numAttestationsRequired, attestationThreshold) {\n  if (numAttestationsRequired === void 0) {\n    numAttestationsRequired = DEFAULT_NUM_ATTESTATIONS_REQUIRED;\n  }\n\n  if (attestationThreshold === void 0) {\n    attestationThreshold = DEFAULT_ATTESTATION_THRESHOLD;\n  }\n\n  if (!stats) {\n    return {\n      isVerified: false,\n      numAttestationsRemaining: 0,\n      total: 0,\n      completed: 0\n    };\n  }\n\n  var numAttestationsRemaining = numAttestationsRequired - stats.completed;\n  var fractionAttestation = stats.total < 1 ? 0 : stats.completed / stats.total; // 'verified' is a term of convenience to mean that the attestation stats for a\n  // given identifier are beyond a certain threshold of confidence\n\n  var isVerified = numAttestationsRemaining <= 0 && fractionAttestation >= attestationThreshold;\n  return {\n    isVerified: isVerified,\n    numAttestationsRemaining: numAttestationsRemaining,\n    total: stats.total,\n    completed: stats.completed\n  };\n}\n\nexports.isAccountConsideredVerified = isAccountConsideredVerified;\nexports.AttestationBase = {\n  IdentifierType: IdentifierType,\n  getIdentifierPrefix: getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  base64ToHex: base64ToHex,\n  sanitizeMessageBase64: sanitizeMessageBase64,\n  messageContainsAttestationCode: messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: isAccountConsideredVerified\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,IAAMA,iCAAiC,GAAG,CAA1C;AACA,IAAMC,6BAA6B,GAAG,IAAtC,C,CAEA;;AACA,IAAYC,cAAZ;;AAAA,WAAYA,cAAZ,EAA0B;AACxBA,sEADwB,CAExB;AACD,CAHD,EAAYA,cAAc,GAAdC,oDAAc,EAAd,CAAZ,E,CAKA;;;AACA,SAAgBC,mBAAhB,CAAoCC,IAApC,EAAwD;AACtD,UAAQA,IAAR;AACE,SAAKH,cAAc,CAACI,YAApB;AACE,aAAO,QAAP;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AAJJ;AAMD;;AAPDJ;;AASA,SAAgBK,cAAhB,CACEC,IADF,EAEEC,UAFF,EAGEL,IAHF,EAIEM,IAJF,EAIe;AAEb,UAAQN,IAAR;AACE,SAAKH,cAAc,CAACI,YAApB;AACE,aAAO,iCAAaG,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,CAAP;;AACF;AACE,YAAM,IAAIJ,KAAJ,CAAU,6BAAV,CAAN;AAJJ;AAMD;;AAZDJ;;AAcA,SAAgBS,WAAhB,CAA4BC,YAA5B,EAAgD;AAC9C,SAAO,OAAOC,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0B,QAA1B,EAAoCG,QAApC,CAA6C,KAA7C,CAAd;AACD;;AAFDb;;AAIA,SAAgBc,qBAAhB,CAAsCJ,YAAtC,EAA0D;AACxD;AACA,SAAOA,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgC,GAAhC,CAAP;AACD;;AAHDf;AAKA,IAAMgB,oBAAoB,GAAG,IAAIC,MAAJ,CAC3B,oEAD2B,CAA7B;;AAIA,SAAgBC,8BAAhB,CAA+CC,OAA/C,EAA8D;AAC5D,SAAOH,oBAAoB,CAACI,IAArB,CAA0BD,OAA1B,CAAP;AACD;;AAFDnB;;AAIA,SAAgBqB,iCAAhB,CAAkDF,OAAlD,EAAiE;AAC/D,MAAMG,gBAAgB,GAAGR,qBAAqB,CAACK,OAAD,CAA9C;;AAEA,MAAI,CAACD,8BAA8B,CAACI,gBAAD,CAAnC,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,MAAMC,OAAO,GAAGD,gBAAgB,CAACE,KAAjB,CAAuBR,oBAAvB,CAAhB;;AACA,MAAI,CAACO,OAAD,IAAYA,OAAO,CAACE,MAAR,GAAiB,CAAjC,EAAoC;AAClC,WAAO,IAAP;AACD;;AACD,SAAOhB,WAAW,CAACc,OAAO,CAAC,CAAD,CAAR,CAAlB;AACD;;AAZDvB;AA0BA;;;;;;;;;;AASA,SAAgB0B,2BAAhB,CACEC,KADF,EAEEC,uBAFF,EAGEC,oBAHF,EAG8D;AAD5D;AAAAD;AAAmE;;AACnE;AAAAC;AAA4D;;AAE5D,MAAI,CAACF,KAAL,EAAY;AACV,WAAO;AACLG,gBAAU,EAAE,KADP;AAELC,8BAAwB,EAAE,CAFrB;AAGLC,WAAK,EAAE,CAHF;AAILC,eAAS,EAAE;AAJN,KAAP;AAMD;;AACD,MAAMF,wBAAwB,GAAGH,uBAAuB,GAAGD,KAAK,CAACM,SAAjE;AACA,MAAMC,mBAAmB,GAAGP,KAAK,CAACK,KAAN,GAAc,CAAd,GAAkB,CAAlB,GAAsBL,KAAK,CAACM,SAAN,GAAkBN,KAAK,CAACK,KAA1E,CAX4D,CAY5D;AACA;;AACA,MAAMF,UAAU,GAAGC,wBAAwB,IAAI,CAA5B,IAAiCG,mBAAmB,IAAIL,oBAA3E;AAEA,SAAO;AACLC,cAAU,YADL;AAELC,4BAAwB,0BAFnB;AAGLC,SAAK,EAAEL,KAAK,CAACK,KAHR;AAILC,aAAS,EAAEN,KAAK,CAACM;AAJZ,GAAP;AAMD;;AAzBDjC;AA2BaA,0BAAkB;AAC7BD,gBAAc,gBADe;AAE7BE,qBAAmB,qBAFU;AAG7BI,gBAAc,gBAHe;AAI7BI,aAAW,aAJkB;AAK7BK,uBAAqB,uBALQ;AAM7BI,gCAA8B,gCAND;AAO7BG,mCAAiC,mCAPJ;AAQ7BK,6BAA2B;AARE,CAAlB","names":["DEFAULT_NUM_ATTESTATIONS_REQUIRED","DEFAULT_ATTESTATION_THRESHOLD","IdentifierType","exports","getIdentifierPrefix","type","PHONE_NUMBER","Error","hashIdentifier","sha3","identifier","salt","base64ToHex","base64String","Buffer","from","toString","sanitizeMessageBase64","replace","attestationCodeRegex","RegExp","messageContainsAttestationCode","message","test","extractAttestationCodeFromMessage","sanitizedMessage","matches","match","length","isAccountConsideredVerified","stats","numAttestationsRequired","attestationThreshold","isVerified","numAttestationsRemaining","total","completed","fractionAttestation"],"sourceRoot":"","sources":["../src/attestations.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}