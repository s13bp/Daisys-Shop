{"ast":null,"code":"import _objectSpread from \"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nvar devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(_firwareVersion) {\n      return 4 * 1024;\n    }\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(firmwareVersion) {\n      return semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n    }\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(_firwareVersion) {\n      return 4 * 1024;\n    },\n    bluetoothSpec: [{\n      // this is the legacy one (prototype version). we will eventually drop it.\n      serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n      notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n      writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n    }, {\n      serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n      notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n      writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n    }]\n  }\n};\nvar productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\"\n}; // $FlowFixMe\n\nvar devicesList = Object.values(devices);\n/**\n *\n */\n\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\n\nexport var getDeviceModel = function getDeviceModel(id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n *\n */\n\nexport var identifyUSBProductId = function identifyUSBProductId(usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function identifyProductName(productName) {\n  var productId = productMap[productName];\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productId;\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\n\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = _objectSpread({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\n\n\nexport var getBluetoothServiceUuids = function getBluetoothServiceUuids() {\n  return bluetoothServices;\n};\n/**\n *\n */\n\nexport var getInfosForServiceUuid = function getInfosForServiceUuid(uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};\n/**\n *\n */","map":{"version":3,"mappings":"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","names":["semver","IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","devices","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","blockSize","getBlockSize","_firwareVersion","nanoS","firmwareVersion","lt","coerce","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","productMap","Blue","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyUSBProductId","usbProductId","legacy","find","d","mm","deviceModel","identifyProductName","productId","bluetoothServices","serviceUuidToInfos","i","length","spec","push","replace","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"sources":["../src/index.js"],"sourcesContent":["// @flow\n\nimport semver from \"semver\";\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (firmwareVersion: string): number =>\n      semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024,\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\",\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n      },\n    ],\n  },\n};\n\nconst productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\",\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel => {\n  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find((d) => d.productIdMM === mm);\n  return deviceModel;\n};\n\nexport const identifyProductName = (productName: string): ?DeviceModel => {\n  const productId = productMap[productName];\n  const deviceModel = devicesList.find((d) => d.id === productId);\n\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos,\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModelId = $Keys<typeof devices>;\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: DeviceModelId,\n  productName: string,\n  productIdMM: number,\n  legacyUsbProductId: number,\n  usbOnly: boolean,\n  memorySize: number,\n  // blockSize: number, // THIS FIELD IS DEPRECATED, use getBlockSize\n  getBlockSize: (firmwareVersion: string) => number,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string,\n  }>,\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string,\n};\n"]},"metadata":{},"sourceType":"module"}