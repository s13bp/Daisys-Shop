{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccountClaim = exports.AccountClaimType = exports.AccountClaimTypeH = void 0;\n\nvar address_1 = require(\"@celo/utils/lib/address\");\n\nvar io_1 = require(\"@celo/utils/lib/io\");\n\nvar Either_1 = require(\"fp-ts/lib/Either\");\n\nvar t = __importStar(require(\"io-ts\"));\n\nvar types_1 = require(\"./types\"); // Provide the type minus the validation that the public key and address are derived from the same private key\n\n\nexports.AccountClaimTypeH = t.type({\n  type: t.literal(types_1.ClaimTypes.ACCOUNT),\n  timestamp: types_1.TimestampType,\n  address: io_1.AddressType,\n  // io-ts way of defining optional key-value pair\n  publicKey: t.union([t.undefined, io_1.PublicKeyType])\n});\nexports.AccountClaimType = new t.Type('AccountClaimType', exports.AccountClaimTypeH.is, function (unknownValue, context) {\n  return Either_1.either.chain(exports.AccountClaimTypeH.validate(unknownValue, context), function (claim) {\n    if (claim.publicKey === undefined) {\n      return t.success(claim);\n    }\n\n    var derivedAddress = (0, address_1.publicKeyToAddress)(claim.publicKey);\n    return derivedAddress === claim.address ? t.success(claim) : t.failure(claim, context, 'public key did not match the address in the claim');\n  });\n}, function (x) {\n  return x;\n});\n\nvar createAccountClaim = function createAccountClaim(address, publicKey) {\n  var claim = {\n    timestamp: (0, types_1.now)(),\n    type: types_1.ClaimTypes.ACCOUNT,\n    address: address,\n    publicKey: publicKey\n  };\n  var parsedClaim = exports.AccountClaimType.decode(claim);\n\n  if ((0, Either_1.isLeft)(parsedClaim)) {\n    throw new Error(\"A valid claim could not be created\");\n  }\n\n  return parsedClaim.right;\n};\n\nexports.createAccountClaim = createAccountClaim;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA,iC,CAEA;;;AACaA,4BAAoBC,CAAC,CAACC,IAAF,CAAO;AACtCA,MAAI,EAAED,CAAC,CAACE,OAAF,CAAUC,mBAAWC,OAArB,CADgC;AAEtCC,WAAS,EAAEF,qBAF2B;AAGtCG,SAAO,EAAEC,gBAH6B;AAItC;AACAC,WAAS,EAAER,CAAC,CAACS,KAAF,CAAQ,CAACT,CAAC,CAACU,SAAH,EAAcH,kBAAd,CAAR;AAL2B,CAAP,CAApB;AAQAR,2BAAmB,IAAIC,CAAC,CAACW,IAAN,CAC9B,kBAD8B,EAE9BZ,0BAAkBa,EAFY,EAG9B,UAACC,YAAD,EAAeC,OAAf,EAAsB;AACpB,yBAAOC,KAAP,CAAahB,0BAAkBiB,QAAlB,CAA2BH,YAA3B,EAAyCC,OAAzC,CAAb,EAAgE,UAACG,KAAD,EAAM;AACpE,QAAIA,KAAK,CAACT,SAAN,KAAoBE,SAAxB,EAAmC;AACjC,aAAOV,CAAC,CAACkB,OAAF,CAAUD,KAAV,CAAP;AACD;;AACD,QAAME,cAAc,GAAG,kCAAmBF,KAAK,CAACT,SAAzB,CAAvB;AACA,WAAOW,cAAc,KAAKF,KAAK,CAACX,OAAzB,GACHN,CAAC,CAACkB,OAAF,CAAUD,KAAV,CADG,GAEHjB,CAAC,CAACoB,OAAF,CAAUH,KAAV,EAAiBH,OAAjB,EAA0B,mDAA1B,CAFJ;AAGD,GARD;AAQE,CAZ0B,EAa9B,UAACO,CAAD,EAAE;AAAK;AAAC,CAbsB,CAAnB;;AAkBN,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAChB,OAAD,EAAkBE,SAAlB,EAAoC;AACpE,MAAMS,KAAK,GAAG;AACZZ,aAAS,EAAE,kBADC;AAEZJ,QAAI,EAAEE,mBAAWC,OAFL;AAGZE,WAAO,SAHK;AAIZE,aAAS;AAJG,GAAd;AAOA,MAAMe,WAAW,GAAGxB,yBAAiByB,MAAjB,CAAwBP,KAAxB,CAApB;;AAEA,MAAI,qBAAOM,WAAP,CAAJ,EAAyB;AACvB,UAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,SAAOF,WAAW,CAACG,KAAnB;AACD,CAfM;;AAAM3B,6BAAkBuB,kBAAlB","names":["exports","t","type","literal","types_1","ACCOUNT","timestamp","address","io_1","publicKey","union","undefined","Type","is","unknownValue","context","chain","validate","claim","success","derivedAddress","failure","x","createAccountClaim","parsedClaim","decode","Error","right"],"sourceRoot":"","sources":["../../../src/identity/claims/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}