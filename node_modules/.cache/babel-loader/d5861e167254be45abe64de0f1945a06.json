{"ast":null,"code":"var _jsxFileName = \"/Users/crypto/GETSCHWIFTY/src/pages/itemRelist/itemRelist.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './itemRelist.css';\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { useParams } from \"react-router\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useMarketContract } from \"../../hooks/useMarketContract\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemRelist = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const marketplace = useMarketContract();\n  const [nftData, setNftData] = useState({});\n  const {\n    address,\n    performActions\n  } = useContractKit();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (marketplace) fetchNft();\n  }, [marketplace]); // const [newPrice, setNewPrice] = useState(0);\n\n  const listNFTForSale = async () => {\n    await performActions(async kit => {\n      if (!nftData.price) {\n        return alert(\"Enter a valid price\");\n      }\n\n      const priceFormatted = ethers.utils.parseUnits(nftData.price, 'ether').toString();\n      let transaction = await marketplace.methods.resellToken(id, priceFormatted).send({\n        from: address\n      });\n      alert(\"NFT listed for sale!\");\n      navigate(\"/\");\n    });\n  };\n\n  const fetchNft = async () => {\n    const tokenUri = await marketplace.methods.tokenURI(id).call();\n    let meta = await axios.get(tokenUri);\n    meta.data.owner = await marketplace.methods.getNftOwner(id).call();\n    setNftData(meta.data);\n  };\n\n  const purchaseNft = async () => {\n    try {\n      await performActions(async kit => {\n        const {\n          defaultAccount\n        } = kit;\n        /* user will be prompted to pay the asking proces to complete the transaction */\n\n        const price = ethers.utils.parseUnits(nftData.price, 'ether').toString();\n        const transaction = await marketplace.methods.createMarketSale(id).send({\n          from: defaultAccount,\n          value: price\n        });\n        alert(`You have successfully purchased this NFT!`);\n        navigate(`/profile`);\n      });\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item section__padding\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: nftData.image,\n        alt: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: nftData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Costs \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [nftData.price, \" CUSD\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 30\n          }, this), \" .\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-creator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Creater\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [nftData.owner || \"Anonymous\", \"  \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-detail\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: nftData.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), nftData.owner == address ? /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"writeForm\",\n        autoComplete: \"off\",\n        onSubmit: e => e.preventDefault(),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formGroup\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary-btn\",\n            onClick: listNFTForSale,\n            children: \"Relist NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-content-buy\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: purchaseNft,\n          children: [\"Buy For \", nftData.price, \" CUSD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ItemRelist, \"Y8sFq9jtBXlZNR4yJf9dWqy7Ilo=\", false, function () {\n  return [useParams, useMarketContract, useContractKit, useNavigate];\n});\n\n_c = ItemRelist;\nexport default ItemRelist;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemRelist\");","map":{"version":3,"sources":["/Users/crypto/GETSCHWIFTY/src/pages/itemRelist/itemRelist.jsx"],"names":["React","useEffect","useState","axios","ethers","useParams","useContractKit","useMarketContract","useNavigate","ItemRelist","id","marketplace","nftData","setNftData","address","performActions","navigate","fetchNft","listNFTForSale","kit","price","alert","priceFormatted","utils","parseUnits","toString","transaction","methods","resellToken","send","from","tokenUri","tokenURI","call","meta","get","data","owner","getNftOwner","purchaseNft","defaultAccount","createMarketSale","value","error","console","log","image","name","description","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM;AAACC,IAAAA;AAAD,MAAOL,SAAS,EAAtB;AACA,QAAMM,WAAW,GAAGJ,iBAAiB,EAArC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAACY,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAA4BT,cAAc,EAAhD;AAEA,QAAMU,QAAQ,GAAGR,WAAW,EAA5B;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,WAAJ,EAAiBM,QAAQ;AAC5B,GAFQ,EAEN,CAACN,WAAD,CAFM,CAAT,CARqB,CAarB;;AACA,QAAMO,cAAc,GAAG,YAAY;AAE/B,UAAMH,cAAc,CAAC,MAAOI,GAAP,IAAe;AAChC,UAAI,CAACP,OAAO,CAACQ,KAAb,EAAoB;AAChB,eAAOC,KAAK,CAAC,qBAAD,CAAZ;AACH;;AACD,YAAMC,cAAc,GAAIlB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwBZ,OAAO,CAACQ,KAAhC,EAAuC,OAAvC,CAAD,CAAkDK,QAAlD,EAAvB;AACA,UAAIC,WAAW,GAAG,MAAMf,WAAW,CAACgB,OAAZ,CAAoBC,WAApB,CAAgClB,EAAhC,EAAoCY,cAApC,EAAoDO,IAApD,CAAyD;AAC7EC,QAAAA,IAAI,EAAEhB;AADuE,OAAzD,CAAxB;AAGAO,MAAAA,KAAK,CAAC,sBAAD,CAAL;AAEAL,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH,KAXmB,CAApB;AAeH,GAjBD;;AAmBA,QAAMC,QAAQ,GAAG,YAAY;AACzB,UAAMc,QAAQ,GAAG,MAAMpB,WAAW,CAACgB,OAAZ,CAAoBK,QAApB,CAA6BtB,EAA7B,EAAiCuB,IAAjC,EAAvB;AACA,QAAIC,IAAI,GAAG,MAAM/B,KAAK,CAACgC,GAAN,CAAUJ,QAAV,CAAjB;AACAG,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAV,GAAmB,MAAM1B,WAAW,CAACgB,OAAZ,CAAoBW,WAApB,CAAgC5B,EAAhC,EAAoCuB,IAApC,EAAzB;AACApB,IAAAA,UAAU,CAACqB,IAAI,CAACE,IAAN,CAAV;AACH,GALD;;AAOA,QAAMG,WAAW,GAAG,YAAY;AAE5B,QAAI;AAGA,YAAMxB,cAAc,CAAC,MAAOI,GAAP,IAAe;AAChC,cAAM;AAACqB,UAAAA;AAAD,YAAmBrB,GAAzB;AACA;;AACA,cAAMC,KAAK,GAAIhB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwBZ,OAAO,CAACQ,KAAhC,EAAuC,OAAvC,CAAD,CAAkDK,QAAlD,EAAd;AACA,cAAMC,WAAW,GAAG,MAAMf,WAAW,CAACgB,OAAZ,CAAoBc,gBAApB,CAAqC/B,EAArC,EAAyCmB,IAAzC,CAA8C;AACpEC,UAAAA,IAAI,EAAEU,cAD8D;AAEpEE,UAAAA,KAAK,EAAEtB;AAF6D,SAA9C,CAA1B;AAIAC,QAAAA,KAAK,CAAE,2CAAF,CAAL;AACAL,QAAAA,QAAQ,CAAE,UAAF,CAAR;AACH,OAVmB,CAApB;AAWH,KAdD,CAcE,OAAO2B,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,QAAAA;AAAD,OAAZ;AACH;AAGJ,GArBD;;AAwBA,sBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAK,QAAA,GAAG,EAAE/B,OAAO,CAACkC,KAAlB;AAAyB,QAAA,GAAG,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACI;AAAA,oBAAKlC,OAAO,CAACmC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,4CAAS;AAAA,uBAAOnC,OAAO,CAACQ,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAA,iCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,iCAEI;AAAA,uBAAIR,OAAO,CAACyB,KAAR,IAAiB,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAYI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACI;AAAA,oBAAIzB,OAAO,CAACoC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ,EAgBKpC,OAAO,CAACyB,KAAR,IAAiBvB,OAAjB,gBACG;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,YAAY,EAAC,KAAzC;AAA+C,QAAA,QAAQ,EAAGmC,CAAD,IAAKA,CAAC,CAACC,cAAF,EAA9D;AAAA,+BAEI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,iCAII;AAAQ,YAAA,SAAS,EAAC,aAAlB;AACQ,YAAA,OAAO,EAAEhC,cADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADH,gBAiBG;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,OAAO,EAAEqB,WAAzC;AAAA,iCAA+D3B,OAAO,CAACQ,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAjCR;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+CH,CA/GD;;GAAMX,U;UAEWJ,S,EACOE,iB,EAEcD,c,EAEjBE,W;;;KAPfC,U;AAiHN,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './itemRelist.css'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst ItemRelist = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace) fetchNft()\n    }, [marketplace]);\n\n\n    // const [newPrice, setNewPrice] = useState(0);\n    const listNFTForSale = async () => {\n\n        await performActions(async (kit) => {\n            if (!nftData.price) {\n                return alert(\"Enter a valid price\")\n            }\n            const priceFormatted = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            let transaction = await marketplace.methods.resellToken(id, priceFormatted).send({\n                from: address\n            })\n            alert(\"NFT listed for sale!\")\n\n            navigate(\"/\")\n        })\n\n\n\n    }\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        let meta = await axios.get(tokenUri)\n        meta.data.owner =  await marketplace.methods.getNftOwner(id).call()\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n            await performActions(async (kit) => {\n                const {defaultAccount} = kit;\n                /* user will be prompted to pay the asking proces to complete the transaction */\n                const price = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n                const transaction = await marketplace.methods.createMarketSale(id).send({\n                    from: defaultAccount,\n                    value: price\n                })\n                alert(`You have successfully purchased this NFT!`)\n                navigate(`/profile`)\n            })\n        } catch (error) {\n            console.log({error});\n        }\n\n\n    }\n\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>{nftData.name}</h1>\n                    <p>Costs <span>{nftData.price} CUSD</span> .</p>\n                </div>\n                <div className=\"item-content-creator\">\n                    <div><p>Creater</p></div>\n                    <div>\n                        \n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    <p>{nftData.description}</p>\n                </div>\n\n                {nftData.owner == address ?\n                    <form className='writeForm' autoComplete='off' onSubmit={(e)=>e.preventDefault()}>\n\n                        <div className=\"formGroup\">\n                            {/*<input onChange={(e) => setNewPrice(e.target.value)} type=\"text\"*/}\n                            {/*       placeholder='New Price of NFT'*/}\n                            {/*       autoFocus={true}/>*/}\n                            <button className=\"primary-btn\"\n                                    onClick={listNFTForSale}>Relist NFT\n                            </button>\n\n                        </div>\n\n\n                    </form>\n\n                    :\n                    <div className=\"item-content-buy\">\n                        <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                        {/*<button className=\"secondary-btn\">Make Offer</button>*/}\n                    </div>\n\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default ItemRelist;\n"]},"metadata":{},"sourceType":"module"}