{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhoneNumberUtils = exports.getExampleNumber = exports.parsePhoneNumber = exports.isE164NumberStrict = exports.getE164Number = exports.getE164DisplayNumber = exports.getDisplayNumberInternational = exports.getDisplayPhoneNumber = exports.getRegionCodeFromCountryCode = exports.getRegionCode = exports.getCountryCode = exports.getCountryEmoji = exports.getPhoneHash = exports.isE164Number = exports.anonymizedPhone = void 0;\n\nvar phoneNumbers_1 = require(\"@celo/base/lib/phoneNumbers\");\n\nvar country_data_1 = __importDefault(require(\"country-data\"));\n\nvar google_libphonenumber_1 = require(\"google-libphonenumber\");\n\nvar web3_utils_1 = require(\"web3-utils\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar phoneNumbers_2 = require(\"@celo/base/lib/phoneNumbers\");\n\nObject.defineProperty(exports, \"anonymizedPhone\", {\n  enumerable: true,\n  get: function () {\n    return phoneNumbers_2.anonymizedPhone;\n  }\n});\nObject.defineProperty(exports, \"isE164Number\", {\n  enumerable: true,\n  get: function () {\n    return phoneNumbers_2.isE164Number;\n  }\n});\n\nvar sha3 = function (v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\n\nvar getPhoneHash = function (phoneNumber, salt) {\n  return (0, phoneNumbers_1.getPhoneHash)(sha3, phoneNumber, salt);\n};\n\nexports.getPhoneHash = getPhoneHash;\nvar phoneUtil = google_libphonenumber_1.PhoneNumberUtil.getInstance();\nvar MIN_PHONE_LENGTH = 4;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getCountryEmoji(e164PhoneNumber, countryCodePossible, regionCodePossible) {\n  // The country code and region code can both be passed in, or it can be inferred from the e164PhoneNumber\n  var countryCode;\n  var regionCode;\n  countryCode = countryCodePossible;\n  regionCode = regionCodePossible;\n\n  if (!countryCode || !regionCode) {\n    countryCode = getCountryCode(e164PhoneNumber);\n    regionCode = getRegionCode(e164PhoneNumber);\n  }\n\n  var countries = country_data_1.default.lookup.countries({\n    countryCallingCodes: \"+\" + countryCode\n  });\n  var userCountryArray = countries.filter(function (c) {\n    return c.alpha2 === regionCode;\n  });\n  var country = userCountryArray.length > 0 ? userCountryArray[0] : undefined;\n  return country ? country.emoji : '';\n}\n\nexports.getCountryEmoji = getCountryEmoji;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getCountryCode(e164PhoneNumber) {\n  if (!e164PhoneNumber) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.parse(e164PhoneNumber).getCountryCode();\n  } catch (error) {\n    console.debug(\"getCountryCode, number: \" + e164PhoneNumber + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getCountryCode = getCountryCode;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getRegionCode(e164PhoneNumber) {\n  if (!e164PhoneNumber) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.getRegionCodeForNumber(phoneUtil.parse(e164PhoneNumber));\n  } catch (error) {\n    console.debug(\"getRegionCodeForNumber, number: \" + e164PhoneNumber + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getRegionCode = getRegionCode;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getRegionCodeFromCountryCode(countryCode) {\n  if (!countryCode) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.getRegionCodeForCountryCode(parseInt(countryCode, 10));\n  } catch (error) {\n    console.debug(\"getRegionCodeFromCountryCode, countrycode: \" + countryCode + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getRegionCodeFromCountryCode = getRegionCodeFromCountryCode;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getDisplayPhoneNumber(phoneNumber, defaultCountryCode) {\n  var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n\n  if (phoneDetails) {\n    return phoneDetails.displayNumber;\n  } else {\n    // Fallback to input instead of showing nothing for invalid numbers\n    return phoneNumber;\n  }\n}\n\nexports.getDisplayPhoneNumber = getDisplayPhoneNumber;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getDisplayNumberInternational(e164PhoneNumber) {\n  var countryCode = getCountryCode(e164PhoneNumber);\n  var phoneDetails = parsePhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n\n  if (phoneDetails) {\n    return phoneDetails.displayNumberInternational;\n  } else {\n    // Fallback to input instead of showing nothing for invalid numbers\n    return e164PhoneNumber;\n  }\n}\n\nexports.getDisplayNumberInternational = getDisplayNumberInternational;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getE164DisplayNumber(e164PhoneNumber) {\n  var countryCode = getCountryCode(e164PhoneNumber);\n  return getDisplayPhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n}\n\nexports.getE164DisplayNumber = getE164DisplayNumber;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction getE164Number(phoneNumber, defaultCountryCode) {\n  var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n\n  if (phoneDetails && (0, phoneNumbers_1.isE164Number)(phoneDetails.e164Number)) {\n    return phoneDetails.e164Number;\n  } else {\n    return null;\n  }\n}\n\nexports.getE164Number = getE164Number; // Actually runs through the parsing instead of using a regex\n\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction isE164NumberStrict(phoneNumber) {\n  try {\n    var parsedPhoneNumber = phoneUtil.parse(phoneNumber);\n\n    if (!phoneUtil.isValidNumber(parsedPhoneNumber)) {\n      return false;\n    }\n\n    return phoneUtil.format(parsedPhoneNumber, google_libphonenumber_1.PhoneNumberFormat.E164) === phoneNumber;\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.isE164NumberStrict = isE164NumberStrict;\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\nfunction parsePhoneNumber(phoneNumberRaw, defaultCountryCode) {\n  try {\n    if (!phoneNumberRaw || phoneNumberRaw.length < MIN_PHONE_LENGTH) {\n      return null;\n    }\n\n    var defaultRegionCode = defaultCountryCode ? getRegionCodeFromCountryCode(defaultCountryCode) : null;\n    var parsedNumberUnfixed = phoneUtil.parse(phoneNumberRaw, defaultRegionCode || undefined);\n    var parsedCountryCode = parsedNumberUnfixed.getCountryCode();\n    var parsedRegionCode = phoneUtil.getRegionCodeForNumber(parsedNumberUnfixed);\n    var parsedNumber = handleSpecialCasesForParsing(parsedNumberUnfixed, parsedCountryCode, parsedRegionCode);\n\n    if (!parsedNumber) {\n      return null;\n    }\n\n    var isValid = phoneUtil.isValidNumberForRegion(parsedNumber, parsedRegionCode);\n    return isValid ? {\n      e164Number: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.E164),\n      displayNumber: handleSpecialCasesForDisplay(parsedNumber, parsedCountryCode),\n      displayNumberInternational: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL),\n      countryCode: parsedCountryCode,\n      regionCode: parsedRegionCode\n    } : null;\n  } catch (error) {\n    console.debug(\"phoneNumbers/parsePhoneNumber/Failed to parse phone number, error: \" + error);\n    return null;\n  }\n}\n\nexports.parsePhoneNumber = parsePhoneNumber;\n\nfunction handleSpecialCasesForParsing(parsedNumber, countryCode, regionCode) {\n  if (!countryCode || !regionCode) {\n    return parsedNumber;\n  }\n\n  switch (countryCode) {\n    // Argentina\n    // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#why-is-this-number-from-argentina-ar-or-mexico-mx-not-identified-as-the-right-number-type\n    // https://en.wikipedia.org/wiki/Telephone_numbers_in_Argentina\n    case 54:\n      return prependToFormMobilePhoneNumber(parsedNumber, regionCode, '9');\n\n    default:\n      return parsedNumber;\n  }\n} // TODO(Rossy) Given the inconsistencies of numbers around the world, we should\n// display e164 everywhere to ensure users knows exactly who their sending money to\n\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\n\nfunction handleSpecialCasesForDisplay(parsedNumber, countryCode) {\n  switch (countryCode) {\n    // Argentina\n    // The Google lib formatter incorretly adds '15' to the nationally formatted number for Argentina\n    // However '15' is only needed when calling a mobile from a landline\n    case 54:\n      return phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL).replace(/\\+54(\\s)?/, '');\n\n    case 231:\n      var formatted = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n      return formatted && formatted[0] === '0' ? formatted.slice(1) : formatted;\n\n    default:\n      return phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n  }\n}\n/**\n * Some countries require a prefix before the area code depending on if the number is\n * mobile vs landline and international vs national\n */\n\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\n\nfunction prependToFormMobilePhoneNumber(parsedNumber, regionCode, prefix) {\n  if (phoneUtil.getNumberType(parsedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE) {\n    return parsedNumber;\n  }\n\n  var nationalNumber = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL); // Nationally formatted numbers sometimes contain leading 0\n\n  if (nationalNumber.charAt(0) === '0') {\n    nationalNumber = nationalNumber.slice(1);\n  } // If the number already starts with prefix, don't prepend it again\n\n\n  if (nationalNumber.startsWith(prefix)) {\n    return null;\n  }\n\n  var adjustedNumber = phoneUtil.parse(prefix + nationalNumber, regionCode);\n  return phoneUtil.getNumberType(adjustedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE ? adjustedNumber : null;\n}\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\n\nfunction getExampleNumber(regionCode, useOnlyZeroes, isInternational) {\n  if (useOnlyZeroes === void 0) {\n    useOnlyZeroes = true;\n  }\n\n  if (isInternational === void 0) {\n    isInternational = false;\n  }\n\n  var examplePhone = phoneUtil.getExampleNumber(getRegionCodeFromCountryCode(regionCode));\n\n  if (!examplePhone) {\n    return;\n  }\n\n  var formatedExample = phoneUtil.format(examplePhone, isInternational ? google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL : google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n\n  if (useOnlyZeroes) {\n    if (isInternational) {\n      return formatedExample.replace(/(^\\+[0-9]{1,3} |[0-9])/g, function (value, _, i) {\n        return i ? '0' : value;\n      });\n    }\n\n    return formatedExample.replace(/[0-9]/g, '0');\n  }\n\n  return formatedExample;\n}\n\nexports.getExampleNumber = getExampleNumber;\nexports.PhoneNumberUtils = {\n  getPhoneHash: exports.getPhoneHash,\n  getCountryCode: getCountryCode,\n  getRegionCode: getRegionCode,\n  getDisplayPhoneNumber: getDisplayPhoneNumber,\n  getE164Number: getE164Number,\n  isE164Number: phoneNumbers_1.isE164Number,\n  parsePhoneNumber: parsePhoneNumber\n};","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","sha3","v","type","value","getPhoneHash","phoneNumber","salt","exports","phoneUtil","google_libphonenumber_1","getInstance","MIN_PHONE_LENGTH","getCountryEmoji","e164PhoneNumber","countryCodePossible","regionCodePossible","countryCode","regionCode","getCountryCode","getRegionCode","countries","country_data_1","lookup","countryCallingCodes","userCountryArray","filter","c","alpha2","country","length","undefined","emoji","parse","error","console","debug","getRegionCodeForNumber","getRegionCodeFromCountryCode","getRegionCodeForCountryCode","parseInt","getDisplayPhoneNumber","defaultCountryCode","phoneDetails","parsePhoneNumber","displayNumber","getDisplayNumberInternational","toString","displayNumberInternational","getE164DisplayNumber","getE164Number","e164Number","isE164NumberStrict","parsedPhoneNumber","isValidNumber","format","E164","phoneNumberRaw","defaultRegionCode","parsedNumberUnfixed","parsedCountryCode","parsedRegionCode","parsedNumber","handleSpecialCasesForParsing","isValid","isValidNumberForRegion","handleSpecialCasesForDisplay","INTERNATIONAL","prependToFormMobilePhoneNumber","replace","formatted","NATIONAL","slice","prefix","getNumberType","MOBILE","nationalNumber","charAt","startsWith","adjustedNumber","getExampleNumber","useOnlyZeroes","isInternational","examplePhone","formatedExample","_","i","isE164Number"],"sourceRoot":"","sources":["../src/phoneNumbers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}