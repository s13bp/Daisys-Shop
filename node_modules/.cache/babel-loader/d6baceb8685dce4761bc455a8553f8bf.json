{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxParamsNormalizer = void 0;\n\nfunction isEmpty(value) {\n  return value === undefined || value === null || value === '0' || value.toLowerCase() === '0x' || value.toLowerCase() === '0x0';\n}\n\nvar TxParamsNormalizer =\n/** @class */\nfunction () {\n  function TxParamsNormalizer(connection) {\n    this.connection = connection;\n    this.chainId = null;\n    this.gatewayFeeRecipient = null;\n  }\n\n  TxParamsNormalizer.prototype.populate = function (celoTxParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txParams, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            txParams = __assign({}, celoTxParams);\n            if (!(txParams.chainId == null)) return [3\n            /*break*/\n            , 2];\n            _a = txParams;\n            return [4\n            /*yield*/\n            , this.getChainId()];\n\n          case 1:\n            _a.chainId = _e.sent();\n            _e.label = 2;\n\n          case 2:\n            if (!(txParams.nonce == null)) return [3\n            /*break*/\n            , 4];\n            _b = txParams;\n            return [4\n            /*yield*/\n            , this.connection.nonce(txParams.from.toString())];\n\n          case 3:\n            _b.nonce = _e.sent();\n            _e.label = 4;\n\n          case 4:\n            if (!(!txParams.gas || isEmpty(txParams.gas.toString()))) return [3\n            /*break*/\n            , 6];\n            _c = txParams;\n            return [4\n            /*yield*/\n            , this.connection.estimateGas(txParams)];\n\n          case 5:\n            _c.gas = _e.sent();\n            _e.label = 6;\n\n          case 6:\n            if (!(!txParams.gasPrice || isEmpty(txParams.gasPrice.toString()))) return [3\n            /*break*/\n            , 8];\n            _d = txParams;\n            return [4\n            /*yield*/\n            , this.connection.gasPrice(txParams.feeCurrency)];\n\n          case 7:\n            _d.gasPrice = _e.sent();\n            _e.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            , txParams];\n        }\n      });\n    });\n  };\n\n  TxParamsNormalizer.prototype.getChainId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.chainId === null)) return [3\n            /*break*/\n            , 2];\n            _a = this;\n            return [4\n            /*yield*/\n            , this.connection.chainId()];\n\n          case 1:\n            _a.chainId = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this.chainId];\n        }\n      });\n    });\n  }; // Right now, Forno does not expose a node's coinbase so we can't\n  // set the gatewayFeeRecipient. Once that is fixed, we can reenable\n  // this.\n  // @ts-ignore - see comment above\n\n\n  TxParamsNormalizer.prototype.getCoinbase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.gatewayFeeRecipient === null)) return [3\n            /*break*/\n            , 2];\n            _a = this;\n            return [4\n            /*yield*/\n            , this.connection.coinbase()];\n\n          case 1:\n            _a.gatewayFeeRecipient = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            if (this.gatewayFeeRecipient == null) {\n              throw new Error('missing-tx-params-populator@getCoinbase: Coinbase is null, we are not connected to a full ' + 'node, cannot sign transactions locally');\n            }\n\n            return [2\n            /*return*/\n            , this.gatewayFeeRecipient];\n        }\n      });\n    });\n  };\n\n  return TxParamsNormalizer;\n}();\n\nexports.TxParamsNormalizer = TxParamsNormalizer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,OAAT,CAAiBC,KAAjB,EAA0C;AACxC,SACEA,KAAK,KAAKC,SAAV,IACAD,KAAK,KAAK,IADV,IAEAA,KAAK,KAAK,GAFV,IAGAA,KAAK,CAACE,WAAN,OAAwB,IAHxB,IAIAF,KAAK,CAACE,WAAN,OAAwB,KAL1B;AAOD;;AAED;AAAA;AAAA;AAIE,8BAAqBC,UAArB,EAA2C;AAAtB;AAHb,mBAAyB,IAAzB;AACA,+BAAqC,IAArC;AAEuC;;AAElCC,0CAAb,UAAsBC,YAAtB,EAA0C;;;;;;;AAClCC,oBAAQ,gBAAQD,YAAR,CAAR;kBAEFC,QAAQ,CAACC,OAAT,IAAoB,OAApB;AAAA;AAAA;AACFC;AAAmB;AAAA;AAAA,cAAM,KAAKC,UAAL,EAAN;;;AAAnBD,eAASD,OAAT,GAAmBG,SAAnB;;;;kBAGEJ,QAAQ,CAACK,KAAT,IAAkB,OAAlB;AAAA;AAAA;AACFC;AAAiB;AAAA;AAAA,cAAM,KAAKT,UAAL,CAAgBQ,KAAhB,CAAsBL,QAAQ,CAACO,IAAT,CAAeC,QAAf,EAAtB,CAAN;;;AAAjBF,eAASD,KAAT,GAAiBD,SAAjB;;;;kBAGE,CAACJ,QAAQ,CAACS,GAAV,IAAiBhB,OAAO,CAACO,QAAQ,CAACS,GAAT,CAAaD,QAAb,EAAD,IAAxB;AAAA;AAAA;AACFE;AAAe;AAAA;AAAA,cAAM,KAAKb,UAAL,CAAgBc,WAAhB,CAA4BX,QAA5B,CAAN;;;AAAfU,eAASD,GAAT,GAAeL,SAAf;;;;kBAGE,CAACJ,QAAQ,CAACY,QAAV,IAAsBnB,OAAO,CAACO,QAAQ,CAACY,QAAT,CAAkBJ,QAAlB,EAAD,IAA7B;AAAA;AAAA;AACFK;AAAoB;AAAA;AAAA,cAAM,KAAKhB,UAAL,CAAgBe,QAAhB,CAAyBZ,QAAQ,CAACc,WAAlC,CAAN;;;AAApBD,eAASD,QAAT,GAAoBR,SAApB;;;;AAGF;AAAA;AAAA,cAAOJ,QAAP;;;;AACD,GApBY;;AAsBCF,4CAAd;;;;;;;kBACM,KAAKG,OAAL,KAAiB,OAAjB;AAAA;AAAA;AACFC;AAAe;AAAA;AAAA,cAAM,KAAKL,UAAL,CAAgBI,OAAhB,EAAN;;;AAAfC,eAAKD,OAAL,GAAeK,SAAf;;;;AAEF;AAAA;AAAA,cAAO,KAAKL,OAAZ;;;;AACD,GALa,CA5BhB,CAmCE;AACA;AACA;AACA;;;AACcH,6CAAd;;;;;;;kBACM,KAAKiB,mBAAL,KAA6B,OAA7B;AAAA;AAAA;AACFb;AAA2B;AAAA;AAAA,cAAM,KAAKL,UAAL,CAAgBmB,QAAhB,EAAN;;;AAA3Bd,eAAKa,mBAAL,GAA2BT,SAA3B;;;;AAEF,gBAAI,KAAKS,mBAAL,IAA4B,IAAhC,EAAsC;AACpC,oBAAM,IAAIE,KAAJ,CACJ,+FACE,wCAFE,CAAN;AAID;;AACD;AAAA;AAAA,cAAO,KAAKF,mBAAZ;;;;AACD,GAXa;;AAYhB;AAAC,CAnDD;;AAAaG","names":["isEmpty","value","undefined","toLowerCase","connection","TxParamsNormalizer","celoTxParams","txParams","chainId","_a","getChainId","_e","nonce","_b","from","toString","gas","_c","estimateGas","gasPrice","_d","feeCurrency","gatewayFeeRecipient","coinbase","Error","exports"],"sourceRoot":"","sources":["../../src/utils/tx-params-normalizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}