{"ast":null,"code":"var request = require(\"xhr-request-promise\");\n\nvar genPayload = function () {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      jsonrpc: \"2.0\",\n      id: ++nextId,\n      method: method,\n      params: params\n    };\n  };\n}();\n\nvar send = function send(url) {\n  return function (method, params) {\n    return request(url, {\n      method: \"POST\",\n      contentType: \"application/json-rpc\",\n      body: JSON.stringify(genPayload(method, params))\n    }).then(function (answer) {\n      var resp = JSON.parse(answer); // todo: use njsp?\n\n      if (resp.error) {\n        throw new Error(resp.error.message);\n      } else {\n        return resp.result;\n      }\n    }).catch(function (e) {\n      return {\n        error: e.toString()\n      };\n    });\n  };\n};\n\nmodule.exports = send;","map":{"version":3,"sources":["/Users/crypto/Daisys/node_modules/eth-lib/lib/rpc.js"],"names":["request","require","genPayload","nextId","method","params","jsonrpc","id","send","url","contentType","body","JSON","stringify","then","answer","resp","parse","error","Error","message","result","catch","e","toString","module","exports"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAMC,UAAU,GAAI,YAAM;AACxB,MAAIC,MAAM,GAAG,CAAb;AACA,SAAO,UAACC,MAAD,EAASC,MAAT;AAAA,WAAqB;AAC1BC,MAAAA,OAAO,EAAE,KADiB;AAE1BC,MAAAA,EAAE,EAAE,EAAEJ,MAFoB;AAG1BC,MAAAA,MAAM,EAAEA,MAHkB;AAI1BC,MAAAA,MAAM,EAAEA;AAJkB,KAArB;AAAA,GAAP;AAMD,CARkB,EAAnB;;AAUA,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG;AAAA,SAAI,UAACL,MAAD,EAASC,MAAT,EAAoB;AACtC,WAAOL,OAAO,CAACS,GAAD,EAAM;AAClBL,MAAAA,MAAM,EAAE,MADU;AAElBM,MAAAA,WAAW,EAAE,sBAFK;AAGlBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,UAAU,CAACE,MAAD,EAASC,MAAT,CAAzB;AAHY,KAAN,CAAP,CAIJS,IAJI,CAIC,UAAAC,MAAM,EAAI;AAChB,UAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWF,MAAX,CAAX,CADgB,CACe;;AAC/B,UAAIC,IAAI,CAACE,KAAT,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACE,KAAL,CAAWE,OAArB,CAAN;AACD,OAFD,MAEO;AACL,eAAOJ,IAAI,CAACK,MAAZ;AACD;AACF,KAXM,EAWJC,KAXI,CAWE,UAAAC,CAAC,EAAI;AACZ,aAAO;AAAEL,QAAAA,KAAK,EAAEK,CAAC,CAACC,QAAF;AAAT,OAAP;AACD,KAbM,CAAP;AAcD,GAfe;AAAA,CAAhB;;AAiBAC,MAAM,CAACC,OAAP,GAAiBlB,IAAjB","sourcesContent":["const request = require(\"xhr-request-promise\");\n\nconst genPayload = (() => {\n  let nextId = 0;\n  return (method, params) => ({\n    jsonrpc: \"2.0\",\n    id: ++nextId,\n    method: method,\n    params: params\n  });\n})();\n\nconst send = url => (method, params) => {\n  return request(url, {\n    method: \"POST\",\n    contentType: \"application/json-rpc\",\n    body: JSON.stringify(genPayload(method, params))\n  }).then(answer => {\n    var resp = JSON.parse(answer); // todo: use njsp?\n    if (resp.error) {\n      throw new Error(resp.error.message);\n    } else {\n      return resp.result;\n    }\n  }).catch(e => {\n    return { error: e.toString() };\n  });\n};\n\nmodule.exports = send;"]},"metadata":{},"sourceType":"script"}