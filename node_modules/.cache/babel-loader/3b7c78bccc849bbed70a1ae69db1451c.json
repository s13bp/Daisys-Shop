{"ast":null,"code":"var _jsxFileName = \"/Users/crypto/GETSCHWIFTY/src/pages/profile/Profile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './profile.css';\nimport profile_banner from '../../assets/profile_banner.png';\nimport Nfts from '../../components/nfts/Nfts';\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useMarketContract } from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = () => {\n  _s();\n\n  const {\n    address,\n    connect,\n    performActions\n  } = useContractKit();\n  const marketplace = useMarketContract();\n  const [nfts, setNfts] = useState([]);\n  const [soldNfts, setSoldNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (marketplace) {\n      loadNFTs();\n    }\n  }, [marketplace]);\n\n  const loadNFTs = async () => {\n    setLoading(true);\n\n    try {\n      const data = await marketplace.methods.fetchMyNFTs().call();\n      console.log({\n        data\n      });\n      const items = await Promise.all(data.map(async i => {\n        const tokenURI = await marketplace.methods.tokenURI(i.tokenId).call();\n        const owner = await marketplace.methods.getNftOwner(i.tokenId).call();\n        const meta = await axios.get(tokenURI);\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        return {\n          price,\n          tokenId: Number(i.tokenId),\n          seller: i.seller,\n          name: meta.data.name,\n          owner,\n          image: meta.data.image,\n          tokenURI\n        };\n      }));\n      setNfts(items);\n    } catch (e) {\n      console.log({\n        e\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile section__padding\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-top\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-bottom\",\n      children: /*#__PURE__*/_jsxDEV(Nfts, {\n        nfts: nfts,\n        loading: loading,\n        title: \"Your NFTs\",\n        relist: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Profile, \"p7lCZpeaV5sVHglCkgFa3FCh0F4=\", false, function () {\n  return [useContractKit, useMarketContract];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/crypto/GETSCHWIFTY/src/pages/profile/Profile.jsx"],"names":["React","useEffect","useState","profile_banner","Nfts","useContractKit","useMarketContract","axios","ethers","Profile","address","connect","performActions","marketplace","nfts","setNfts","soldNfts","setSoldNfts","loading","setLoading","loadNFTs","data","methods","fetchMyNFTs","call","console","log","items","Promise","all","map","i","tokenURI","tokenId","owner","getNftOwner","meta","get","price","utils","formatUnits","toString","Number","seller","name","image","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAElB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAAqCP,cAAc,EAAzD;AACA,QAAMQ,WAAW,GAAGP,iBAAiB,EAArC;AAGA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,WAAJ,EAAiB;AACbO,MAAAA,QAAQ;AACX;AACJ,GAJQ,EAIN,CAAEP,WAAF,CAJM,CAAT;;AAMA,QAAMO,QAAQ,GAAG,YAAY;AACzBD,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAME,IAAI,GAAG,MAAMR,WAAW,CAACS,OAAZ,CAAoBC,WAApB,GAAkCC,IAAlC,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACL,QAAAA;AAAD,OAAZ;AACA,YAAMM,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACS,GAAL,CAAS,MAAMC,CAAN,IAAW;AAChD,cAAMC,QAAQ,GAAG,MAAMnB,WAAW,CAACS,OAAZ,CAAoBU,QAApB,CAA6BD,CAAC,CAACE,OAA/B,EAAwCT,IAAxC,EAAvB;AAEA,cAAMU,KAAK,GAAG,MAAMrB,WAAW,CAACS,OAAZ,CAAoBa,WAApB,CAAgCJ,CAAC,CAACE,OAAlC,EAA2CT,IAA3C,EAApB;AACA,cAAMY,IAAI,GAAG,MAAM7B,KAAK,CAAC8B,GAAN,CAAUL,QAAV,CAAnB;AACA,YAAIM,KAAK,GAAG9B,MAAM,CAAC+B,KAAP,CAAaC,WAAb,CAAyBT,CAAC,CAACO,KAAF,CAAQG,QAAR,EAAzB,EAA6C,OAA7C,CAAZ;AAEA,eAAO;AACHH,UAAAA,KADG;AAEHL,UAAAA,OAAO,EAAES,MAAM,CAACX,CAAC,CAACE,OAAH,CAFZ;AAGHU,UAAAA,MAAM,EAAEZ,CAAC,CAACY,MAHP;AAIHC,UAAAA,IAAI,EAAER,IAAI,CAACf,IAAL,CAAUuB,IAJb;AAKHV,UAAAA,KALG;AAMHW,UAAAA,KAAK,EAAET,IAAI,CAACf,IAAL,CAAUwB,KANd;AAOHb,UAAAA;AAPG,SAAP;AASH,OAhB+B,CAAZ,CAApB;AAkBAjB,MAAAA,OAAO,CAACY,KAAD,CAAP;AACH,KAtBD,CAsBE,OAAOmB,CAAP,EAAU;AACRrB,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACoB,QAAAA;AAAD,OAAZ;AACH,KAxBD,SAwBU;AACN3B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AAGJ,GA/BD;;AAkCA,sBACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BAEI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEL,IAAZ;AAAkB,QAAA,OAAO,EAAEI,OAA3B;AAAoC,QAAA,KAAK,EAAC,WAA1C;AAAsD,QAAA,MAAM,EAAE;AAA9D;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA7DD;;GAAMT,O;UAEyCJ,c,EACvBC,iB;;;KAHlBG,O;AA+DN,eAAeA,OAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './profile.css'\nimport profile_banner from '../../assets/profile_banner.png'\nimport Nfts from '../../components/nfts/Nfts'\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\n\nconst Profile = () => {\n\n    const {address, connect, performActions} = useContractKit()\n    const marketplace = useMarketContract()\n\n\n    const [nfts, setNfts] = useState([]);\n    const [soldNfts, setSoldNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (marketplace) {\n            loadNFTs()\n        }\n    }, [ marketplace]);\n\n    const loadNFTs = async () => {\n        setLoading(true)\n        try {\n            const data = await marketplace.methods.fetchMyNFTs().call()\n            console.log({data})\n            const items = await Promise.all(data.map(async i => {\n                const tokenURI = await marketplace.methods.tokenURI(i.tokenId).call()\n\n                const owner = await marketplace.methods.getNftOwner(i.tokenId).call()\n                const meta = await axios.get(tokenURI)\n                let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n\n                return {\n                    price,\n                    tokenId: Number(i.tokenId),\n                    seller: i.seller,\n                    name: meta.data.name,\n                    owner,\n                    image: meta.data.image,\n                    tokenURI\n                }\n            }))\n\n            setNfts(items)\n        } catch (e) {\n            console.log({e})\n        } finally {\n            setLoading(false)\n        }\n\n\n    }\n\n\n    return (\n        <div className='profile section__padding'>\n            <div className=\"profile-top\">\n               \n            </div>\n            <div className=\"profile-bottom\">\n     \n                <Nfts nfts={nfts} loading={loading} title=\"Your NFTs\" relist={true}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}