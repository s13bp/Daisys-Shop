{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElectionWrapper = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n\n\nvar ElectionWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ElectionWrapper, _super);\n\n  function ElectionWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Returns the current election threshold.\n     * @returns Election threshold.\n     */\n\n\n    _this.electabilityThreshold = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getElectabilityThreshold, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Gets a validator address from the validator set at the given block number.\n     * @param index Index of requested validator in the validator set.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Address of validator at the requested index.\n     */\n\n    _this.validatorSignerAddressFromSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerAddressFromSet);\n    /**\n     * Gets a validator address from the current validator set.\n     * @param index Index of requested validator in the validator set.\n     * @return Address of validator at the requested index.\n     */\n\n    _this.validatorSignerAddressFromCurrentSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerAddressFromCurrentSet, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.identity));\n    /**\n     * Gets the size of the validator set that must sign the given block number.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Size of the validator set.\n     */\n\n    _this.numberValidatorsInSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.numberValidatorsInSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Gets the size of the current elected validator set.\n     * @return Size of the current elected validator set.\n     */\n\n    _this.numberValidatorsInCurrentSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.numberValidatorsInCurrentSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the total votes received across all groups.\n     * @return The total votes received across all groups.\n     */\n\n    _this.getTotalVotes = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotes, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the current validator signers using the precompiles.\n     * @return List of current validator signers.\n     */\n\n    _this.getCurrentValidatorSigners = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getCurrentValidatorSigners);\n    /**\n     * Returns the total votes for `group` made by `account`.\n     * @param group The address of the validator group.\n     * @param account The address of the voting account.\n     * @return The total votes for `group` made by `account`.\n     */\n\n    _this.getTotalVotesForGroupByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotesForGroupByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the groups that `account` has voted for.\n     * @param account The address of the account casting votes.\n     * @return The groups that `account` has voted for.\n     */\n\n    _this.getGroupsVotedForByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupsVotedForByAccount);\n    _this.getTotalVotesByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotesByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n    _this._activate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.activate);\n    return _this;\n  }\n  /**\n   * Returns the minimum and maximum number of validators that can be elected.\n   * @returns The minimum and maximum number of validators that can be elected.\n   */\n\n\n  ElectionWrapper.prototype.electableValidators = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, min, max;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.electableValidators().call()];\n\n          case 1:\n            _a = _b.sent(), min = _a.min, max = _a.max;\n            return [2\n            /*return*/\n            , {\n              min: (0, BaseWrapper_1.valueToBigNumber)(min),\n              max: (0, BaseWrapper_1.valueToBigNumber)(max)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the validator signers for block `blockNumber`.\n   * @param blockNumber Block number to retrieve signers for.\n   * @return Address of each signer in the validator set.\n   */\n\n\n  ElectionWrapper.prototype.getValidatorSigners = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numValidators;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.numberValidatorsInSet(blockNumber)];\n\n          case 1:\n            numValidators = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, (0, collections_1.zeroRange)(numValidators), function (i) {\n              return _this.validatorSignerAddressFromSet(i, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a list of elected validators with seats allocated to groups via the D'Hondt method.\n   * @return The list of elected validators.\n   * @dev See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\n   */\n\n\n  ElectionWrapper.prototype.electValidatorSigners = function (min, max) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, minArg, maxArg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(min !== undefined || max !== undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            minArg = min === undefined ? config.electableValidators.min : min;\n            maxArg = max === undefined ? config.electableValidators.max : max;\n            return [2\n            /*return*/\n            , this.contract.methods.electNValidatorSigners(minArg.toString(10), maxArg.toString(10)).call()];\n\n          case 2:\n            return [2\n            /*return*/\n            , this.contract.methods.electValidatorSigners().call()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the total votes for `group`.\n   * @param group The address of the validator group.\n   * @return The total votes for `group`.\n   */\n\n\n  ElectionWrapper.prototype.getTotalVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForGroup(group).call({}, blockNumber)];\n\n          case 1:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , (0, BaseWrapper_1.valueToBigNumber)(votes)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the active votes for `group`.\n   * @param group The address of the validator group.\n   * @return The active votes for `group`.\n   */\n\n\n  ElectionWrapper.prototype.getActiveVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getActiveVotesForGroup(group).call({}, blockNumber)];\n\n          case 1:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , (0, BaseWrapper_1.valueToBigNumber)(votes)];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getVotesForGroupByAccount = function (account, group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pending, active;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getPendingVotesForGroupByAccount(group, account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 1:\n            pending = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getActiveVotesForGroupByAccount(group, account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 2:\n            active = _a.sent();\n            return [2\n            /*return*/\n            , {\n              group: group,\n              pending: (0, BaseWrapper_1.valueToBigNumber)(pending),\n              active: (0, BaseWrapper_1.valueToBigNumber)(active)\n            }];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getVoter = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, votes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, groups, function (g) {\n              return _this.getVotesForGroupByAccount(account, g, blockNumber);\n            })];\n\n          case 2:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , {\n              address: account,\n              votes: votes\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns whether or not the account has any pending votes.\n   * @param account The address of the account casting votes.\n   * @return The groups that `account` has voted for.\n   */\n\n\n  ElectionWrapper.prototype.hasPendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isPending;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _a = BaseWrapper_1.valueToBigNumber;\n                      return [4\n                      /*yield*/\n                      , this.contract.methods.getPendingVotesForGroupByAccount(g, account).call()];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.apply(void 0, [_b.sent()]).isGreaterThan(0)];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            isPending = _a.sent();\n            return [2\n            /*return*/\n            , isPending.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.hasActivatablePendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n\n          case 2:\n            isActivatable = _a.sent();\n            return [2\n            /*return*/\n            , isActivatable.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n\n\n  ElectionWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.electableValidators(), this.electabilityThreshold(), this.contract.methods.maxNumGroupsVotedFor().call(), this.getTotalVotes()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              electableValidators: res[0],\n              electabilityThreshold: res[1],\n              maxNumGroupsVotedFor: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n              totalVotes: res[3],\n              currentThreshold: res[3].multipliedBy(res[1])\n            }];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getValidatorGroupVotes = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes, eligible, numVotesReceivable, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForGroup(address).call()];\n\n          case 1:\n            votes = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupEligibility(address).call()];\n\n          case 2:\n            eligible = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getNumVotesReceivable(address).call()];\n\n          case 3:\n            numVotesReceivable = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 4:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address)];\n\n          case 5:\n            name = _a.sent() || '';\n            return [2\n            /*return*/\n            , {\n              address: address,\n              name: name,\n              votes: (0, BaseWrapper_1.valueToBigNumber)(votes),\n              capacity: (0, BaseWrapper_1.valueToBigNumber)(numVotesReceivable).minus(votes),\n              eligible: eligible\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current registered validator groups and their total votes and eligibility.\n   */\n\n\n  ElectionWrapper.prototype.getValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, groups;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 1:\n            validators = _a.sent();\n            return [4\n            /*yield*/\n            , validators.getRegisteredValidatorGroupsAddresses()];\n\n          case 2:\n            groups = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(5, groups, function (g) {\n              return _this.getValidatorGroupVotes(g);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Activates any activatable pending votes.\n   * @param account The account with pending votes to activate.\n   */\n\n\n  ElectionWrapper.prototype.activate = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable, groupsActivatable;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n\n          case 2:\n            isActivatable = _a.sent();\n            groupsActivatable = groups.filter(function (_, i) {\n              return isActivatable[i];\n            });\n            return [2\n            /*return*/\n            , groupsActivatable.map(function (g) {\n              return _this._activate(g);\n            })];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revokePending = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, index, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _b.sent();\n            index = (0, address_1.findAddressIndex)(group, groups);\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n\n          case 2:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.revokePending(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revokeActive = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, index, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _b.sent();\n            index = (0, address_1.findAddressIndex)(group, groups);\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n\n          case 2:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.revokeActive(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revoke = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vote, txos, pendingValue, _a, _b, activeValue, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getVotesForGroupByAccount(account, group)];\n\n          case 1:\n            vote = _e.sent();\n\n            if (value.gt(vote.pending.plus(vote.active))) {\n              throw new Error(\"can't revoke more votes for \" + group + \" than have been made by \" + account);\n            }\n\n            txos = [];\n            pendingValue = bignumber_js_1.default.minimum(vote.pending, value);\n            if (!!pendingValue.isZero()) return [3\n            /*break*/\n            , 3];\n            _b = (_a = txos).push;\n            return [4\n            /*yield*/\n            , this.revokePending(account, group, pendingValue)];\n\n          case 2:\n            _b.apply(_a, [_e.sent()]);\n\n            _e.label = 3;\n\n          case 3:\n            if (!pendingValue.lt(value)) return [3\n            /*break*/\n            , 5];\n            activeValue = value.minus(pendingValue);\n            _d = (_c = txos).push;\n            return [4\n            /*yield*/\n            , this.revokeActive(account, group, activeValue)];\n\n          case 4:\n            _d.apply(_c, [_e.sent()]);\n\n            _e.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , txos];\n        }\n      });\n    });\n  };\n  /**\n   * Increments the number of total and pending votes for `group`.\n   * @param validatorGroup The validator group to vote for.\n   * @param value The amount of gold to use to vote.\n   */\n\n\n  ElectionWrapper.prototype.vote = function (validatorGroup, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(validatorGroup, value)];\n\n          case 1:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.vote(validatorGroup, value.toFixed(), lesser, greater))];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current eligible validator groups and their total votes.\n   */\n\n\n  ElectionWrapper.prototype.getEligibleValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForEligibleValidatorGroups().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , (0, collections_1.zip)(function (a, b) {\n              return {\n                address: a,\n                name: '',\n                votes: new bignumber_js_1.default(b),\n                capacity: new bignumber_js_1.default(0),\n                eligible: true\n              };\n            }, res[0], res[1])];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.findLesserAndGreaterAfterVote = function (votedGroup, voteWeight) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentVotes, selectedGroup, voteTotal, greaterKey, lesserKey, _i, currentVotes_1, vote;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getEligibleValidatorGroupsVotes()];\n\n          case 1:\n            currentVotes = _a.sent();\n            selectedGroup = currentVotes.find(function (votes) {\n              return (0, address_1.eqAddress)(votes.address, votedGroup);\n            });\n            voteTotal = selectedGroup ? selectedGroup.votes.plus(voteWeight) : voteWeight;\n            greaterKey = address_1.NULL_ADDRESS;\n            lesserKey = address_1.NULL_ADDRESS; // This leverages the fact that the currentVotes are already sorted from\n            // greatest to lowest value\n\n            for (_i = 0, currentVotes_1 = currentVotes; _i < currentVotes_1.length; _i++) {\n              vote = currentVotes_1[_i];\n\n              if (!(0, address_1.eqAddress)(vote.address, votedGroup)) {\n                if (vote.votes.isLessThanOrEqualTo(voteTotal)) {\n                  lesserKey = vote.address;\n                  break;\n                }\n\n                greaterKey = vote.address;\n              }\n            }\n\n            return [2\n            /*return*/\n            , {\n              lesser: lesserKey,\n              greater: greaterKey\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves the set of validatorsparticipating in BFT at epochNumber.\n   * @param epochNumber The epoch to retrieve the elected validator set at.\n   */\n\n\n  ElectionWrapper.prototype.getElectedValidators = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, signers, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getFirstBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getValidatorSigners(blockNumber)];\n\n          case 2:\n            signers = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 3:\n            validators = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, signers, function (addr) {\n              return validators.getValidatorFromSigner(addr);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves GroupVoterRewards at epochNumber.\n   * @param epochNumber The epoch to retrieve GroupVoterRewards at.\n   */\n\n\n  ElectionWrapper.prototype.getGroupVoterRewards = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, events, validators, validatorGroup;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPastEvents('EpochRewardsDistributedToVoters', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n\n          case 2:\n            events = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 3:\n            validators = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, events, function (e) {\n              return validators.getValidatorGroup(e.returnValues.group, false);\n            })];\n\n          case 4:\n            validatorGroup = _a.sent();\n            return [2\n            /*return*/\n            , events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                group: validatorGroup[index],\n                groupVoterPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.value)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves VoterRewards for address at epochNumber.\n   * @param address The address to retrieve VoterRewards for.\n   * @param epochNumber The epoch to retrieve VoterRewards at.\n   * @param voterShare Optionally address' share of group rewards.\n   */\n\n\n  ElectionWrapper.prototype.getVoterRewards = function (address, epochNumber, voterShare) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoteShare, _a, _b, _c, groupVoterRewards, voterRewards;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = voterShare;\n            if (_a) return [3\n            /*break*/\n            , 3];\n            _b = this.getVoterShare;\n            _c = [address];\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(this, _c.concat([_d.sent()]))];\n\n          case 2:\n            _a = _d.sent();\n            _d.label = 3;\n\n          case 3:\n            activeVoteShare = _a;\n            return [4\n            /*yield*/\n            , this.getGroupVoterRewards(epochNumber)];\n\n          case 4:\n            groupVoterRewards = _d.sent();\n            voterRewards = groupVoterRewards.filter(function (e) {\n              return (0, address_1.normalizeAddressWith0x)(e.group.address) in activeVoteShare;\n            });\n            return [2\n            /*return*/\n            , voterRewards.map(function (e) {\n              var group = (0, address_1.normalizeAddressWith0x)(e.group.address);\n              return {\n                address: address,\n                addressPayment: e.groupVoterPayment.times(activeVoteShare[group]),\n                group: e.group,\n                epochNumber: e.epochNumber\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves a voter's share of active votes.\n   * @param address The voter to retrieve share for.\n   * @param blockNumber The block to retrieve the voter's share at.\n   */\n\n\n  ElectionWrapper.prototype.getVoterShare = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoterVotes, voter, _i, _a, vote, group;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            activeVoterVotes = {};\n            return [4\n            /*yield*/\n            , this.getVoter(address, blockNumber)];\n\n          case 1:\n            voter = _b.sent();\n\n            for (_i = 0, _a = voter.votes; _i < _a.length; _i++) {\n              vote = _a[_i];\n              group = (0, address_1.normalizeAddressWith0x)(vote.group);\n              activeVoterVotes[group] = vote.active;\n            }\n\n            return [2\n            /*return*/\n            , (0, async_1.concurrentValuesMap)(10, activeVoterVotes, function (voterVotes, group) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, _b;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = voterVotes).dividedBy;\n                      return [4\n                      /*yield*/\n                      , this.getActiveVotesForGroup(group, blockNumber)];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _b.apply(_a, [_c.sent()])];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  return ElectionWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.ElectionWrapper = ElectionWrapper;","map":{"version":3,"mappings":"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","names":["__extends","_this","contract","methods","getElectabilityThreshold","undefined","BaseWrapper_1","validatorSignerAddressFromSet","validatorSignerAddressFromCurrentSet","numberValidatorsInSet","numberValidatorsInCurrentSet","getTotalVotes","getCurrentValidatorSigners","getTotalVotesForGroupByAccount","getGroupsVotedForByAccount","getTotalVotesByAccount","kit","activate","ElectionWrapper","electableValidators","call","_a","_b","min","max","blockNumber","numValidators","i","getConfig","config","minArg","maxArg","electNValidatorSigners","toString","electValidatorSigners","group","getTotalVotesForGroup","votes","getActiveVotesForGroup","account","getPendingVotesForGroupByAccount","pending","getActiveVotesForGroupByAccount","active","groups","g","getVotesForGroupByAccount","address","Promise","all","map","isGreaterThan","isPending","some","a","hasActivatablePendingVotes","isActivatable","electabilityThreshold","maxNumGroupsVotedFor","res","totalVotes","currentThreshold","multipliedBy","getGroupEligibility","eligible","getNumVotesReceivable","numVotesReceivable","contracts","getAccounts","accounts","getName","name","capacity","minus","getValidators","validators","getRegisteredValidatorGroupsAddresses","getValidatorGroupVotes","groupsActivatable","filter","_","_activate","value","index","findLesserAndGreaterAfterVote","times","lesser","greater","connection","revokePending","toFixed","revokeActive","vote","_e","gt","plus","Error","txos","pendingValue","bignumber_js_1","minimum","isZero","push","lt","activeValue","_d","validatorGroup","getTotalVotesForEligibleValidatorGroups","b","votedGroup","voteWeight","getEligibleValidatorGroupsVotes","currentVotes","selectedGroup","find","voteTotal","greaterKey","address_1","lesserKey","currentVotes_1","_i","isLessThanOrEqualTo","epochNumber","getFirstBlockNumberForEpoch","getValidatorSigners","signers","addr","getValidatorFromSigner","getLastBlockNumberForEpoch","getPastEvents","fromBlock","toBlock","events","e","getValidatorGroup","returnValues","groupVoterPayment","voterShare","getVoterShare","_c","activeVoteShare","getGroupVoterRewards","groupVoterRewards","voterRewards","addressPayment","activeVoterVotes","getVoter","voter","voterVotes","dividedBy","exports"],"sourceRoot":"","sources":["../../src/wrappers/Election.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}