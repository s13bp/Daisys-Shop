{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n\nvar cid_1 = require(\"multiformats/cid\");\n\nfunction fromSplit(split) {\n  var _split = _slicedToArray(split, 3),\n      protectedHeader = _split[0],\n      payload = _split[1],\n      signature = _split[2];\n\n  return {\n    payload: payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature: signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  var encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\n\nfunction encode(jws) {\n  var payload = utils_1.fromBase64url(jws.payload);\n\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  var encodedJws = {\n    payload: payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\n\nfunction decodeSignature(encoded) {\n  var sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\n\nfunction decode(encoded) {\n  var decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\n\nexports.default = {\n  fromSplit: fromSplit,\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"mappings":";;;;;;;;AAAA;;AACA;;AAiCA,SAASA,SAAT,CAAmBC,KAAnB,EAAuC;AACrC,8BAA8CA,KAA9C;AAAA,MAAOC,eAAP;AAAA,MAAwBC,OAAxB;AAAA,MAAiCC,SAAjC;;AACA,SAAO;AACLD,WAAO,EAAPA,OADK;AAELE,cAAU,EAAE,CAAC;AAAEC,eAAS,EAAEJ,eAAb;AAA8BE,eAAS,EAATA;AAA9B,KAAD,CAFP;AAGLG,QAAI,EAAEC,UAAIC,MAAJ,CAAWC,sBAAcP,OAAd,CAAX;AAHD,GAAP;AAKD;;AAED,SAASQ,eAAT,CAAyBP,SAAzB,EAAgD;AAC9C,MAAMQ,OAAO,GAAqB;AAChCR,aAAS,EAAEM,sBAAcN,SAAS,CAACA,SAAxB;AADqB,GAAlC;AAGA,MAAIA,SAAS,CAACS,MAAd,EAAsBD,OAAO,CAACC,MAAR,GAAiBT,SAAS,CAACS,MAA3B;AACtB,MAAIT,SAAS,CAACE,SAAd,EAAyBM,OAAO,CAACN,SAAR,GAAoBI,sBAAcN,SAAS,CAACE,SAAxB,CAApB;AACzB,SAAOM,OAAP;AACD;;AAED,SAASE,MAAT,CAAgBC,GAAhB,EAA2B;AACzB,MAAMZ,OAAO,GAAGO,sBAAcK,GAAG,CAACZ,OAAlB,CAAhB;;AACA,MAAI;AACFK,cAAIC,MAAJ,CAAWN,OAAX;AACD,GAFD,CAEE,OAAOa,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,MAAMC,UAAU,GAAe;AAC7Bf,WAAO,EAAPA,OAD6B;AAE7BE,cAAU,EAAEU,GAAG,CAACV,UAAJ,CAAec,GAAf,CAAmBR,eAAnB;AAFiB,GAA/B;AAIA,SAAOO,UAAP;AACD;;AAED,SAASE,eAAT,CAAyBR,OAAzB,EAAkD;AAChD,MAAMS,IAAI,GAAiB;AACzBjB,aAAS,EAAEM,oBAAYE,OAAO,CAACR,SAApB;AADc,GAA3B;AAGA,MAAIQ,OAAO,CAACC,MAAZ,EAAoBQ,IAAI,CAACR,MAAL,GAAcD,OAAO,CAACC,MAAtB;AACpB,MAAID,OAAO,CAACN,SAAZ,EAAuBe,IAAI,CAACf,SAAL,GAAiBI,oBAAYE,OAAO,CAACN,SAApB,CAAjB;AACvB,SAAOe,IAAP;AACD;;AAED,SAASZ,MAAT,CAAgBG,OAAhB,EAAmC;AACjC,MAAMU,OAAO,GAAW;AACtBnB,WAAO,EAAEO,oBAAYE,OAAO,CAACT,OAApB,CADa;AAEtBE,cAAU,EAAEO,OAAO,CAACP,UAAR,CAAmBc,GAAnB,CAAuBC,eAAvB;AAFU,GAAxB;AAIAE,SAAO,CAACf,IAAR,GAAeC,UAAIC,MAAJ,CAAW,IAAIc,UAAJ,CAAeX,OAAO,CAACT,OAAvB,CAAX,CAAf;AACA,SAAOmB,OAAP;AACD;;AAEDE,kBAAe;AACbxB,WAAS,EAATA,SADa;AAEbc,QAAM,EAANA,MAFa;AAGbL,QAAM,EAANA;AAHa,CAAf","names":["fromSplit","split","protectedHeader","payload","signature","signatures","protected","link","cid_1","decode","utils_1","encodeSignature","encoded","header","encode","jws","e","Error","encodedJws","map","decodeSignature","sign","decoded","Uint8Array","exports"],"sourceRoot":"","sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}