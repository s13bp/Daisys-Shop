{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setImplementationOnProxy = exports.getInitializeAbiOfImplementation = exports.PROXY_SET_AND_INITIALIZE_IMPLEMENTATION_SIGNATURE = exports.PROXY_SET_IMPLEMENTATION_SIGNATURE = exports.PROXY_ABI = exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI = exports.SET_IMPLEMENTATION_ABI = exports.GET_IMPLEMENTATION_ABI = void 0;\n\nvar Accounts_1 = require(\"./generated/Accounts\");\n\nvar Attestations_1 = require(\"./generated/Attestations\");\n\nvar BlockchainParameters_1 = require(\"./generated/BlockchainParameters\");\n\nvar DoubleSigningSlasher_1 = require(\"./generated/DoubleSigningSlasher\");\n\nvar DowntimeSlasher_1 = require(\"./generated/DowntimeSlasher\");\n\nvar Election_1 = require(\"./generated/Election\");\n\nvar EpochRewards_1 = require(\"./generated/EpochRewards\");\n\nvar Escrow_1 = require(\"./generated/Escrow\");\n\nvar Exchange_1 = require(\"./generated/Exchange\");\n\nvar FeeCurrencyWhitelist_1 = require(\"./generated/FeeCurrencyWhitelist\");\n\nvar Freezer_1 = require(\"./generated/Freezer\");\n\nvar GasPriceMinimum_1 = require(\"./generated/GasPriceMinimum\");\n\nvar GoldToken_1 = require(\"./generated/GoldToken\");\n\nvar Governance_1 = require(\"./generated/Governance\");\n\nvar GrandaMento_1 = require(\"./generated/GrandaMento\");\n\nvar LockedGold_1 = require(\"./generated/LockedGold\");\n\nvar MetaTransactionWallet_1 = require(\"./generated/MetaTransactionWallet\");\n\nvar MetaTransactionWalletDeployer_1 = require(\"./generated/MetaTransactionWalletDeployer\");\n\nvar MultiSig_1 = require(\"./generated/MultiSig\");\n\nvar Proxy_1 = require(\"./generated/Proxy\");\n\nvar Random_1 = require(\"./generated/Random\");\n\nvar Registry_1 = require(\"./generated/Registry\");\n\nvar Reserve_1 = require(\"./generated/Reserve\");\n\nvar SortedOracles_1 = require(\"./generated/SortedOracles\");\n\nvar StableToken_1 = require(\"./generated/StableToken\");\n\nvar TransferWhitelist_1 = require(\"./generated/TransferWhitelist\");\n\nvar Validators_1 = require(\"./generated/Validators\");\n\nexports.GET_IMPLEMENTATION_ABI = {\n  constant: true,\n  inputs: [],\n  name: '_getImplementation',\n  outputs: [{\n    name: 'implementation',\n    type: 'address'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function',\n  signature: '0x42404e07'\n};\nexports.SET_IMPLEMENTATION_ABI = {\n  constant: false,\n  inputs: [{\n    name: 'implementation',\n    type: 'address'\n  }],\n  name: '_setImplementation',\n  outputs: [],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function',\n  signature: '0xbb913f41'\n};\nexports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI = {\n  constant: false,\n  inputs: [{\n    name: 'implementation',\n    type: 'address'\n  }, {\n    name: 'callbackData',\n    type: 'bytes'\n  }],\n  name: '_setAndInitializeImplementation',\n  outputs: [],\n  payable: true,\n  stateMutability: 'payable',\n  type: 'function',\n  signature: '0x03386ba3'\n};\nexports.PROXY_ABI = [exports.GET_IMPLEMENTATION_ABI, exports.SET_IMPLEMENTATION_ABI, exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI];\nexports.PROXY_SET_IMPLEMENTATION_SIGNATURE = exports.SET_IMPLEMENTATION_ABI.signature;\nexports.PROXY_SET_AND_INITIALIZE_IMPLEMENTATION_SIGNATURE = exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI.signature;\n\nvar findInitializeAbi = function (items) {\n  return items.find(function (item) {\n    return item.name === 'initialize';\n  });\n};\n\nvar initializeAbiMap = {\n  AccountsProxy: findInitializeAbi(Accounts_1.ABI),\n  AttestationsProxy: findInitializeAbi(Attestations_1.ABI),\n  BlockchainParametersProxy: findInitializeAbi(BlockchainParameters_1.ABI),\n  DoubleSigningSlasherProxy: findInitializeAbi(DoubleSigningSlasher_1.ABI),\n  DowntimeSlasherProxy: findInitializeAbi(DowntimeSlasher_1.ABI),\n  ElectionProxy: findInitializeAbi(Election_1.ABI),\n  EpochRewardsProxy: findInitializeAbi(EpochRewards_1.ABI),\n  EscrowProxy: findInitializeAbi(Escrow_1.ABI),\n  ExchangeProxy: findInitializeAbi(Exchange_1.ABI),\n  ExchangeEURProxy: findInitializeAbi(Exchange_1.ABI),\n  ExchangeBRLProxy: findInitializeAbi(Exchange_1.ABI),\n  FeeCurrencyWhitelistProxy: findInitializeAbi(FeeCurrencyWhitelist_1.ABI),\n  FreezerProxy: findInitializeAbi(Freezer_1.ABI),\n  GasPriceMinimumProxy: findInitializeAbi(GasPriceMinimum_1.ABI),\n  GoldTokenProxy: findInitializeAbi(GoldToken_1.ABI),\n  GovernanceProxy: findInitializeAbi(Governance_1.ABI),\n  GrandaMentoProxy: findInitializeAbi(GrandaMento_1.ABI),\n  LockedGoldProxy: findInitializeAbi(LockedGold_1.ABI),\n  MetaTransactionWalletProxy: findInitializeAbi(MetaTransactionWallet_1.ABI),\n  MetaTransactionWalletDeployerProxy: findInitializeAbi(MetaTransactionWalletDeployer_1.ABI),\n  MultiSigProxy: findInitializeAbi(MultiSig_1.ABI),\n  ProxyProxy: findInitializeAbi(Proxy_1.ABI),\n  RandomProxy: findInitializeAbi(Random_1.ABI),\n  RegistryProxy: findInitializeAbi(Registry_1.ABI),\n  ReserveProxy: findInitializeAbi(Reserve_1.ABI),\n  SortedOraclesProxy: findInitializeAbi(SortedOracles_1.ABI),\n  StableTokenProxy: findInitializeAbi(StableToken_1.ABI),\n  StableTokenEURProxy: findInitializeAbi(StableToken_1.ABI),\n  StableTokenBRLProxy: findInitializeAbi(StableToken_1.ABI),\n  TransferWhitelistProxy: findInitializeAbi(TransferWhitelist_1.ABI),\n  ValidatorsProxy: findInitializeAbi(Validators_1.ABI)\n};\n\nvar getInitializeAbiOfImplementation = function (proxyContractName) {\n  var initializeAbi = initializeAbiMap[proxyContractName];\n\n  if (!initializeAbi) {\n    throw new Error(\"Initialize method not found on implementation of \" + proxyContractName);\n  }\n\n  return initializeAbi;\n};\n\nexports.getInitializeAbiOfImplementation = getInitializeAbiOfImplementation;\n\nvar setImplementationOnProxy = function (address, web3) {\n  var proxyWeb3Contract = new web3.eth.Contract(exports.PROXY_ABI);\n  return proxyWeb3Contract.methods._setImplementation(address);\n};\n\nexports.setImplementationOnProxy = setImplementationOnProxy;","map":{"version":3,"mappings":"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","names":["exports","constant","inputs","name","outputs","type","payable","stateMutability","signature","findInitializeAbi","items","find","item","initializeAbiMap","AccountsProxy","Accounts_1","AttestationsProxy","Attestations_1","BlockchainParametersProxy","BlockchainParameters_1","DoubleSigningSlasherProxy","DoubleSigningSlasher_1","DowntimeSlasherProxy","DowntimeSlasher_1","ElectionProxy","Election_1","EpochRewardsProxy","EpochRewards_1","EscrowProxy","Escrow_1","ExchangeProxy","Exchange_1","ExchangeEURProxy","ExchangeBRLProxy","FeeCurrencyWhitelistProxy","FeeCurrencyWhitelist_1","FreezerProxy","Freezer_1","GasPriceMinimumProxy","GasPriceMinimum_1","GoldTokenProxy","GoldToken_1","GovernanceProxy","Governance_1","GrandaMentoProxy","GrandaMento_1","LockedGoldProxy","LockedGold_1","MetaTransactionWalletProxy","MetaTransactionWallet_1","MetaTransactionWalletDeployerProxy","MetaTransactionWalletDeployer_1","MultiSigProxy","MultiSig_1","ProxyProxy","Proxy_1","RandomProxy","Random_1","RegistryProxy","Registry_1","ReserveProxy","Reserve_1","SortedOraclesProxy","SortedOracles_1","StableTokenProxy","StableToken_1","StableTokenEURProxy","StableTokenBRLProxy","TransferWhitelistProxy","TransferWhitelist_1","ValidatorsProxy","Validators_1","getInitializeAbiOfImplementation","proxyContractName","initializeAbi","Error","setImplementationOnProxy","address","web3","proxyWeb3Contract","eth","Contract","methods","_setImplementation"],"sourceRoot":"","sources":["../src/proxy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}