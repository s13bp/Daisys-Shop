{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\n\nvar querystring_1 = require(\"querystring\");\n\nvar url_1 = require(\"url\");\n\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n\n(function (DappKitRequestTypes) {\n  DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n  DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\n\nvar DappKitResponseStatus;\n\n(function (DappKitResponseStatus) {\n  DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n  DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\n\nvar AccountAuthRequest = function AccountAuthRequest(meta) {\n  return __assign({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS\n  }, meta);\n};\n\nexports.AccountAuthRequest = AccountAuthRequest;\n\nvar AccountAuthResponseSuccess = function AccountAuthResponseSuccess(address, phoneNumber, pepper) {\n  return {\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper\n  };\n};\n\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\n\nvar SignTxResponseSuccess = function SignTxResponseSuccess(rawTxs) {\n  return {\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs\n  };\n};\n\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\n\nfunction produceResponseDeeplink(request, response) {\n  var params = {\n    type: response.type,\n    status: response.status,\n    requestId: request.requestId\n  };\n\n  switch (response.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.account = response.address;\n        params.phoneNumber = response.phoneNumber;\n      }\n\n      break;\n\n    case DappKitRequestTypes.SIGN_TX:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.rawTxs = response.rawTxs;\n      }\n\n    default:\n      break;\n  }\n\n  return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\n\nexports.produceResponseDeeplink = produceResponseDeeplink;\n\nvar SignTxRequest = function SignTxRequest(txs, meta) {\n  return __assign({\n    type: DappKitRequestTypes.SIGN_TX,\n    txs: txs.map(function (tx) {\n      return {\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value\n      };\n    })\n  }, meta);\n};\n\nexports.SignTxRequest = SignTxRequest;\n\nfunction assertString(objectName, key, value) {\n  if (value === undefined) {\n    throw new Error(\"Expected \" + objectName + \" to contain \" + key);\n  }\n\n  if (typeof value !== 'string') {\n    throw new Error(\"Expected \" + objectName + \"[\" + key + \"] to be a string, but is \" + typeof value);\n  }\n\n  return;\n}\n\nfunction serializeDappKitRequestDeeplink(request) {\n  // TODO: Probably use a proper validation library here\n  assertString('request', 'type', request.type);\n  assertString('request', 'requestId', request.requestId);\n  assertString('request', 'callback', request.callback);\n  assertString('request', 'dappName', request.dappName);\n  var params = {\n    type: request.type,\n    requestId: request.requestId,\n    callback: request.callback,\n    dappName: request.dappName\n  };\n\n  switch (request.type) {\n    case DappKitRequestTypes.SIGN_TX:\n      params = __assign(__assign({}, params), {\n        txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64')\n      });\n      break;\n\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      break;\n\n    default:\n      throw new Error(\"Invalid DappKitRequest type: \" + JSON.stringify(request));\n  }\n\n  return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\n\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink; // TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\n\nfunction parseDappkitResponseDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n\n  if (rawParams.query.requestId === undefined) {\n    throw new Error('Invalid Deeplink: does not contain requestId');\n  }\n\n  var requestId = rawParams.query.requestId;\n  var address = rawParams.query.account;\n  var phoneNumber = rawParams.query.phoneNumber;\n\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.SUCCESS,\n          address: address,\n          phoneNumber: phoneNumber,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n\n    case DappKitRequestTypes.SIGN_TX:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        var rawTxs = rawParams.query.rawTxs;\n\n        if (typeof rawTxs === 'string') {\n          rawTxs = [rawTxs];\n        } // @ts-ignore\n\n\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.SUCCESS,\n          rawTxs: rawTxs,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\n\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\n\nfunction parseDappKitRequestDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n\n  if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n    throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n  }\n\n  var requestMeta = {\n    // @ts-ignore\n    callback: rawParams.query.callback,\n    // @ts-ignore\n    requestId: rawParams.query.requestId,\n    // @ts-ignore\n    dappName: rawParams.query.dappName\n  };\n\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      return (0, exports.AccountAuthRequest)(requestMeta);\n      break;\n\n    case DappKitRequestTypes.SIGN_TX:\n      // @ts-ignore\n      return __assign({\n        type: DappKitRequestTypes.SIGN_TX,\n        // @ts-ignore\n        txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8'))\n      }, requestMeta);\n\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\n\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEaA,4BAAoB,uBAApB;AACb,IAAYC,mBAAZ;;AAAA,WAAYA,mBAAZ,EAA+B;AAC7BA;AACAA;AACD,CAHD,EAAYA,mBAAmB,GAAnBD,8DAAmB,EAAnB,CAAZ;;AAKA,IAAYE,qBAAZ;;AAAA,WAAYA,qBAAZ,EAAiC;AAC/BA;AACAA;AACD,CAHD,EAAYA,qBAAqB,GAArBF,kEAAqB,EAArB,CAAZ;;AAsBO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAyB;AAAyB;AAClFC,QAAI,EAAEJ,mBAAmB,CAACK;AADwD,KAE/EF,IAF+E;AAGlF,CAHK;;AAAMJ,6BAAkBG,kBAAlB;;AAaN,IAAMI,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCC,OADwC,EAExCC,WAFwC,EAGxCC,MAHwC,EAGd;AACK,SAAC;AAChCL,QAAI,EAAEJ,mBAAmB,CAACK,eADM;AAEhCK,UAAM,EAAET,qBAAqB,CAACU,OAFE;AAGhCJ,WAAO,SAHyB;AAIhCC,eAAW,aAJqB;AAKhCC,UAAM;AAL0B,GAAD;AAM/B,CAVK;;AAAMV,qCAA0BO,0BAA1B;;AAyBN,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,MAAD,EAAiB;AAA4B,SAAC;AACjFT,QAAI,EAAEJ,mBAAmB,CAACc,OADuD;AAEjFJ,UAAM,EAAET,qBAAqB,CAACU,OAFmD;AAGjFE,UAAM;AAH2E,GAAD;AAIhF,CAJK;;AAAMd,gCAAqBa,qBAArB;;AAeb,SAAgBG,uBAAhB,CAAwCC,OAAxC,EAAiEC,QAAjE,EAA0F;AACxF,MAAMC,MAAM,GAAQ;AAAEd,QAAI,EAAEa,QAAQ,CAACb,IAAjB;AAAuBM,UAAM,EAAEO,QAAQ,CAACP,MAAxC;AAAgDS,aAAS,EAAEH,OAAO,CAACG;AAAnE,GAApB;;AACA,UAAQF,QAAQ,CAACb,IAAjB;AACE,SAAKJ,mBAAmB,CAACK,eAAzB;AACE,UAAIY,QAAQ,CAACP,MAAT,KAAoBT,qBAAqB,CAACU,OAA9C,EAAuD;AACrDO,cAAM,CAACE,OAAP,GAAiBH,QAAQ,CAACV,OAA1B;AACAW,cAAM,CAACV,WAAP,GAAqBS,QAAQ,CAACT,WAA9B;AACD;;AACD;;AACF,SAAKR,mBAAmB,CAACc,OAAzB;AACE,UAAIG,QAAQ,CAACP,MAAT,KAAoBT,qBAAqB,CAACU,OAA9C,EAAuD;AACrDO,cAAM,CAACL,MAAP,GAAgBI,QAAQ,CAACJ,MAAzB;AACD;;AACH;AACE;AAZJ;;AAeA,SAAOG,OAAO,CAACK,QAAR,GAAmB,GAAnB,GAAyB,6BAAUH,MAAV,CAAhC;AACD;;AAlBDnB;;AAmCO,IAAMuB,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAuBpB,IAAvB,EAA+C;AAAoB;AAC9FC,QAAI,EAAEJ,mBAAmB,CAACc,OADoE;AAE9FS,OAAG,EAAEA,GAAG,CAACC,GAAJ,CAAQ,UAACC,EAAD,EAAG;AAAK,aAAC;AACpBC,cAAM,EAAED,EAAE,CAACC,MADS;AAEpBC,oBAAY,EAAEF,EAAE,CAACE,YAFG;AAGpBC,YAAI,EAAEH,EAAE,CAACG,IAHW;AAIpBC,UAAE,EAAEJ,EAAE,CAACI,EAJa;AAKpBC,aAAK,EAAEL,EAAE,CAACK,KALU;AAMpBC,0BAAkB,EAAEN,EAAE,CAACM,kBANH;AAOpBC,aAAK,EAAEP,EAAE,CAACO;AAPU,OAAD;AAQnB,KARG;AAFyF,KAW3F7B,IAX2F;AAY9F,CAZK;;AAAMJ,wBAAauB,aAAb;;AAgBb,SAASW,YAAT,CAAsBC,UAAtB,EAA0CC,GAA1C,EAAuDH,KAAvD,EAAiE;AAC/D,MAAIA,KAAK,KAAKI,SAAd,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,cAAYH,UAAZ,GAAsB,cAAtB,GAAqCC,GAA/C,CAAN;AACD;;AAED,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIK,KAAJ,CAAU,cAAYH,UAAZ,GAAsB,GAAtB,GAA0BC,GAA1B,GAA6B,2BAA7B,GAAyD,OAAOH,KAA1E,CAAN;AACD;;AAED;AACD;;AAED,SAAgBM,+BAAhB,CAAgDtB,OAAhD,EAAuE;AACrE;AACAiB,cAAY,CAAC,SAAD,EAAY,MAAZ,EAAoBjB,OAAO,CAACZ,IAA5B,CAAZ;AACA6B,cAAY,CAAC,SAAD,EAAY,WAAZ,EAAyBjB,OAAO,CAACG,SAAjC,CAAZ;AACAc,cAAY,CAAC,SAAD,EAAY,UAAZ,EAAwBjB,OAAO,CAACK,QAAhC,CAAZ;AACAY,cAAY,CAAC,SAAD,EAAY,UAAZ,EAAwBjB,OAAO,CAACuB,QAAhC,CAAZ;AAEA,MAAIrB,MAAM,GAAQ;AAChBd,QAAI,EAAEY,OAAO,CAACZ,IADE;AAEhBe,aAAS,EAAEH,OAAO,CAACG,SAFH;AAGhBE,YAAQ,EAAEL,OAAO,CAACK,QAHF;AAIhBkB,YAAQ,EAAEvB,OAAO,CAACuB;AAJF,GAAlB;;AAMA,UAAQvB,OAAO,CAACZ,IAAhB;AACE,SAAKJ,mBAAmB,CAACc,OAAzB;AACEI,YAAM,yBACDA,MADC,GACK;AACTK,WAAG,EAAEiB,MAAM,CAACZ,IAAP,CAAYa,IAAI,CAACC,SAAL,CAAe1B,OAAO,CAACO,GAAvB,CAAZ,EAAyC,MAAzC,EAAiDoB,QAAjD,CAA0D,QAA1D;AADI,OADL,CAAN;AAIA;;AACF,SAAK3C,mBAAmB,CAACK,eAAzB;AACE;;AACF;AACE,YAAM,IAAIgC,KAAJ,CAAU,kCAAgCI,IAAI,CAACC,SAAL,CAAe1B,OAAf,CAA1C,CAAN;AAVJ;;AAaA,SAAOjB,4BAAoB,GAApB,GAA0B,6BAAUmB,MAAV,CAAjC;AACD;;AA3BDnB,0E,CA6BA;AACA;;AACA,SAAgB6C,4BAAhB,CAA6CC,GAA7C,EAAwD;AACtD,MAAMC,SAAS,GAAG,iBAAMD,GAAN,EAAW,IAAX,CAAlB;;AACA,MAAIC,SAAS,CAACC,KAAV,CAAgB3C,IAAhB,KAAyBgC,SAA7B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,6CAA6CQ,GAAvD,CAAN;AACD;;AAED,MAAIC,SAAS,CAACC,KAAV,CAAgB5B,SAAhB,KAA8BiB,SAAlC,EAA6C;AAC3C,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,MAAMlB,SAAS,GAAG2B,SAAS,CAACC,KAAV,CAAgB5B,SAAlC;AACA,MAAMZ,OAAO,GAAGuC,SAAS,CAACC,KAAV,CAAgB3B,OAAhC;AACA,MAAMZ,WAAW,GAAGsC,SAAS,CAACC,KAAV,CAAgBvC,WAApC;;AAEA,UAAQsC,SAAS,CAACC,KAAV,CAAgB3C,IAAxB;AACE,SAAKJ,mBAAmB,CAACK,eAAzB;AACE,UAAIyC,SAAS,CAACC,KAAV,CAAgBrC,MAAhB,KAA2BT,qBAAqB,CAACU,OAArD,EAA8D;AAC5D;AACA,eAAO;AACLP,cAAI,EAAEJ,mBAAmB,CAACK,eADrB;AAELK,gBAAM,EAAET,qBAAqB,CAACU,OAFzB;AAGLJ,iBAAO,SAHF;AAILC,qBAAW,aAJN;AAKLW,mBAAS;AALJ,SAAP;AAOD,OATD,MASO;AACL,eAAO;AACLf,cAAI,EAAEJ,mBAAmB,CAACK,eADrB;AAELK,gBAAM,EAAET,qBAAqB,CAAC+C,YAFzB;AAGL7B,mBAAS;AAHJ,SAAP;AAKD;;AACH,SAAKnB,mBAAmB,CAACc,OAAzB;AACE,UAAIgC,SAAS,CAACC,KAAV,CAAgBrC,MAAhB,KAA2BT,qBAAqB,CAACU,OAArD,EAA8D;AAC5D,YAAIE,MAAM,GAAGiC,SAAS,CAACC,KAAV,CAAgBlC,MAA7B;;AACA,YAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,gBAAM,GAAG,CAACA,MAAD,CAAT;AACD,SAJ2D,CAK5D;;;AACA,eAAO;AACLT,cAAI,EAAEJ,mBAAmB,CAACc,OADrB;AAELJ,gBAAM,EAAET,qBAAqB,CAACU,OAFzB;AAGLE,gBAAM,EAAEA,MAHH;AAILM,mBAAS;AAJJ,SAAP;AAMD,OAZD,MAYO;AACL,eAAO;AACLf,cAAI,EAAEJ,mBAAmB,CAACc,OADrB;AAELJ,gBAAM,EAAET,qBAAqB,CAAC+C,YAFzB;AAGL7B,mBAAS;AAHJ,SAAP;AAKD;;AACH;AACE,YAAM,IAAIkB,KAAJ,CAAU,mDAAV,CAAN;AAvCJ;AAyCD;;AAvDDtC;;AAyDA,SAAgBkD,2BAAhB,CAA4CJ,GAA5C,EAAuD;AACrD,MAAMC,SAAS,GAAG,iBAAMD,GAAN,EAAW,IAAX,CAAlB;;AAEA,MAAIC,SAAS,CAACC,KAAV,CAAgB3C,IAAhB,KAAyBgC,SAA7B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,6CAA6CQ,GAAvD,CAAN;AACD;;AAED,MAAI,CAACC,SAAS,CAACC,KAAV,CAAgBR,QAAjB,IAA6B,CAACO,SAAS,CAACC,KAAV,CAAgB1B,QAA9C,IAA0D,CAACyB,SAAS,CAACC,KAAV,CAAgB5B,SAA/E,EAA0F;AACxF,UAAM,IAAIkB,KAAJ,CAAU,yDAAyDQ,GAAnE,CAAN;AACD;;AAED,MAAMK,WAAW,GAAuB;AACtC;AACA7B,YAAQ,EAAEyB,SAAS,CAACC,KAAV,CAAgB1B,QAFY;AAGtC;AACAF,aAAS,EAAE2B,SAAS,CAACC,KAAV,CAAgB5B,SAJW;AAKtC;AACAoB,YAAQ,EAAEO,SAAS,CAACC,KAAV,CAAgBR;AANY,GAAxC;;AASA,UAAQO,SAAS,CAACC,KAAV,CAAgB3C,IAAxB;AACE,SAAKJ,mBAAmB,CAACK,eAAzB;AACE,aAAO,gCAAmB6C,WAAnB,CAAP;AACA;;AACF,SAAKlD,mBAAmB,CAACc,OAAzB;AACE;AACA;AACEV,YAAI,EAAEJ,mBAAmB,CAACc,OAD5B;AAEE;AACAS,WAAG,EAAEkB,IAAI,CAACU,KAAL,CAAWX,MAAM,CAACZ,IAAP,CAAYkB,SAAS,CAACC,KAAV,CAAgBxB,GAA5B,EAAiC,QAAjC,EAA2CoB,QAA3C,CAAoD,MAApD,CAAX;AAHP,SAIKO,WAJL;;AAMF;AACE,YAAM,IAAIb,KAAJ,CAAU,mDAAV,CAAN;AAbJ;AAeD;;AAnCDtC","names":["exports","DappKitRequestTypes","DappKitResponseStatus","AccountAuthRequest","meta","type","ACCOUNT_ADDRESS","AccountAuthResponseSuccess","address","phoneNumber","pepper","status","SUCCESS","SignTxResponseSuccess","rawTxs","SIGN_TX","produceResponseDeeplink","request","response","params","requestId","account","callback","SignTxRequest","txs","map","tx","txData","estimatedGas","from","to","nonce","feeCurrencyAddress","value","assertString","objectName","key","undefined","Error","serializeDappKitRequestDeeplink","dappName","Buffer","JSON","stringify","toString","parseDappkitResponseDeeplink","url","rawParams","query","UNAUTHORIZED","parseDappKitRequestDeeplink","requestMeta","parse"],"sourceRoot":"","sources":["../src/dappkit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}