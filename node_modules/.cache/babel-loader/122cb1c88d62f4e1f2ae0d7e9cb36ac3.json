{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareLedgerAppVersions = exports.list = exports.tokenInfoByAddressAndChainId = void 0; // Copied from '@ledgerhq/hw-app-eth/erc20' because we need to change the path of the blob and support for address+chainId\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar data_1 = __importDefault(require(\"./data\"));\n/**\n * Retrieve the token information by a given contract address and chainId if any\n */\n\n\nvar tokenInfoByAddressAndChainId = function tokenInfoByAddressAndChainId(contract, chainId) {\n  return get().byContractKey(generateContractKey(contract, chainId));\n};\n\nexports.tokenInfoByAddressAndChainId = tokenInfoByAddressAndChainId;\n/**\n * list all the ERC20 tokens informations\n */\n\nvar list = function list() {\n  return get().list();\n};\n\nexports.list = list;\n/**\n * @return\n * -1: version1 < version2,\n *  0: version1 == version2,\n *  1: version1 > version2\n */\n\nfunction compareLedgerAppVersions(version1, version2) {\n  var numberV1 = stringVersionToNumber(version1);\n  var numberV2 = stringVersionToNumber(version2);\n  return numberV1 < numberV2 ? -1 : numberV1 === numberV2 ? 0 : 1;\n}\n\nexports.compareLedgerAppVersions = compareLedgerAppVersions;\n\nfunction stringVersionToNumber(version) {\n  var parts = version.split('.');\n  return parts.reduce(function (accum, part) {\n    return (accum + Number(part)) * 1000;\n  }, 0);\n}\n\nfunction generateContractKey(contract, chainId) {\n  return [(0, address_1.normalizeAddressWith0x)(contract), chainId].join('-');\n} // this internal get() will lazy load and cache the data from the erc20 data blob\n\n\nvar get = function () {\n  var cache;\n  return function () {\n    if (cache) {\n      return cache;\n    }\n\n    var buf = Buffer.from(data_1.default, 'base64');\n    var byContract = {};\n    var entries = [];\n    var i = 0;\n\n    while (i < buf.length) {\n      var length_1 = buf.readUInt32BE(i);\n      i += 4;\n      var item = buf.slice(i, i + length_1);\n      var j = 0;\n      var tickerLength = item.readUInt8(j);\n      j += 1;\n      var ticker = item.slice(j, j + tickerLength).toString('ascii');\n      j += tickerLength;\n      var contractAddress = (0, address_1.normalizeAddressWith0x)(item.slice(j, j + 20).toString('hex'));\n      j += 20;\n      var decimals = item.readUInt32BE(j);\n      j += 4;\n      var chainId = item.readUInt32BE(j);\n      j += 4;\n      var signature = item.slice(j);\n      var entry = {\n        ticker: ticker,\n        contractAddress: contractAddress,\n        decimals: decimals,\n        chainId: chainId,\n        signature: signature,\n        data: item\n      };\n      entries.push(entry);\n      byContract[generateContractKey(contractAddress, chainId)] = entry;\n      i += length_1;\n    }\n\n    var api = {\n      list: function list() {\n        return entries;\n      },\n      byContractKey: function byContractKey(id) {\n        return byContract[id];\n      }\n    };\n    cache = api;\n    return api;\n  };\n}();","map":{"version":3,"mappings":"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","names":["tokenInfoByAddressAndChainId","contract","chainId","byContractKey","generateContractKey","exports","list","compareLedgerAppVersions","version1","version2","numberV1","stringVersionToNumber","numberV2","version","parts","split","reduce","accum","part","Number","join","get","cache","buf","Buffer","from","data_1","byContract","entries","i","length","length_1","readUInt32BE","item","slice","j","tickerLength","readUInt8","ticker","toString","contractAddress","decimals","signature","entry","data","push","api","id"],"sourceRoot":"","sources":["../src/tokens.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}