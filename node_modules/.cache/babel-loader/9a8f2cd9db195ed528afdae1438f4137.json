{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _a, _b;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.STATIC_NETWORK_WALLETS = exports.WalletIds = exports.WalletTypes = exports.Localhost = exports.Mainnet = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.images = exports.PROVIDERS = exports.SupportedProviders = exports.localStorageKeys = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_device_detect_1 = require(\"react-device-detect\");\n\nvar types_1 = require(\"./types\");\n\nvar ethereum_1 = require(\"./utils/ethereum\");\n\nvar walletIcons_1 = require(\"./walletIcons\");\n\nexports.localStorageKeys = {\n  lastUsedAddress: 'use-contractkit/last-used-address',\n  lastUsedNetwork: 'use-contractkit/last-used-network',\n  lastUsedWalletType: 'use-contractkit/last-used-wallet',\n  lastUsedWalletArguments: 'use-contractkit/last-used-wallet-arguments',\n  lastUsedFeeCurrency: 'use-contractkit/last-used-fee-currency'\n};\nvar SupportedProviders;\n\n(function (SupportedProviders) {\n  SupportedProviders[\"CeloExtensionWallet\"] = \"Celo Extension Wallet\";\n  SupportedProviders[\"CeloTerminal\"] = \"Celo Terminal\";\n  SupportedProviders[\"CeloWallet\"] = \"Celo Wallet\";\n  SupportedProviders[\"CeloDance\"] = \"CeloDance\";\n  SupportedProviders[\"Injected\"] = \"Injected\";\n  SupportedProviders[\"Ledger\"] = \"Ledger\";\n  SupportedProviders[\"MetaMask\"] = \"MetaMask\";\n  SupportedProviders[\"PrivateKey\"] = \"Private key\";\n  SupportedProviders[\"Valora\"] = \"Valora\";\n  SupportedProviders[\"WalletConnect\"] = \"WalletConnect\";\n})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));\n\nexports.PROVIDERS = (_a = {}, _a[SupportedProviders.Valora] = {\n  name: SupportedProviders.Valora,\n  description: 'Connect to Valora, a mobile payments app that works worldwide',\n  icon: walletIcons_1.VALORA,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return 0;\n  },\n  installURL: 'https://valoraapp.com/'\n}, _a[SupportedProviders.WalletConnect] = {\n  name: SupportedProviders.WalletConnect,\n  description: 'Scan a QR code to connect your wallet',\n  icon: walletIcons_1.WALLETCONNECT,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return 0;\n  }\n}, _a[SupportedProviders.Ledger] = {\n  name: SupportedProviders.Ledger,\n  description: 'Sync with your Ledger hardware wallet',\n  icon: walletIcons_1.LEDGER,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 0;\n  }\n}, _a[SupportedProviders.CeloWallet] = {\n  name: SupportedProviders.CeloWallet,\n  description: 'Connect to Celo Wallet for web or desktop',\n  icon: walletIcons_1.CELO,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return !react_device_detect_1.isMobile ? 0 : 1;\n  }\n}, _a[SupportedProviders.CeloTerminal] = {\n  name: SupportedProviders.CeloTerminal,\n  description: 'Connect to the Celo Terminal desktop app',\n  // TODO get SVG icon\n  icon: 'https://raw.githubusercontent.com/zviadm/celoterminal/main/static/icon.png',\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a[SupportedProviders.MetaMask] = {\n  name: SupportedProviders.MetaMask,\n  description: react_1.default.createElement(react_1.default.Fragment, null, \"Use the Metamask browser extension. Celo support is limited.\", ' ', react_1.default.createElement(\"a\", {\n    href: \"https://docs.celo.org/getting-started/wallets/using-metamask-with-celo\",\n    target: \"_blank\",\n    onClick: function (e) {\n      e.stopPropagation();\n      e.nativeEvent.stopPropagation();\n    },\n    className: \"tw-underline tw-text-gray-900 dark:tw-text-gray-200 tw-font-medium\",\n    rel: \"noopener noreferrer\"\n  }, \"Learn more\")),\n  icon: walletIcons_1.METAMASK,\n  canConnect: function () {\n    return (0, ethereum_1.isEthereumFromMetamask)();\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 0;\n  },\n  installURL: 'https://metamask.app.link/'\n}, _a[SupportedProviders.CeloExtensionWallet] = {\n  name: SupportedProviders.CeloExtensionWallet,\n  description: 'Use a wallet from the the Celo chrome extension',\n  icon: walletIcons_1.CHROME_EXTENSION_STORE,\n  canConnect: function () {\n    return !!window.celo;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 1;\n  },\n  installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related'\n}, _a[SupportedProviders.Injected] = {\n  name: SupportedProviders.Injected,\n  description: 'Connect any Ethereum wallet to Celo',\n  icon: walletIcons_1.ETHEREUM,\n  canConnect: function () {\n    return (0, ethereum_1.isEthereumPresent)();\n  },\n  showInList: function () {\n    return (0, ethereum_1.isEthereumFromMetamask)();\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a[SupportedProviders.PrivateKey] = {\n  name: SupportedProviders.PrivateKey,\n  description: 'Enter a plaintext private key to load your account (testing only)',\n  icon: walletIcons_1.PRIVATE_KEY,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return process.env.NODE_ENV !== 'production';\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a[SupportedProviders.CeloDance] = {\n  name: SupportedProviders.CeloDance,\n  description: 'Send, vote, and earn rewards within one wallet',\n  icon: walletIcons_1.CELO_DANCE,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return 1;\n  },\n  installURL: 'https://celo.dance/'\n}, _a);\nexports.images = (_b = {}, _b[SupportedProviders.Valora] = walletIcons_1.VALORA, _b[SupportedProviders.MetaMask] = walletIcons_1.METAMASK, _b[SupportedProviders.WalletConnect] = walletIcons_1.WALLETCONNECT, _b[SupportedProviders.Ledger] = walletIcons_1.LEDGER, _b[SupportedProviders.CeloWallet] = walletIcons_1.CELO, _b[SupportedProviders.CeloDance] = walletIcons_1.CELO_DANCE, _b[SupportedProviders.CeloTerminal] = walletIcons_1.CELO, _b[SupportedProviders.CeloExtensionWallet] = walletIcons_1.CHROME_EXTENSION_STORE, _b[SupportedProviders.PrivateKey] = walletIcons_1.PRIVATE_KEY, _b);\nvar NetworkNames;\n\n(function (NetworkNames) {\n  NetworkNames[\"Alfajores\"] = \"Alfajores\";\n  NetworkNames[\"Baklava\"] = \"Baklava\";\n  NetworkNames[\"Mainnet\"] = \"Mainnet\";\n  NetworkNames[\"Localhost\"] = \"Localhost\";\n})(NetworkNames = exports.NetworkNames || (exports.NetworkNames = {}));\n\nexports.Alfajores = {\n  name: NetworkNames.Alfajores,\n  rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n  graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',\n  explorer: 'https://alfajores-blockscout.celo-testnet.org',\n  chainId: types_1.ChainId.Alfajores\n};\nexports.Baklava = {\n  name: NetworkNames.Baklava,\n  rpcUrl: 'https://baklava-forno.celo-testnet.org',\n  graphQl: 'https://baklava-blockscout.celo-testnet.org/graphiql',\n  explorer: 'https://baklava-blockscout.celo-testnet.org',\n  chainId: types_1.ChainId.Baklava\n};\nexports.Mainnet = {\n  name: NetworkNames.Mainnet,\n  rpcUrl: 'https://forno.celo.org',\n  graphQl: 'https://explorer.celo.org/graphiql',\n  explorer: 'https://explorer.celo.org',\n  chainId: types_1.ChainId.Mainnet\n};\nexports.Localhost = {\n  name: NetworkNames.Localhost,\n  rpcUrl: 'http://localhost:8545',\n  graphQl: '',\n  explorer: '',\n  chainId: 1337\n};\nvar WalletTypes;\n\n(function (WalletTypes) {\n  WalletTypes[\"Valora\"] = \"Valora\";\n  WalletTypes[\"MetaMask\"] = \"MetaMask\";\n  WalletTypes[\"WalletConnect\"] = \"WalletConnect\";\n  WalletTypes[\"CeloDance\"] = \"CeloDance\";\n  WalletTypes[\"CeloWallet\"] = \"CeloWallet\";\n  WalletTypes[\"CeloTerminal\"] = \"CeloTerminal\";\n  WalletTypes[\"CeloExtensionWallet\"] = \"CeloExtensionWallet\";\n  WalletTypes[\"Ledger\"] = \"Ledger\";\n  WalletTypes[\"Injected\"] = \"Injected\";\n  WalletTypes[\"PrivateKey\"] = \"PrivateKey\";\n  WalletTypes[\"Unauthenticated\"] = \"Unauthenticated\";\n})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));\n\nvar WalletIds;\n\n(function (WalletIds) {\n  WalletIds[\"Valora\"] = \"d01c7758d741b363e637a817a09bcf579feae4db9f5bb16f599fdd1f66e2f974\";\n  WalletIds[\"CeloWallet\"] = \"36d854b702817e228d5c853c528d7bdb46f4bb041d255f67b82eb47111e5676b\";\n  WalletIds[\"CeloDance\"] = \"TODO\";\n  WalletIds[\"CeloTerminal\"] = \"8f8506b7f191a8ab95a8295fc8ca147aa152b1358bee4283d6ad2468d97e0ca4\";\n})(WalletIds = exports.WalletIds || (exports.WalletIds = {}));\n/**\n * These wallets cannot have their networks\n * updated via use-contractkit\n */\n\n\nexports.STATIC_NETWORK_WALLETS = [WalletTypes['CeloExtensionWallet']];\n/**\n * Gets the provider associated with a wallet type.\n * @param wallet\n * @returns\n */\n\nvar getProviderForWallet = function (wallet) {\n  return wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];\n};\n\nexports.getProviderForWallet = getProviderForWallet;\n/**\n * Default networks to connect to.\n */\n\nexports.DEFAULT_NETWORKS = __spreadArray([exports.Mainnet, exports.Alfajores, exports.Baklava], __read(process.env.NODE_ENV !== 'production' ? [exports.Localhost] : []), false);","map":{"version":3,"mappings":"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","names":["exports","lastUsedAddress","lastUsedNetwork","lastUsedWalletType","lastUsedWalletArguments","lastUsedFeeCurrency","SupportedProviders","_a","Valora","name","description","icon","walletIcons_1","canConnect","showInList","listPriority","installURL","WalletConnect","Ledger","react_device_detect_1","CeloWallet","CeloTerminal","MetaMask","react_1","href","target","onClick","e","stopPropagation","nativeEvent","className","rel","CeloExtensionWallet","window","celo","Injected","PrivateKey","env","NODE_ENV","CeloDance","_b","NetworkNames","Alfajores","rpcUrl","graphQl","explorer","chainId","types_1","Baklava","Mainnet","Localhost","WalletTypes","WalletIds","getProviderForWallet","wallet","Unauthenticated","__spreadArray","process"],"sourceRoot":"","sources":["../src/constants.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}