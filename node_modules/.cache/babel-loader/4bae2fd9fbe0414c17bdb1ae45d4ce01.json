{"ast":null,"code":"import _asyncToGenerator from \"/Users/crypto/Daisys/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/crypto/Daisys/node_modules/@babel/runtime/regenerator/index.js\";\nimport * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport function generateKey(_x) {\n  return _generateKey.apply(this, arguments);\n}\n\nfunction _generateKey() {\n  _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(length) {\n    var _length, bytes, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _length = (length || 256) / 8;\n            bytes = crypto.randomBytes(_length);\n            result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _generateKey.apply(this, arguments);\n}\n\nexport function verifyHmac(_x2, _x3) {\n  return _verifyHmac.apply(this, arguments);\n}\n\nfunction _verifyHmac() {\n  _verifyHmac = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload, key) {\n    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            hmac = encoding.hexToArray(payload.hmac);\n            hmacHex = encoding.arrayToHex(hmac, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context2.next = 7;\n            return crypto.hmacSha256Sign(key, unsigned);\n\n          case 7:\n            chmac = _context2.sent;\n            chmacHex = encoding.arrayToHex(chmac, false);\n\n            if (!(encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex))) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 11:\n            return _context2.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _verifyHmac.apply(this, arguments);\n}\n\nexport function encrypt(_x4, _x5, _x6) {\n  return _encrypt.apply(this, arguments);\n}\n\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, key, providedIv) {\n    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n            _context3.t0 = providedIv;\n\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.next = 5;\n            return generateKey(128);\n\n          case 5:\n            _context3.t0 = _context3.sent;\n\n          case 6:\n            ivArrayBuffer = _context3.t0;\n            iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n            ivHex = encoding.arrayToHex(iv, false);\n            contentString = JSON.stringify(data);\n            content = encoding.utf8ToArray(contentString);\n            _context3.next = 13;\n            return crypto.aesCbcEncrypt(iv, _key, content);\n\n          case 13:\n            cipherText = _context3.sent;\n            cipherTextHex = encoding.arrayToHex(cipherText, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context3.next = 18;\n            return crypto.hmacSha256Sign(_key, unsigned);\n\n          case 18:\n            hmac = _context3.sent;\n            hmacHex = encoding.arrayToHex(hmac, false);\n            return _context3.abrupt(\"return\", {\n              data: cipherTextHex,\n              hmac: hmacHex,\n              iv: ivHex\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encrypt.apply(this, arguments);\n}\n\nexport function decrypt(_x7, _x8) {\n  return _decrypt.apply(this, arguments);\n}\n\nfunction _decrypt() {\n  _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload, key) {\n    var _key, verified, cipherText, iv, buffer, utf8, data;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n\n            if (_key) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new Error(\"Missing key: required for decryption\");\n\n          case 3:\n            _context4.next = 5;\n            return verifyHmac(payload, _key);\n\n          case 5:\n            verified = _context4.sent;\n\n            if (verified) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            _context4.next = 12;\n            return crypto.aesCbcDecrypt(iv, _key, cipherText);\n\n          case 12:\n            buffer = _context4.sent;\n            utf8 = encoding.arrayToUtf8(buffer);\n            _context4.prev = 14;\n            data = JSON.parse(utf8);\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](14);\n            return _context4.abrupt(\"return\", null);\n\n          case 21:\n            return _context4.abrupt(\"return\", data);\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 18]]);\n  }));\n  return _decrypt.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["crypto","encoding","convertArrayBufferToBuffer","convertBufferToArrayBuffer","generateKey","length","_length","bytes","randomBytes","result","arrayToBuffer","verifyHmac","payload","key","cipherText","hexToArray","data","iv","hmac","hmacHex","arrayToHex","unsigned","concatArrays","hmacSha256Sign","chmac","chmacHex","removeHexPrefix","encrypt","providedIv","_key","bufferToArray","ivArrayBuffer","ivHex","contentString","JSON","stringify","content","utf8ToArray","aesCbcEncrypt","cipherTextHex","decrypt","Error","verified","aesCbcDecrypt","buffer","utf8","arrayToUtf8","parse"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}